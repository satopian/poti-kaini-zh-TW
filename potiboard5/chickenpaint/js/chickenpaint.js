/*
    ChickenPaint Be
    https://github.com/satopian/ChickenPaint_Be
    by satopian
    Customized from ChickenPaint by Nicholas Sherlock.
    GNU GENERAL PUBLIC LICENSE
    Version 3, 29 June 2007
    <http://www.gnu.org/licenses/>
*/
/*
    ChickenPaint

    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.

    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/*!
  * Bootstrap v5.3.3 (https://getbootstrap.com/)
  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).bootstrap=e()}(this,(function(){"use strict";const t=new Map,e={set(e,i,n){t.has(e)||t.set(e,new Map);const s=t.get(e);s.has(i)||0===s.size?s.set(i,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`)},get:(e,i)=>t.has(e)&&t.get(e).get(i)||null,remove(e,i){if(!t.has(e))return;const n=t.get(e);n.delete(i),0===n.size&&t.delete(e)}},i="transitionend",n=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),s=t=>{t.dispatchEvent(new Event(i))},o=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),r=t=>o(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(n(t)):null,a=t=>{if(!o(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),i=t.closest("details:not([open])");if(!i)return e;if(i!==t){const e=t.closest("summary");if(e&&e.parentNode!==i)return!1;if(null===e)return!1}return e},l=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),c=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?c(t.parentNode):null},h=()=>{},d=t=>{t.offsetHeight},u=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,f=[],p=()=>"rtl"===document.documentElement.dir,m=t=>{var e;e=()=>{const e=u();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}},"loading"===document.readyState?(f.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of f)t()})),f.push(e)):e()},g=(t,e=[],i=t)=>"function"==typeof t?t(...e):i,_=(t,e,n=!0)=>{if(!n)return void g(t);const o=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:i}=window.getComputedStyle(t);const n=Number.parseFloat(e),s=Number.parseFloat(i);return n||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(i))):0})(e)+5;let r=!1;const a=({target:n})=>{n===e&&(r=!0,e.removeEventListener(i,a),g(t))};e.addEventListener(i,a),setTimeout((()=>{r||s(e)}),o)},b=(t,e,i,n)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!i&&n?t[s-1]:t[0]:(o+=i?1:-1,n&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},v=/[^.]*(?=\..*)\.|.*/,y=/\..*/,w=/::\d+$/,A={};let E=1;const T={mouseenter:"mouseover",mouseleave:"mouseout"},C=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function O(t,e){return e&&`${e}::${E++}`||t.uidEvent||E++}function x(t){const e=O(t);return t.uidEvent=e,A[e]=A[e]||{},A[e]}function k(t,e,i=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===i))}function L(t,e,i){const n="string"==typeof e,s=n?i:e||i;let o=I(t);return C.has(o)||(o=t),[n,s,o]}function S(t,e,i,n,s){if("string"!=typeof e||!t)return;let[o,r,a]=L(e,i,n);if(e in T){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=x(t),c=l[a]||(l[a]={}),h=k(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=O(r,e.replace(v,"")),u=o?function(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return P(s,{delegateTarget:r}),n.oneOff&&N.off(t,s.type,e,i),i.apply(r,[s])}}(t,i,r):function(t,e){return function i(n){return P(n,{delegateTarget:t}),i.oneOff&&N.off(t,n.type,e),e.apply(t,[n])}}(t,r);u.delegationSelector=o?i:null,u.callable=r,u.oneOff=s,u.uidEvent=d,c[d]=u,t.addEventListener(a,u,o)}function D(t,e,i,n,s){const o=k(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function $(t,e,i,n){const s=e[i]||{};for(const[o,r]of Object.entries(s))o.includes(n)&&D(t,e,i,r.callable,r.delegationSelector)}function I(t){return t=t.replace(y,""),T[t]||t}const N={on(t,e,i,n){S(t,e,i,n,!1)},one(t,e,i,n){S(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=L(e,i,n),a=r!==e,l=x(t),c=l[r]||{},h=e.startsWith(".");if(void 0===o){if(h)for(const i of Object.keys(l))$(t,l,i,e.slice(1));for(const[i,n]of Object.entries(c)){const s=i.replace(w,"");a&&!e.includes(s)||D(t,l,r,n.callable,n.delegationSelector)}}else{if(!Object.keys(c).length)return;D(t,l,r,o,s?i:null)}},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=u();let s=null,o=!0,r=!0,a=!1;e!==I(e)&&n&&(s=n.Event(e,i),n(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=P(new Event(e,{bubbles:o,cancelable:!0}),i);return a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function P(t,e={}){for(const[i,n]of Object.entries(e))try{t[i]=n}catch(e){Object.defineProperty(t,i,{configurable:!0,get:()=>n})}return t}function j(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function M(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const F={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${M(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${M(e)}`)},getDataAttributes(t){if(!t)return{};const e={},i=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=j(t.dataset[n])}return e},getDataAttribute:(t,e)=>j(t.getAttribute(`data-bs-${M(e)}`))};class H{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const i=o(e)?F.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...o(e)?F.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[n,s]of Object.entries(e)){const e=t[n],r=o(e)?"element":null==(i=e)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`)}var i}}class W extends H{constructor(t,i){super(),(t=r(t))&&(this._element=t,this._config=this._getConfig(i),e.set(this._element,this.constructor.DATA_KEY,this))}dispose(){e.remove(this._element,this.constructor.DATA_KEY),N.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,i=!0){_(t,e,i)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return e.get(r(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const B=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let i=t.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&"#"!==i?i.trim():null}return e?e.split(",").map((t=>n(t))).join(","):null},z={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode.closest(e);for(;n;)i.push(n),n=n.parentNode.closest(e);return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!l(t)&&a(t)))},getSelectorFromElement(t){const e=B(t);return e&&z.findOne(e)?e:null},getElementFromSelector(t){const e=B(t);return e?z.findOne(e):null},getMultipleElementsFromSelector(t){const e=B(t);return e?z.find(e):[]}},R=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;N.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),l(this))return;const s=z.getElementFromSelector(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))},q=".bs.alert",V=`close${q}`,K=`closed${q}`;class Q extends W{static get NAME(){return"alert"}close(){if(N.trigger(this._element,V).defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),N.trigger(this._element,K),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=Q.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}R(Q,"close"),m(Q);const X='[data-bs-toggle="button"]';class Y extends W{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=Y.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}N.on(document,"click.bs.button.data-api",X,(t=>{t.preventDefault();const e=t.target.closest(X);Y.getOrCreateInstance(e).toggle()})),m(Y);const U=".bs.swipe",G=`touchstart${U}`,J=`touchmove${U}`,Z=`touchend${U}`,tt=`pointerdown${U}`,et=`pointerup${U}`,it={endCallback:null,leftCallback:null,rightCallback:null},nt={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class st extends H{constructor(t,e){super(),this._element=t,t&&st.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return it}static get DefaultType(){return nt}static get NAME(){return"swipe"}dispose(){N.off(this._element,U)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),g(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&g(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(N.on(this._element,tt,(t=>this._start(t))),N.on(this._element,et,(t=>this._end(t))),this._element.classList.add("pointer-event")):(N.on(this._element,G,(t=>this._start(t))),N.on(this._element,J,(t=>this._move(t))),N.on(this._element,Z,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ot=".bs.carousel",rt=".data-api",at="next",lt="prev",ct="left",ht="right",dt=`slide${ot}`,ut=`slid${ot}`,ft=`keydown${ot}`,pt=`mouseenter${ot}`,mt=`mouseleave${ot}`,gt=`dragstart${ot}`,_t=`load${ot}${rt}`,bt=`click${ot}${rt}`,vt="carousel",yt="active",wt=".active",At=".carousel-item",Et=wt+At,Tt={ArrowLeft:ht,ArrowRight:ct},Ct={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ot={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class xt extends W{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=z.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===vt&&this.cycle()}static get Default(){return Ct}static get DefaultType(){return Ot}static get NAME(){return"carousel"}next(){this._slide(at)}nextWhenVisible(){!document.hidden&&a(this._element)&&this.next()}prev(){this._slide(lt)}pause(){this._isSliding&&s(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?N.one(this._element,ut,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void N.one(this._element,ut,(()=>this.to(t)));const i=this._getItemIndex(this._getActive());if(i===t)return;const n=t>i?at:lt;this._slide(n,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&N.on(this._element,ft,(t=>this._keydown(t))),"hover"===this._config.pause&&(N.on(this._element,pt,(()=>this.pause())),N.on(this._element,mt,(()=>this._maybeEnableCycle()))),this._config.touch&&st.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of z.find(".carousel-item img",this._element))N.on(t,gt,(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(ct)),rightCallback:()=>this._slide(this._directionToOrder(ht)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new st(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Tt[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=z.findOne(wt,this._indicatorsElement);e.classList.remove(yt),e.removeAttribute("aria-current");const i=z.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);i&&(i.classList.add(yt),i.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const i=this._getActive(),n=t===at,s=e||b(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=e=>N.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(i),to:o});if(r(dt).defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),d(s),i.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(yt),i.classList.remove(yt,c,l),this._isSliding=!1,r(ut)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return z.findOne(Et,this._element)}_getItems(){return z.find(At,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return p()?t===ct?lt:at:t===ct?at:lt}_orderToDirection(t){return p()?t===lt?ct:ht:t===lt?ht:ct}static jQueryInterface(t){return this.each((function(){const e=xt.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}N.on(document,bt,"[data-bs-slide], [data-bs-slide-to]",(function(t){const e=z.getElementFromSelector(this);if(!e||!e.classList.contains(vt))return;t.preventDefault();const i=xt.getOrCreateInstance(e),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===F.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),N.on(window,_t,(()=>{const t=z.find('[data-bs-ride="carousel"]');for(const e of t)xt.getOrCreateInstance(e)})),m(xt);const kt=".bs.collapse",Lt=`show${kt}`,St=`shown${kt}`,Dt=`hide${kt}`,$t=`hidden${kt}`,It=`click${kt}.data-api`,Nt="show",Pt="collapse",jt="collapsing",Mt=`:scope .${Pt} .${Pt}`,Ft='[data-bs-toggle="collapse"]',Ht={parent:null,toggle:!0},Wt={parent:"(null|element)",toggle:"boolean"};class Bt extends W{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const i=z.find(Ft);for(const t of i){const e=z.getSelectorFromElement(t),i=z.find(e).filter((t=>t===this._element));null!==e&&i.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ht}static get DefaultType(){return Wt}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>Bt.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(N.trigger(this._element,Lt).defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(Pt),this._element.classList.add(jt),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(jt),this._element.classList.add(Pt,Nt),this._element.style[e]="",N.trigger(this._element,St)}),this._element,!0),this._element.style[e]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(N.trigger(this._element,Dt).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,d(this._element),this._element.classList.add(jt),this._element.classList.remove(Pt,Nt);for(const t of this._triggerArray){const e=z.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(jt),this._element.classList.add(Pt),N.trigger(this._element,$t)}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Nt)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=r(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren(Ft);for(const e of t){const t=z.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=z.find(Mt,this._config.parent);return z.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const i of t)i.classList.toggle("collapsed",!e),i.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const i=Bt.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}N.on(document,It,Ft,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of z.getMultipleElementsFromSelector(this))Bt.getOrCreateInstance(t,{toggle:!1}).toggle()})),m(Bt);var zt="top",Rt="bottom",qt="right",Vt="left",Kt="auto",Qt=[zt,Rt,qt,Vt],Xt="start",Yt="end",Ut="clippingParents",Gt="viewport",Jt="popper",Zt="reference",te=Qt.reduce((function(t,e){return t.concat([e+"-"+Xt,e+"-"+Yt])}),[]),ee=[].concat(Qt,[Kt]).reduce((function(t,e){return t.concat([e,e+"-"+Xt,e+"-"+Yt])}),[]),ie="beforeRead",ne="read",se="afterRead",oe="beforeMain",re="main",ae="afterMain",le="beforeWrite",ce="write",he="afterWrite",de=[ie,ne,se,oe,re,ae,le,ce,he];function ue(t){return t?(t.nodeName||"").toLowerCase():null}function fe(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function pe(t){return t instanceof fe(t).Element||t instanceof Element}function me(t){return t instanceof fe(t).HTMLElement||t instanceof HTMLElement}function ge(t){return"undefined"!=typeof ShadowRoot&&(t instanceof fe(t).ShadowRoot||t instanceof ShadowRoot)}const _e={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},n=e.attributes[t]||{},s=e.elements[t];me(s)&&ue(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(t){var e=n[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var n=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});me(n)&&ue(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(t){n.removeAttribute(t)})))}))}},requires:["computeStyles"]};function be(t){return t.split("-")[0]}var ve=Math.max,ye=Math.min,we=Math.round;function Ae(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function Ee(){return!/^((?!chrome|android).)*safari/i.test(Ae())}function Te(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var n=t.getBoundingClientRect(),s=1,o=1;e&&me(t)&&(s=t.offsetWidth>0&&we(n.width)/t.offsetWidth||1,o=t.offsetHeight>0&&we(n.height)/t.offsetHeight||1);var r=(pe(t)?fe(t):window).visualViewport,a=!Ee()&&i,l=(n.left+(a&&r?r.offsetLeft:0))/s,c=(n.top+(a&&r?r.offsetTop:0))/o,h=n.width/s,d=n.height/o;return{width:h,height:d,top:c,right:l+h,bottom:c+d,left:l,x:l,y:c}}function Ce(t){var e=Te(t),i=t.offsetWidth,n=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-n)<=1&&(n=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:n}}function Oe(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&ge(i)){var n=e;do{if(n&&t.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function xe(t){return fe(t).getComputedStyle(t)}function ke(t){return["table","td","th"].indexOf(ue(t))>=0}function Le(t){return((pe(t)?t.ownerDocument:t.document)||window.document).documentElement}function Se(t){return"html"===ue(t)?t:t.assignedSlot||t.parentNode||(ge(t)?t.host:null)||Le(t)}function De(t){return me(t)&&"fixed"!==xe(t).position?t.offsetParent:null}function $e(t){for(var e=fe(t),i=De(t);i&&ke(i)&&"static"===xe(i).position;)i=De(i);return i&&("html"===ue(i)||"body"===ue(i)&&"static"===xe(i).position)?e:i||function(t){var e=/firefox/i.test(Ae());if(/Trident/i.test(Ae())&&me(t)&&"fixed"===xe(t).position)return null;var i=Se(t);for(ge(i)&&(i=i.host);me(i)&&["html","body"].indexOf(ue(i))<0;){var n=xe(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(t)||e}function Ie(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function Ne(t,e,i){return ve(t,ye(e,i))}function Pe(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function je(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}const Me={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,i=t.state,n=t.name,s=t.options,o=i.elements.arrow,r=i.modifiersData.popperOffsets,a=be(i.placement),l=Ie(a),c=[Vt,qt].indexOf(a)>=0?"height":"width";if(o&&r){var h=function(t,e){return Pe("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:je(t,Qt))}(s.padding,i),d=Ce(o),u="y"===l?zt:Vt,f="y"===l?Rt:qt,p=i.rects.reference[c]+i.rects.reference[l]-r[l]-i.rects.popper[c],m=r[l]-i.rects.reference[l],g=$e(o),_=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,b=p/2-m/2,v=h[u],y=_-d[c]-h[f],w=_/2-d[c]/2+b,A=Ne(v,w,y),E=l;i.modifiersData[n]=((e={})[E]=A,e.centerOffset=A-w,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&Oe(e.elements.popper,n)&&(e.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Fe(t){return t.split("-")[1]}var He={top:"auto",right:"auto",bottom:"auto",left:"auto"};function We(t){var e,i=t.popper,n=t.popperRect,s=t.placement,o=t.variation,r=t.offsets,a=t.position,l=t.gpuAcceleration,c=t.adaptive,h=t.roundOffsets,d=t.isFixed,u=r.x,f=void 0===u?0:u,p=r.y,m=void 0===p?0:p,g="function"==typeof h?h({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var _=r.hasOwnProperty("x"),b=r.hasOwnProperty("y"),v=Vt,y=zt,w=window;if(c){var A=$e(i),E="clientHeight",T="clientWidth";A===fe(i)&&"static"!==xe(A=Le(i)).position&&"absolute"===a&&(E="scrollHeight",T="scrollWidth"),(s===zt||(s===Vt||s===qt)&&o===Yt)&&(y=Rt,m-=(d&&A===w&&w.visualViewport?w.visualViewport.height:A[E])-n.height,m*=l?1:-1),s!==Vt&&(s!==zt&&s!==Rt||o!==Yt)||(v=qt,f-=(d&&A===w&&w.visualViewport?w.visualViewport.width:A[T])-n.width,f*=l?1:-1)}var C,O=Object.assign({position:a},c&&He),x=!0===h?function(t,e){var i=t.x,n=t.y,s=e.devicePixelRatio||1;return{x:we(i*s)/s||0,y:we(n*s)/s||0}}({x:f,y:m},fe(i)):{x:f,y:m};return f=x.x,m=x.y,l?Object.assign({},O,((C={})[y]=b?"0":"",C[v]=_?"0":"",C.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",C)):Object.assign({},O,((e={})[y]=b?m+"px":"",e[v]=_?f+"px":"",e.transform="",e))}const Be={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:be(e.placement),variation:Fe(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,We(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,We(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var ze={passive:!0};const Re={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,i=t.instance,n=t.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=fe(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",i.update,ze)})),a&&l.addEventListener("resize",i.update,ze),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",i.update,ze)})),a&&l.removeEventListener("resize",i.update,ze)}},data:{}};var qe={left:"right",right:"left",bottom:"top",top:"bottom"};function Ve(t){return t.replace(/left|right|bottom|top/g,(function(t){return qe[t]}))}var Ke={start:"end",end:"start"};function Qe(t){return t.replace(/start|end/g,(function(t){return Ke[t]}))}function Xe(t){var e=fe(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Ye(t){return Te(Le(t)).left+Xe(t).scrollLeft}function Ue(t){var e=xe(t),i=e.overflow,n=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function Ge(t){return["html","body","#document"].indexOf(ue(t))>=0?t.ownerDocument.body:me(t)&&Ue(t)?t:Ge(Se(t))}function Je(t,e){var i;void 0===e&&(e=[]);var n=Ge(t),s=n===(null==(i=t.ownerDocument)?void 0:i.body),o=fe(n),r=s?[o].concat(o.visualViewport||[],Ue(n)?n:[]):n,a=e.concat(r);return s?a:a.concat(Je(Se(r)))}function Ze(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ti(t,e,i){return e===Gt?Ze(function(t,e){var i=fe(t),n=Le(t),s=i.visualViewport,o=n.clientWidth,r=n.clientHeight,a=0,l=0;if(s){o=s.width,r=s.height;var c=Ee();(c||!c&&"fixed"===e)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:o,height:r,x:a+Ye(t),y:l}}(t,i)):pe(e)?function(t,e){var i=Te(t,!1,"fixed"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):Ze(function(t){var e,i=Le(t),n=Xe(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=ve(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=ve(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+Ye(t),l=-n.scrollTop;return"rtl"===xe(s||i).direction&&(a+=ve(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(Le(t)))}function ei(t){var e,i=t.reference,n=t.element,s=t.placement,o=s?be(s):null,r=s?Fe(s):null,a=i.x+i.width/2-n.width/2,l=i.y+i.height/2-n.height/2;switch(o){case zt:e={x:a,y:i.y-n.height};break;case Rt:e={x:a,y:i.y+i.height};break;case qt:e={x:i.x+i.width,y:l};break;case Vt:e={x:i.x-n.width,y:l};break;default:e={x:i.x,y:i.y}}var c=o?Ie(o):null;if(null!=c){var h="y"===c?"height":"width";switch(r){case Xt:e[c]=e[c]-(i[h]/2-n[h]/2);break;case Yt:e[c]=e[c]+(i[h]/2-n[h]/2)}}return e}function ii(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=void 0===n?t.placement:n,o=i.strategy,r=void 0===o?t.strategy:o,a=i.boundary,l=void 0===a?Ut:a,c=i.rootBoundary,h=void 0===c?Gt:c,d=i.elementContext,u=void 0===d?Jt:d,f=i.altBoundary,p=void 0!==f&&f,m=i.padding,g=void 0===m?0:m,_=Pe("number"!=typeof g?g:je(g,Qt)),b=u===Jt?Zt:Jt,v=t.rects.popper,y=t.elements[p?b:u],w=function(t,e,i,n){var s="clippingParents"===e?function(t){var e=Je(Se(t)),i=["absolute","fixed"].indexOf(xe(t).position)>=0&&me(t)?$e(t):t;return pe(i)?e.filter((function(t){return pe(t)&&Oe(t,i)&&"body"!==ue(t)})):[]}(t):[].concat(e),o=[].concat(s,[i]),r=o[0],a=o.reduce((function(e,i){var s=ti(t,i,n);return e.top=ve(s.top,e.top),e.right=ye(s.right,e.right),e.bottom=ye(s.bottom,e.bottom),e.left=ve(s.left,e.left),e}),ti(t,r,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(pe(y)?y:y.contextElement||Le(t.elements.popper),l,h,r),A=Te(t.elements.reference),E=ei({reference:A,element:v,strategy:"absolute",placement:s}),T=Ze(Object.assign({},v,E)),C=u===Jt?T:A,O={top:w.top-C.top+_.top,bottom:C.bottom-w.bottom+_.bottom,left:w.left-C.left+_.left,right:C.right-w.right+_.right},x=t.modifiersData.offset;if(u===Jt&&x){var k=x[s];Object.keys(O).forEach((function(t){var e=[qt,Rt].indexOf(t)>=0?1:-1,i=[zt,Rt].indexOf(t)>=0?"y":"x";O[t]+=k[i]*e}))}return O}function ni(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,c=void 0===l?ee:l,h=Fe(n),d=h?a?te:te.filter((function(t){return Fe(t)===h})):Qt,u=d.filter((function(t){return c.indexOf(t)>=0}));0===u.length&&(u=d);var f=u.reduce((function(e,i){return e[i]=ii(t,{placement:i,boundary:s,rootBoundary:o,padding:r})[be(i)],e}),{});return Object.keys(f).sort((function(t,e){return f[t]-f[e]}))}const si={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,n=t.name;if(!e.modifiersData[n]._skip){for(var s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0===r||r,l=i.fallbackPlacements,c=i.padding,h=i.boundary,d=i.rootBoundary,u=i.altBoundary,f=i.flipVariations,p=void 0===f||f,m=i.allowedAutoPlacements,g=e.options.placement,_=be(g),b=l||(_!==g&&p?function(t){if(be(t)===Kt)return[];var e=Ve(t);return[Qe(t),e,Qe(e)]}(g):[Ve(g)]),v=[g].concat(b).reduce((function(t,i){return t.concat(be(i)===Kt?ni(e,{placement:i,boundary:h,rootBoundary:d,padding:c,flipVariations:p,allowedAutoPlacements:m}):i)}),[]),y=e.rects.reference,w=e.rects.popper,A=new Map,E=!0,T=v[0],C=0;C<v.length;C++){var O=v[C],x=be(O),k=Fe(O)===Xt,L=[zt,Rt].indexOf(x)>=0,S=L?"width":"height",D=ii(e,{placement:O,boundary:h,rootBoundary:d,altBoundary:u,padding:c}),$=L?k?qt:Vt:k?Rt:zt;y[S]>w[S]&&($=Ve($));var I=Ve($),N=[];if(o&&N.push(D[x]<=0),a&&N.push(D[$]<=0,D[I]<=0),N.every((function(t){return t}))){T=O,E=!1;break}A.set(O,N)}if(E)for(var P=function(t){var e=v.find((function(e){var i=A.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return T=e,"break"},j=p?3:1;j>0&&"break"!==P(j);j--);e.placement!==T&&(e.modifiersData[n]._skip=!0,e.placement=T,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function oi(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function ri(t){return[zt,qt,Rt,Vt].some((function(e){return t[e]>=0}))}const ai={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=ii(e,{elementContext:"reference"}),a=ii(e,{altBoundary:!0}),l=oi(r,n),c=oi(a,s,o),h=ri(l),d=ri(c);e.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}},li={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,n=t.name,s=i.offset,o=void 0===s?[0,0]:s,r=ee.reduce((function(t,i){return t[i]=function(t,e,i){var n=be(t),s=[Vt,zt].indexOf(n)>=0?-1:1,o="function"==typeof i?i(Object.assign({},e,{placement:t})):i,r=o[0],a=o[1];return r=r||0,a=(a||0)*s,[Vt,qt].indexOf(n)>=0?{x:a,y:r}:{x:r,y:a}}(i,e.rects,o),t}),{}),a=r[e.placement],l=a.x,c=a.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=l,e.modifiersData.popperOffsets.y+=c),e.modifiersData[n]=r}},ci={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=ei({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},hi={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,n=t.name,s=i.mainAxis,o=void 0===s||s,r=i.altAxis,a=void 0!==r&&r,l=i.boundary,c=i.rootBoundary,h=i.altBoundary,d=i.padding,u=i.tether,f=void 0===u||u,p=i.tetherOffset,m=void 0===p?0:p,g=ii(e,{boundary:l,rootBoundary:c,padding:d,altBoundary:h}),_=be(e.placement),b=Fe(e.placement),v=!b,y=Ie(_),w="x"===y?"y":"x",A=e.modifiersData.popperOffsets,E=e.rects.reference,T=e.rects.popper,C="function"==typeof m?m(Object.assign({},e.rects,{placement:e.placement})):m,O="number"==typeof C?{mainAxis:C,altAxis:C}:Object.assign({mainAxis:0,altAxis:0},C),x=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,k={x:0,y:0};if(A){if(o){var L,S="y"===y?zt:Vt,D="y"===y?Rt:qt,$="y"===y?"height":"width",I=A[y],N=I+g[S],P=I-g[D],j=f?-T[$]/2:0,M=b===Xt?E[$]:T[$],F=b===Xt?-T[$]:-E[$],H=e.elements.arrow,W=f&&H?Ce(H):{width:0,height:0},B=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},z=B[S],R=B[D],q=Ne(0,E[$],W[$]),V=v?E[$]/2-j-q-z-O.mainAxis:M-q-z-O.mainAxis,K=v?-E[$]/2+j+q+R+O.mainAxis:F+q+R+O.mainAxis,Q=e.elements.arrow&&$e(e.elements.arrow),X=Q?"y"===y?Q.clientTop||0:Q.clientLeft||0:0,Y=null!=(L=null==x?void 0:x[y])?L:0,U=I+K-Y,G=Ne(f?ye(N,I+V-Y-X):N,I,f?ve(P,U):P);A[y]=G,k[y]=G-I}if(a){var J,Z="x"===y?zt:Vt,tt="x"===y?Rt:qt,et=A[w],it="y"===w?"height":"width",nt=et+g[Z],st=et-g[tt],ot=-1!==[zt,Vt].indexOf(_),rt=null!=(J=null==x?void 0:x[w])?J:0,at=ot?nt:et-E[it]-T[it]-rt+O.altAxis,lt=ot?et+E[it]+T[it]-rt-O.altAxis:st,ct=f&&ot?function(t,e,i){var n=Ne(t,e,i);return n>i?i:n}(at,et,lt):Ne(f?at:nt,et,f?lt:st);A[w]=ct,k[w]=ct-et}e.modifiersData[n]=k}},requiresIfExists:["offset"]};function di(t,e,i){void 0===i&&(i=!1);var n,s,o=me(e),r=me(e)&&function(t){var e=t.getBoundingClientRect(),i=we(e.width)/t.offsetWidth||1,n=we(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),a=Le(e),l=Te(t,r,i),c={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(o||!o&&!i)&&(("body"!==ue(e)||Ue(a))&&(c=(n=e)!==fe(n)&&me(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:Xe(n)),me(e)?((h=Te(e,!0)).x+=e.clientLeft,h.y+=e.clientTop):a&&(h.x=Ye(a))),{x:l.left+c.scrollLeft-h.x,y:l.top+c.scrollTop-h.y,width:l.width,height:l.height}}function ui(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}var fi={placement:"bottom",modifiers:[],strategy:"absolute"};function pi(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function mi(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,n=void 0===i?[]:i,s=e.defaultOptions,o=void 0===s?fi:s;return function(t,e,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},fi,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,h={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;d(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:pe(t)?Je(t):t.contextElement?Je(t.contextElement):[],popper:Je(e)};var r,c,u=function(t){var e=ui(t);return de.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=u.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,s=t.effect;if("function"==typeof s){var o=s({state:a,name:e,instance:h,options:n});l.push(o||function(){})}})),h.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,i=t.popper;if(pi(e,i)){a.rects={reference:di(e,$e(i),"fixed"===a.options.strategy),popper:Ce(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,d=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:d,instance:h})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(t){h.forceUpdate(),t(a)}))},function(){return r||(r=new Promise((function(t){Promise.resolve().then((function(){r=void 0,t(s())}))}))),r}),destroy:function(){d(),c=!0}};if(!pi(t,e))return h;function d(){l.forEach((function(t){return t()})),l=[]}return h.setOptions(i).then((function(t){!c&&i.onFirstUpdate&&i.onFirstUpdate(t)})),h}}var gi=mi(),_i=mi({defaultModifiers:[Re,ci,Be,_e]}),bi=mi({defaultModifiers:[Re,ci,Be,_e,li,si,hi,Me,ai]});const vi=Object.freeze(Object.defineProperty({__proto__:null,afterMain:ae,afterRead:se,afterWrite:he,applyStyles:_e,arrow:Me,auto:Kt,basePlacements:Qt,beforeMain:oe,beforeRead:ie,beforeWrite:le,bottom:Rt,clippingParents:Ut,computeStyles:Be,createPopper:bi,createPopperBase:gi,createPopperLite:_i,detectOverflow:ii,end:Yt,eventListeners:Re,flip:si,hide:ai,left:Vt,main:re,modifierPhases:de,offset:li,placements:ee,popper:Jt,popperGenerator:mi,popperOffsets:ci,preventOverflow:hi,read:ne,reference:Zt,right:qt,start:Xt,top:zt,variationPlacements:te,viewport:Gt,write:ce},Symbol.toStringTag,{value:"Module"})),yi="dropdown",wi=".bs.dropdown",Ai=".data-api",Ei="ArrowUp",Ti="ArrowDown",Ci=`hide${wi}`,Oi=`hidden${wi}`,xi=`show${wi}`,ki=`shown${wi}`,Li=`click${wi}${Ai}`,Si=`keydown${wi}${Ai}`,Di=`keyup${wi}${Ai}`,$i="show",Ii='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Ni=`${Ii}.${$i}`,Pi=".dropdown-menu",ji=p()?"top-end":"top-start",Mi=p()?"top-start":"top-end",Fi=p()?"bottom-end":"bottom-start",Hi=p()?"bottom-start":"bottom-end",Wi=p()?"left-start":"right-start",Bi=p()?"right-start":"left-start",zi={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Ri={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class qi extends W{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=z.next(this._element,Pi)[0]||z.prev(this._element,Pi)[0]||z.findOne(Pi,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return zi}static get DefaultType(){return Ri}static get NAME(){return yi}toggle(){return this._isShown()?this.hide():this.show()}show(){if(l(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!N.trigger(this._element,xi,t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))N.on(t,"mouseover",h);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add($i),this._element.classList.add($i),N.trigger(this._element,ki,t)}}hide(){if(l(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!N.trigger(this._element,Ci,t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.off(t,"mouseover",h);this._popper&&this._popper.destroy(),this._menu.classList.remove($i),this._element.classList.remove($i),this._element.setAttribute("aria-expanded","false"),F.removeDataAttribute(this._menu,"popper"),N.trigger(this._element,Oi,t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!o(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${yi.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===vi)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:o(this._config.reference)?t=r(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const e=this._getPopperConfig();this._popper=bi(t,this._menu,e)}_isShown(){return this._menu.classList.contains($i)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return Wi;if(t.classList.contains("dropstart"))return Bi;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Mi:ji:e?Hi:Fi}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(F.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...g(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const i=z.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>a(t)));i.length&&b(i,e,t===Ti,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=qi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=z.find(Ni);for(const i of e){const e=qi.getInstance(i);if(!e||!1===e._config.autoClose)continue;const n=t.composedPath(),s=n.includes(e._menu);if(n.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),i="Escape"===t.key,n=[Ei,Ti].includes(t.key);if(!n&&!i)return;if(e&&!i)return;t.preventDefault();const s=this.matches(Ii)?this:z.prev(this,Ii)[0]||z.next(this,Ii)[0]||z.findOne(Ii,t.delegateTarget.parentNode),o=qi.getOrCreateInstance(s);if(n)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}N.on(document,Si,Ii,qi.dataApiKeydownHandler),N.on(document,Si,Pi,qi.dataApiKeydownHandler),N.on(document,Li,qi.clearMenus),N.on(document,Di,qi.clearMenus),N.on(document,Li,Ii,(function(t){t.preventDefault(),qi.getOrCreateInstance(this).toggle()})),m(qi);const Vi="backdrop",Ki="show",Qi=`mousedown.bs.${Vi}`,Xi={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Yi={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Ui extends H{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return Xi}static get DefaultType(){return Yi}static get NAME(){return Vi}show(t){if(!this._config.isVisible)return void g(t);this._append();const e=this._getElement();this._config.isAnimated&&d(e),e.classList.add(Ki),this._emulateAnimation((()=>{g(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(Ki),this._emulateAnimation((()=>{this.dispose(),g(t)}))):g(t)}dispose(){this._isAppended&&(N.off(this._element,Qi),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=r(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),N.on(t,Qi,(()=>{g(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){_(t,this._getElement(),this._config.isAnimated)}}const Gi=".bs.focustrap",Ji=`focusin${Gi}`,Zi=`keydown.tab${Gi}`,tn="backward",en={autofocus:!0,trapElement:null},nn={autofocus:"boolean",trapElement:"element"};class sn extends H{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return en}static get DefaultType(){return nn}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),N.off(document,Gi),N.on(document,Ji,(t=>this._handleFocusin(t))),N.on(document,Zi,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,N.off(document,Gi))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const i=z.focusableChildren(e);0===i.length?e.focus():this._lastTabNavDirection===tn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?tn:"forward")}}const on=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",rn=".sticky-top",an="padding-right",ln="margin-right";class cn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,an,(e=>e+t)),this._setElementAttributes(on,an,(e=>e+t)),this._setElementAttributes(rn,ln,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,an),this._resetElementAttributes(on,an),this._resetElementAttributes(rn,ln)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const i=t.style.getPropertyValue(e);i&&F.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const i=F.getDataAttribute(t,e);null!==i?(F.removeDataAttribute(t,e),t.style.setProperty(e,i)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(o(t))e(t);else for(const i of z.find(t,this._element))e(i)}}const hn=".bs.modal",dn=`hide${hn}`,un=`hidePrevented${hn}`,fn=`hidden${hn}`,pn=`show${hn}`,mn=`shown${hn}`,gn=`resize${hn}`,_n=`click.dismiss${hn}`,bn=`mousedown.dismiss${hn}`,vn=`keydown.dismiss${hn}`,yn=`click${hn}.data-api`,wn="modal-open",An="show",En="modal-static",Tn={backdrop:!0,focus:!0,keyboard:!0},Cn={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class On extends W{constructor(t,e){super(t,e),this._dialog=z.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new cn,this._addEventListeners()}static get Default(){return Tn}static get DefaultType(){return Cn}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||N.trigger(this._element,pn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(wn),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){this._isShown&&!this._isTransitioning&&(N.trigger(this._element,dn).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(An),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){N.off(window,hn),N.off(this._dialog,hn),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Ui({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new sn({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=z.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),d(this._element),this._element.classList.add(An),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,N.trigger(this._element,mn,{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){N.on(this._element,vn,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),N.on(window,gn,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),N.on(this._element,bn,(t=>{N.one(this._element,_n,(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(wn),this._resetAdjustments(),this._scrollBar.reset(),N.trigger(this._element,fn)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(N.trigger(this._element,un).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(En)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(En),this._queueCallback((()=>{this._element.classList.remove(En),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;if(i&&!t){const t=p()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!i&&t){const t=p()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=On.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}N.on(document,yn,'[data-bs-toggle="modal"]',(function(t){const e=z.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),N.one(e,pn,(t=>{t.defaultPrevented||N.one(e,fn,(()=>{a(this)&&this.focus()}))}));const i=z.findOne(".modal.show");i&&On.getInstance(i).hide(),On.getOrCreateInstance(e).toggle(this)})),R(On),m(On);const xn=".bs.offcanvas",kn=".data-api",Ln=`load${xn}${kn}`,Sn="show",Dn="showing",$n="hiding",In=".offcanvas.show",Nn=`show${xn}`,Pn=`shown${xn}`,jn=`hide${xn}`,Mn=`hidePrevented${xn}`,Fn=`hidden${xn}`,Hn=`resize${xn}`,Wn=`click${xn}${kn}`,Bn=`keydown.dismiss${xn}`,zn={backdrop:!0,keyboard:!0,scroll:!1},Rn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class qn extends W{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return zn}static get DefaultType(){return Rn}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||N.trigger(this._element,Nn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new cn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Dn),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Sn),this._element.classList.remove(Dn),N.trigger(this._element,Pn,{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(N.trigger(this._element,jn).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add($n),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(Sn,$n),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new cn).reset(),N.trigger(this._element,Fn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new Ui({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():N.trigger(this._element,Mn)}:null})}_initializeFocusTrap(){return new sn({trapElement:this._element})}_addEventListeners(){N.on(this._element,Bn,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():N.trigger(this._element,Mn))}))}static jQueryInterface(t){return this.each((function(){const e=qn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}N.on(document,Wn,'[data-bs-toggle="offcanvas"]',(function(t){const e=z.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),l(this))return;N.one(e,Fn,(()=>{a(this)&&this.focus()}));const i=z.findOne(In);i&&i!==e&&qn.getInstance(i).hide(),qn.getOrCreateInstance(e).toggle(this)})),N.on(window,Ln,(()=>{for(const t of z.find(In))qn.getOrCreateInstance(t).show()})),N.on(window,Hn,(()=>{for(const t of z.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&qn.getOrCreateInstance(t).hide()})),R(qn),m(qn);const Vn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Kn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Qn=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,Xn=(t,e)=>{const i=t.nodeName.toLowerCase();return e.includes(i)?!Kn.has(i)||Boolean(Qn.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(i)))},Yn={allowList:Vn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Un={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Gn={entry:"(string|element|function|null)",selector:"(string|element)"};class Jn extends H{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return Yn}static get DefaultType(){return Un}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,i]of Object.entries(this._config.content))this._setContent(t,i,e);const e=t.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&e.classList.add(...i.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,i]of Object.entries(t))super._typeCheckConfig({selector:e,entry:i},Gn)}_setContent(t,e,i){const n=z.findOne(i,t);n&&((e=this._resolvePossibleFunction(e))?o(e)?this._putElementInTemplate(r(e),n):this._config.html?n.innerHTML=this._maybeSanitize(e):n.textContent=e:n.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const t of s){const i=t.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){t.remove();continue}const n=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[i]||[]);for(const e of n)Xn(e,s)||t.removeAttribute(e.nodeName)}return n.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return g(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const Zn=new Set(["sanitize","allowList","sanitizeFn"]),ts="fade",es="show",is=".modal",ns="hide.bs.modal",ss="hover",os="focus",rs={AUTO:"auto",TOP:"top",RIGHT:p()?"left":"right",BOTTOM:"bottom",LEFT:p()?"right":"left"},as={allowList:Vn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},ls={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class cs extends W{constructor(t,e){if(void 0===vi)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,e),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return as}static get DefaultType(){return ls}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),N.off(this._element.closest(is),ns,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=N.trigger(this._element,this.constructor.eventName("show")),e=(c(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),N.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(es),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.on(t,"mouseover",h);this._queueCallback((()=>{N.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!N.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(es),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))N.off(t,"mouseover",h);this._activeTrigger.click=!1,this._activeTrigger[os]=!1,this._activeTrigger[ss]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),N.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(ts,es),e.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",i),this._isAnimated()&&e.classList.add(ts),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new Jn({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ts)}_isShown(){return this.tip&&this.tip.classList.contains(es)}_createPopper(t){const e=g(this._config.placement,[this,t,this._element]),i=rs[e.toUpperCase()];return bi(this._element,t,this._getPopperConfig(i))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return g(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...g(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)N.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===ss?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=e===ss?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");N.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?os:ss]=!0,e._enter()})),N.on(this._element,i,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?os:ss]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},N.on(this._element.closest(is),ns,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=F.getDataAttributes(this._element);for(const t of Object.keys(e))Zn.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:r(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,i]of Object.entries(this._config))this.constructor.Default[e]!==i&&(t[e]=i);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=cs.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}m(cs);const hs={...cs.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},ds={...cs.DefaultType,content:"(null|string|element|function)"};class us extends cs{static get Default(){return hs}static get DefaultType(){return ds}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=us.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}m(us);const fs=".bs.scrollspy",ps=`activate${fs}`,ms=`click${fs}`,gs=`load${fs}.data-api`,_s="active",bs="[href]",vs=".nav-link",ys=`${vs}, .nav-item > ${vs}, .list-group-item`,ws={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},As={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Es extends W{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return ws}static get DefaultType(){return As}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=r(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(N.off(this._config.target,ms),N.on(this._config.target,ms,bs,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const i=this._rootElement||window,n=e.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),i=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(i(o),!n)return}else s||t||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=z.find(bs,this._config.target);for(const e of t){if(!e.hash||l(e))continue;const t=z.findOne(decodeURI(e.hash),this._element);a(t)&&(this._targetLinks.set(decodeURI(e.hash),e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(_s),this._activateParents(t),N.trigger(this._element,ps,{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))z.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(_s);else for(const e of z.parents(t,".nav, .list-group"))for(const t of z.prev(e,ys))t.classList.add(_s)}_clearActiveClass(t){t.classList.remove(_s);const e=z.find(`${bs}.${_s}`,t);for(const t of e)t.classList.remove(_s)}static jQueryInterface(t){return this.each((function(){const e=Es.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}N.on(window,gs,(()=>{for(const t of z.find('[data-bs-spy="scroll"]'))Es.getOrCreateInstance(t)})),m(Es);const Ts=".bs.tab",Cs=`hide${Ts}`,Os=`hidden${Ts}`,xs=`show${Ts}`,ks=`shown${Ts}`,Ls=`click${Ts}`,Ss=`keydown${Ts}`,Ds=`load${Ts}`,$s="ArrowLeft",Is="ArrowRight",Ns="ArrowUp",Ps="ArrowDown",js="Home",Ms="End",Fs="active",Hs="fade",Ws="show",Bs=".dropdown-toggle",zs=`:not(${Bs})`,Rs='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',qs=`.nav-link${zs}, .list-group-item${zs}, [role="tab"]${zs}, ${Rs}`,Vs=`.${Fs}[data-bs-toggle="tab"], .${Fs}[data-bs-toggle="pill"], .${Fs}[data-bs-toggle="list"]`;class Ks extends W{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),N.on(this._element,Ss,(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),i=e?N.trigger(e,Cs,{relatedTarget:t}):null;N.trigger(t,xs,{relatedTarget:e}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){t&&(t.classList.add(Fs),this._activate(z.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),N.trigger(t,ks,{relatedTarget:e})):t.classList.add(Ws)}),t,t.classList.contains(Hs)))}_deactivate(t,e){t&&(t.classList.remove(Fs),t.blur(),this._deactivate(z.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),N.trigger(t,Os,{relatedTarget:e})):t.classList.remove(Ws)}),t,t.classList.contains(Hs)))}_keydown(t){if(![$s,Is,Ns,Ps,js,Ms].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=this._getChildren().filter((t=>!l(t)));let i;if([js,Ms].includes(t.key))i=e[t.key===js?0:e.length-1];else{const n=[Is,Ps].includes(t.key);i=b(e,t.target,n,!0)}i&&(i.focus({preventScroll:!0}),Ks.getOrCreateInstance(i).show())}_getChildren(){return z.find(qs,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),i=this._getOuterElement(t);t.setAttribute("aria-selected",e),i!==t&&this._setAttributeIfNotExists(i,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=z.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`${t.id}`))}_toggleDropDown(t,e){const i=this._getOuterElement(t);if(!i.classList.contains("dropdown"))return;const n=(t,n)=>{const s=z.findOne(t,i);s&&s.classList.toggle(n,e)};n(Bs,Fs),n(".dropdown-menu",Ws),i.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,i){t.hasAttribute(e)||t.setAttribute(e,i)}_elemIsActive(t){return t.classList.contains(Fs)}_getInnerElement(t){return t.matches(qs)?t:z.findOne(qs,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=Ks.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}N.on(document,Ls,Rs,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),l(this)||Ks.getOrCreateInstance(this).show()})),N.on(window,Ds,(()=>{for(const t of z.find(Vs))Ks.getOrCreateInstance(t)})),m(Ks);const Qs=".bs.toast",Xs=`mouseover${Qs}`,Ys=`mouseout${Qs}`,Us=`focusin${Qs}`,Gs=`focusout${Qs}`,Js=`hide${Qs}`,Zs=`hidden${Qs}`,to=`show${Qs}`,eo=`shown${Qs}`,io="hide",no="show",so="showing",oo={animation:"boolean",autohide:"boolean",delay:"number"},ro={animation:!0,autohide:!0,delay:5e3};class ao extends W{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return ro}static get DefaultType(){return oo}static get NAME(){return"toast"}show(){N.trigger(this._element,to).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(io),d(this._element),this._element.classList.add(no,so),this._queueCallback((()=>{this._element.classList.remove(so),N.trigger(this._element,eo),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(N.trigger(this._element,Js).defaultPrevented||(this._element.classList.add(so),this._queueCallback((()=>{this._element.classList.add(io),this._element.classList.remove(so,no),N.trigger(this._element,Zs)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(no),super.dispose()}isShown(){return this._element.classList.contains(no)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){N.on(this._element,Xs,(t=>this._onInteraction(t,!0))),N.on(this._element,Ys,(t=>this._onInteraction(t,!1))),N.on(this._element,Us,(t=>this._onInteraction(t,!0))),N.on(this._element,Gs,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=ao.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}return R(ao),m(ao),{Alert:Q,Button:Y,Carousel:xt,Collapse:Bt,Dropdown:qi,Modal:On,Offcanvas:qn,Popover:us,ScrollSpy:Es,Tab:Ks,Toast:ao,Tooltip:cs}}));
//# sourceMappingURL=bootstrap.bundle.min.js.map
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ChickenPaint = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChickenPaint;
require("core-js/stable/symbol/index.js");
require("core-js/stable/promise/index.js");
require("core-js/stable/map/index.js");
require("core-js/stable/set/index.js");
require("core-js/stable/typed-array/slice.js");
require("core-js/stable/typed-array/fill.js");
require("core-js/stable/array/iterator.js");
require("core-js/stable/array/fill.js");
require("core-js/stable/string/ends-with.js");
var _jquery = _interopRequireDefault(require("jquery"));
require("../lib/raf.js");
var _CPBrushInfo = _interopRequireDefault(require("./engine/CPBrushInfo.js"));
var _CPArtwork = _interopRequireDefault(require("./engine/CPArtwork.js"));
var _CPResourceLoader = _interopRequireDefault(require("./engine/CPResourceLoader.js"));
var _CPResourceSaver = _interopRequireDefault(require("./engine/CPResourceSaver.js"));
var _CPSplashScreen = _interopRequireDefault(require("./gui/CPSplashScreen.js"));
var _CPMainGUI = _interopRequireDefault(require("./gui/CPMainGUI.js"));
var _CPAboutDialog = _interopRequireDefault(require("./gui/CPAboutDialog.js"));
var _CPConfirmTransformDialog = _interopRequireDefault(require("./gui/CPConfirmTransformDialog.js"));
var _CPShortcutsDialog = _interopRequireDefault(require("./gui/CPShortcutsDialog.js"));
var _CPBoxBlurDialog = _interopRequireDefault(require("./gui/CPBoxBlurDialog.js"));
var _CPTabletDialog = _interopRequireDefault(require("./gui/CPTabletDialog.js"));
var _CPGridDialog = _interopRequireDefault(require("./gui/CPGridDialog.js"));
var _CPSendDialog = _interopRequireDefault(require("./gui/CPSendDialog.js"));
var _CPPolyfill = require("./util/CPPolyfill.js");
var _CPColor = _interopRequireDefault(require("./util/CPColor.js"));
var _CPWacomTablet = _interopRequireDefault(require("./util/CPWacomTablet.js"));
var _CPRect = _interopRequireDefault(require("./util/CPRect.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _lang = require("./languages/lang.js");
var _CPUserPreferences = _interopRequireDefault(require("./gui/CPUserPreferences.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); } /*
                                                                                                                                                                                                                                                                                                                                   ChickenPaint Be
                                                                                                                                                                                                                                                                                                                                   https://github.com/satopian/ChickenPaint_Be
                                                                                                                                                                                                                                                                                                                                   by satopian
                                                                                                                                                                                                                                                                                                                                   Customized from ChickenPaint by Nicholas Sherlock.
                                                                                                                                                                                                                                                                                                                                   GNU GENERAL PUBLIC LICENSE
                                                                                                                                                                                                                                                                                                                                   Version 3, 29 June 2007
                                                                                                                                                                                                                                                                                                                                   <http://www.gnu.org/licenses/>
                                                                                                                                                                                                                                                                                                                               */ /*
                                                                                                                                                                                                                                                                                                                                      ChickenPaint
                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                      ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                                                                                                                                      by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                      ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                      ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                      it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                      the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                      (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                      ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                      but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                      GNU General Public License for more details.
                                                                                                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                                                                      You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                      along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                  */ // core-js Polyfills for the features we use
// import "bootstrap";
/* Check for native pointer event support before PEP adds its polyfill */
if (window.PointerEvent) {
  window.hasNativePointerEvents = true;
}
require("pepjs"); // Needs to use require() instead of import so we can run code before it
function checkBrowserSupport() {
  var supportsAPIs = (0, _CPPolyfill.isCanvasSupported)() && "Uint8Array" in window;
  if (!supportsAPIs) {
    throw new ChickenPaint.UnsupportedBrowserException();
  }

  // iOS 8.0.0 Safari can't upload files
  var isIOS8_0_0 = (navigator.userAgent.indexOf("iPad") != -1 || navigator.userAgent.indexOf("iPod") != -1 || navigator.userAgent.indexOf("iPhone") != -1) && navigator.userAgent.indexOf(" OS 8_0 ") != -1,
    isSafari = navigator.userAgent.indexOf("CriOS") == -1 && navigator.userAgent.indexOf("Safari") != -1;
  if (isIOS8_0_0 && isSafari) {
    throw new ChickenPaint.UnsupportedBrowserException("You are using Safari 8.0.0, which is unable to upload drawings. That bug was fixed in the iOS 8.0.2 update, or in Chrome for iOS.");
  }
  return true;
}
function isSmallScreen() {
  return Boolean(typeof navigator.maxTouchPoints === "number" && navigator.maxTouchPoints > 2 && (window.screen.width <= 820 || window.screen.height <= 820));
}
function createDrawingTools() {
  var tools = new Array(ChickenPaint.T_MAX);
  tools[ChickenPaint.T_PENCIL] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_PENCIL,
    size: 16,
    alpha: 255,
    isAA: true,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AA,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_PAINT,
    paintMode: _CPBrushInfo.default.PAINT_MODE_OPACITY
  });
  tools[ChickenPaint.T_ERASER] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_ERASER,
    size: 16,
    alpha: 255,
    isAA: true,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: false,
    tip: _CPBrushInfo.default.TIP_ROUND_AA,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_ERASE,
    paintMode: _CPBrushInfo.default.PAINT_MODE_OPACITY
  });
  tools[ChickenPaint.T_PEN] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_PEN,
    size: 2,
    alpha: 128,
    isAA: true,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: true,
    pressureAlpha: false,
    tip: _CPBrushInfo.default.TIP_ROUND_AA,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_PAINT,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 2
  });
  tools[ChickenPaint.T_SOFTERASER] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_SOFTERASER,
    size: 16,
    alpha: 64,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_ERASE,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8
  });
  tools[ChickenPaint.T_AIRBRUSH] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_AIRBRUSH,
    size: 50,
    alpha: 32,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_PAINT,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8
  });
  tools[ChickenPaint.T_DODGE] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_DODGE,
    size: 30,
    alpha: 32,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_DODGE,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8
  });
  tools[ChickenPaint.T_BURN] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_BURN,
    size: 30,
    alpha: 32,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_BURN,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8
  });
  tools[ChickenPaint.T_WATER] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_WATER,
    size: 30,
    alpha: 70,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.02,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AA,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_WATER,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8,
    resat: 0.3,
    bleed: 0.6
  });
  tools[ChickenPaint.T_BLUR] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_BLUR,
    size: 20,
    alpha: 255,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.05,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_PIXEL,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_BLUR,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8
  });
  tools[ChickenPaint.T_SMUDGE] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_SMUDGE,
    size: 20,
    alpha: 128,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.01,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_SMUDGE,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8,
    resat: 0.0,
    bleed: 1.0
  });
  tools[ChickenPaint.T_BLENDER] = new _CPBrushInfo.default({
    toolNb: ChickenPaint.T_BLENDER,
    size: 20,
    alpha: 60,
    isAA: false,
    minSpacing: 0.5,
    spacing: 0.1,
    pressureSize: false,
    pressureAlpha: true,
    tip: _CPBrushInfo.default.TIP_ROUND_AIRBRUSH,
    brushMode: _CPBrushInfo.default.BRUSH_MODE_OIL,
    paintMode: _CPBrushInfo.default.PAINT_MODE_FLOW,
    alphaScale: 1 / 8,
    resat: 0.0,
    bleed: 0.07
  });
  return tools;
}

/**
 * @typedef {Object} ChickenPaintOptions
 *
 * @property {Element} uiElem   - DOM element to insert ChickenPaint into
 *
 * @property {Function} [onLoaded] - Callback to call when artwork loading completes
 *
 * @property {int} [canvasWidth]  - Width in pixels to use when creating blank canvases (defaults to 800)
 * @property {int} [canvasHeight] - Height in pixels to use when creating blank canvases (defaults to 600)
 * @property {int} [rotation]     - Integer from [0..3], number of 90 degree right rotations that should be applied to
 *                                the canvas after loading
 *
 * @property {string} [saveUrl]   - URL to POST the drawing to to save it
 * @property {string} [postUrl]   - URL to navigate to after saving is successful and the user chooses to see/publish
 *                                their finished product
 * @property {string} [exitUrl]   - URL to navigate to after saving is successful and the user chooses to exit (optional)
 * @property {string} [testUrl]   - URL that ChickenPaint can simulate a drawing upload to to test the user's
 *                                permissions/connection (optional)
 *
 * @property {string} [loadImageUrl]     - URL of PNG/JPEG image to load for editing (optional)
 * @property {string} [loadChibiFileUrl] - URL of .chi file to load for editing (optional). Used in preference to loadImage.
 * @property {string} [loadSwatchesUrl]  - URL of an .aco palette to load (optional)
 * @property {CPArtwork} [artwork]       - Artwork to load into ChickenPaint (if you've already created one)
 *
 * @property {boolean} [allowMultipleSends] - Allow the drawing to be sent to the server multiple times (saving does not
 *                                          immediately end drawing session).
 * @property {boolean} [allowDownload]      - Allow the drawing to be saved to the user's computer
 *
 * @property {"allow"|"auto"|"force"|"disable"} [fullScreenMode] - Control the behaviour of the full screen option:
 *                                              allow - Don't automatically enter full screen mode, but allow it to be
 *                                                      chosen manually (default)
 *                                              auto - Automatically enter full screen mode on startup on small screens
 *                                              force - Enter full screen mode at startup and do not provide option to leave
 *                                              disable - Don't allow full screen mode at all
 *
 * @property {boolean} [disableBootstrapAPI] - Disable Bootstrap's data API on the root of the document. This speeds up
 *                                           things considerably.
 *
 * @property {string} resourcesRoot - URL to the directory that contains the gfx/css etc directories (relative to the
 *                                    page that ChickenPaint is loaded on)
 *                                    
 * @property {string} [language] - Provide an explicit ISO language code here (e.g. "ja_JP") to override the guessed browser language
 *                               Unsupported languages will fall back to English.
 *                               Currently only "en" and "ja" are available.
 */

/**
 * Creates an instance of the ChickenPaint drawing app with the specified options.
 *
 * @param {ChickenPaintOptions} options
 *
 * @throws ChickenPaint.UnsupportedBrowserException if the web browser does not support ChickenPaint
 */
function ChickenPaint(options) {
  var _this = this;
  (0, _lang.guessLanguage)();
  if (options.language) {
    (0, _lang.setLanguage)(options.language);
  }
  var uiElem = options.uiElem;

  //ブラウザデフォルトのキー操作をキャンセル
  document.addEventListener("keydown", function (e) {
    var keys = ["+", ";", "=", "-", "s", "h", "r", "o"];
    if ((e.ctrlKey || e.metaKey) && keys.includes(e.key.toLowerCase()) || e.key === "Enter") {
      // console.log("e.key",e.key);
      e.preventDefault();
    }
  });
  //長押しでコンテキストメニューを開かない
  uiElem.addEventListener('contextmenu', function (e) {
    e.preventDefault();
    e.stopPropagation();
  }, {
    passive: false
  });
  var that = this,
    /**
        * @type {CPCanvas}
        */
    canvas,
    /**
        * @type {CPMainGUI}
        */
    mainGUI,
    /**
        *
        * @type {CPColor}
        */
    curColor = new _CPColor.default(0),
    curMaskColor = 0xFF,
    colorMode = ChickenPaint.COLOR_MODE_RGB,
    curBrush = ChickenPaint.T_PENCIL,
    curMode = ChickenPaint.M_DRAW,
    preTransformMode = curMode,
    curGradient = [0xFF000000, 0xFFFFFFFF],
    smallScreenMode = false,
    isFullScreen = false,
    tools = createDrawingTools(),
    preferences = new _CPUserPreferences.default(),
    boxBlurDialog,
    gridDialog,
    actions = {
      // GUI actions

      CPFullScreen: {
        action: function action() {
          that.setFullScreen(!isFullScreen);
        },
        isSupported: function isSupported() {
          return !(options.fullScreenMode === "disable" || options.fullScreenMode === "force" || options.allowFullScreen === false /* For backwards compat */);
        },

        modifies: {
          gui: true
        }
      },
      CPZoomIn: {
        action: function action() {
          canvas.zoomIn();
        },
        modifies: {
          gui: true
        }
      },
      CPZoomOut: {
        action: function action() {
          canvas.zoomOut();
        },
        modifies: {
          gui: true
        }
      },
      CPZoom100: {
        action: function action() {
          canvas.zoom100();
        },
        modifies: {
          gui: true
        }
      },
      CPToolbarStyle: {
        action: function action() {
          that.setToolbarStyle(preferences.toolbarStyle === "new" ? "old" : "new");
        },
        modifies: {
          gui: true
        }
      },
      // History actions

      CPUndo: {
        action: function action() {
          that.artwork.undo();
        },
        modifies: {
          document: true
        },
        allowed: "isUndoAllowed"
      },
      CPRedo: {
        action: function action() {
          that.artwork.redo();
        },
        modifies: {
          document: true
        },
        allowed: "isRedoAllowed"
      },
      CPClearHistory: {
        action: function action() {
          if (confirm((0, _lang._)("You're about to clear the current Undo/Redo history.\nThis operation cannot be undone, are you sure you want to do that?"))) {
            that.artwork.clearHistory();
          }
        },
        modifies: {
          document: true
        }
      },
      // Drawing tools

      CPPencil: new ToolChangeAction(ChickenPaint.T_PENCIL),
      CPPen: new ToolChangeAction(ChickenPaint.T_PEN),
      CPEraser: new ToolChangeAction(ChickenPaint.T_ERASER),
      CPSoftEraser: new ToolChangeAction(ChickenPaint.T_SOFTERASER),
      CPAirbrush: new ToolChangeAction(ChickenPaint.T_AIRBRUSH),
      CPDodge: new ToolChangeAction(ChickenPaint.T_DODGE),
      CPBurn: new ToolChangeAction(ChickenPaint.T_BURN),
      CPWater: new ToolChangeAction(ChickenPaint.T_WATER),
      CPBlur: new ToolChangeAction(ChickenPaint.T_BLUR),
      CPSmudge: new ToolChangeAction(ChickenPaint.T_SMUDGE),
      CPBlender: new ToolChangeAction(ChickenPaint.T_BLENDER),
      // Modes

      CPFloodFill: new ModeChangeAction(ChickenPaint.M_FLOODFILL),
      CPGradientFill: new ModeChangeAction(ChickenPaint.M_GRADIENTFILL),
      CPRectSelection: new ModeChangeAction(ChickenPaint.M_RECT_SELECTION),
      CPMoveTool: new ModeChangeAction(ChickenPaint.M_MOVE_TOOL),
      CPRotateCanvas: new ModeChangeAction(ChickenPaint.M_ROTATE_CANVAS),
      CPPanCanvas: new ModeChangeAction(ChickenPaint.M_PAN_CANVAS),
      CPColorPicker: new ModeChangeAction(ChickenPaint.M_COLOR_PICKER),
      // Layer transform

      CPTransform: {
        action: function action() {
          var layer = that.artwork.getActiveLayer();
          if (that.artwork.transformAffineBegin() == null) {
            that.showLayerNotification(layer, (0, _lang._)("Whoops! All of the selected pixels are transparent!"), "layer");
          } else {
            setMode(ChickenPaint.M_TRANSFORM);
          }
        },
        modifies: {
          mode: true
        },
        allowed: function allowed() {
          var layer = that.artwork.getActiveLayer();
          if (!layer.visible) {
            //非表示レイヤーを変形しようとした時にエラーメッセージを出す
            that.showLayerNotification(layer, (0, _lang._)("Whoops! This layer is currently hidden"), "layer");
          } else if (layer.alpha == 0) {
            that.showLayerNotification(layer, (0, _lang._)("Whoops! This layer's opacity is currently 0%"), "opacity");
          } else if (that.artwork.transformAffineBegin() == null) {
            that.showLayerNotification(layer, (0, _lang._)("Whoops! All of the selected pixels are transparent!"), "layer");
          } else {
            return layer.getEffectiveAlpha() != 0;
          }
        }
      },
      CPTransformAccept: {
        action: function action() {
          if (curMode == ChickenPaint.M_TRANSFORM) {
            that.artwork.transformAffineFinish();
            setMode(preTransformMode);
          }
        },
        modifies: {
          mode: true
        }
      },
      CPTransformReject: {
        action: function action() {
          if (curMode == ChickenPaint.M_TRANSFORM) {
            that.artwork.transformAffineAbort();
            setMode(preTransformMode);
          }
        },
        modifies: {
          document: true,
          mode: true
        }
      },
      // Stroke modes

      CPFreeHand: {
        action: function action() {
          tools[curBrush].strokeMode = _CPBrushInfo.default.STROKE_MODE_FREEHAND;
          callToolListeners();
        },
        modifies: {
          tool: true
        }
      },
      CPLine: {
        action: function action() {
          tools[curBrush].strokeMode = _CPBrushInfo.default.STROKE_MODE_LINE;
          callToolListeners();
        },
        modifies: {
          tool: true
        }
      },
      CPBezier: {
        action: function action() {
          tools[curBrush].strokeMode = _CPBrushInfo.default.STROKE_MODE_BEZIER;
          callToolListeners();
        },
        modifies: {
          tool: true
        }
      },
      // Help dialogs

      CPAbout: {
        action: function action() {
          new _CPAboutDialog.default(uiElem).show();
        },
        modifies: {}
      },
      CPShortcuts: {
        action: function action() {
          new _CPShortcutsDialog.default(uiElem).show();
        },
        modifies: {}
      },
      CPTabletSupport: {
        action: function action() {
          new _CPTabletDialog.default(uiElem).show();
        },
        modifies: {}
      },
      // Layer actions

      CPLayerDuplicate: {
        action: function action() {
          that.artwork.duplicateLayer();
        },
        modifies: {
          document: true
        }
      },
      CPLayerMergeDown: {
        action: function action() {
          that.artwork.mergeDown();
        },
        modifies: {
          document: true
        },
        allowed: "isMergeDownAllowed"
      },
      CPGroupMerge: {
        action: function action() {
          that.artwork.mergeGroup();
        },
        modifies: {
          document: true
        },
        allowed: "isMergeGroupAllowed"
      },
      CPLayerMergeAll: {
        action: function action() {
          that.artwork.mergeAllLayers();
        },
        modifies: {
          document: true
        },
        allowed: "isMergeAllLayersAllowed"
      },
      CPExpandLayerGroup: {
        action: function action(e) {
          that.artwork.expandLayerGroup(e.group, e.expand);
        },
        modifies: {
          document: true
        }
      },
      CPFill: {
        action: function action() {
          that.artwork.fill(that.getCurColor().getRgb() | 0xff000000);
        },
        modifies: {
          document: true
        },
        requiresDrawable: true
      },
      CPClear: {
        action: function action() {
          that.artwork.clear();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true
      },
      CPSelectAll: {
        action: function action() {
          that.artwork.rectangleSelection(that.artwork.getBounds());
          canvas.repaintAll();
        },
        modifies: {
          document: true
        }
      },
      CPDeselectAll: {
        action: function action() {
          that.artwork.rectangleSelection(new _CPRect.default(0, 0, 0, 0));
          canvas.repaintAll();
        },
        modifies: {
          document: true
        }
      },
      CPHFlip: {
        action: function action() {
          that.artwork.hFlip();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true // TODO
      },

      CPVFlip: {
        action: function action() {
          that.artwork.vFlip();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true //TODO
      },

      CPMNoise: {
        action: function action() {
          that.artwork.monochromaticNoise();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true
      },
      CPCNoise: {
        action: function action() {
          that.artwork.colorNoise();
        },
        modifies: {
          document: true
        },
        allowed: "isColorNoiseAllowed"
      },
      CPFXBoxBlur: {
        action: function action() {
          showBoxBlurDialog();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true
      },
      CPFXInvert: {
        action: function action() {
          that.artwork.invert();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true
      },
      CPCut: {
        action: function action() {
          that.artwork.cutSelection();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true,
        allowed: "isCutSelectionAllowed"
      },
      CPCopy: {
        action: function action() {
          that.artwork.copySelection();
        },
        modifies: {
          document: true
        },
        requiresDrawable: true,
        allowed: "isCopySelectionAllowed"
      },
      CPCopyMerged: {
        action: function action() {
          that.artwork.copySelectionMerged();
        },
        modifies: {
          document: true
        },
        allowed: "isCopySelectionMergedAllowed"
      },
      CPPaste: {
        action: function action() {
          that.artwork.pasteClipboard();
        },
        modifies: {
          document: true
        },
        allowed: "isPasteClipboardAllowed"
      },
      CPToggleGrid: {
        action: function action(e) {
          canvas.showGrid(e.selected);
        },
        modifies: {
          gui: true
        }
      },
      CPGridOptions: {
        action: function action() {
          showGridOptionsDialog();
        },
        modifies: {
          gui: true
        }
      },
      CPLinearInterpolation: {
        action: function action(e) {
          canvas.setInterpolation(e.selected);
        },
        modifies: {
          gui: true
        },
        isSupported: function isSupported() {
          return (0, _CPPolyfill.isCanvasInterpolationSupported)();
        }
      },
      CPResetCanvasRotation: {
        action: function action() {
          canvas.resetRotation();
        },
        modifies: {
          gui: true
        }
      },
      // Layer palette

      CPAddLayer: {
        action: function action() {
          that.artwork.addLayer("layer");
        },
        modifies: {
          document: true
        }
      },
      CPAddGroup: {
        action: function action() {
          that.artwork.addLayer("group");
        },
        modifies: {
          document: true
        }
      },
      CPAddLayerMask: {
        action: function action() {
          that.artwork.addLayerMask();
        },
        modifies: {
          document: true
        },
        allowed: "isAddLayerMaskAllowed"
      },
      CPApplyLayerMask: {
        action: function action() {
          that.artwork.applyLayerMask(true);
        },
        modifies: {
          document: true
        },
        allowed: "isApplyLayerMaskAllowed"
      },
      CPRemoveLayerMask: {
        action: function action() {
          that.artwork.removeLayerMask(false);
        },
        modifies: {
          document: true
        },
        allowed: "isRemoveLayerMaskAllowed"
      },
      CPRemoveLayer: {
        action: function action() {
          if (!that.artwork.removeLayer()) {
            alert((0, _lang._)("Sorry, you can't remove the last remaining layer in the drawing."));
          }
        },
        modifies: {
          document: true
        },
        allowed: "isRemoveLayerAllowed"
      },
      CPCreateClippingMask: {
        action: function action() {
          that.artwork.createClippingMask();
        },
        modifies: {
          document: true
        },
        allowed: "isCreateClippingMaskAllowed"
      },
      CPReleaseClippingMask: {
        action: function action() {
          that.artwork.releaseClippingMask();
        },
        modifies: {
          document: true
        },
        allowed: "isReleaseClippingMaskAllowed"
      },
      CPRelocateLayer: {
        action: function action(e) {
          that.artwork.relocateLayer(e.layer, e.toGroup, e.toIndex);
        },
        modifies: {
          document: true
        }
      },
      CPSetActiveLayer: {
        action: function action(e) {
          // Enable disabled layer masks when clicked on
          if (e.mask && e.layer.mask && !e.layer.maskVisible) {
            that.artwork.setLayerMaskVisible(e.layer, true);
          }
          that.artwork.setActiveLayer(e.layer, e.mask);

          // Since this is a slow GUI operation, this is a good chance to get the canvas ready for drawing
          that.artwork.performIdleTasks();
        },
        modifies: {
          document: true
        }
      },
      CPToggleMaskView: {
        action: function action() {
          var newView = that.artwork.toggleMaskView();
          if (newView) {
            that.emitEvent("maskViewOpened", [newView]);
          }
        },
        modifies: {
          gui: true
        }
      },
      CPSetMaskVisible: {
        action: function action(e) {
          that.artwork.setLayerMaskVisible(e.layer, e.visible);
        },
        modifies: {
          layerProp: true
        }
      },
      CPSetLayerVisibility: {
        action: function action(e) {
          that.artwork.setLayerVisibility(e.layer, e.visible);
        },
        modifies: {
          layerProp: true
        }
      },
      CPSetLayerName: {
        action: function action(e) {
          that.artwork.setLayerName(e.layer, e.name);
        },
        modifies: {
          layerProp: true
        }
      },
      CPSetLayerBlendMode: {
        action: function action(e) {
          that.artwork.setLayerBlendMode(e.blendMode);
        },
        modifies: {
          layerProp: true
        }
      },
      CPSetLayerAlpha: {
        action: function action(e) {
          that.artwork.setLayerAlpha(e.alpha);
        },
        modifies: {
          layerProp: true
        }
      },
      CPSetLayerLockAlpha: {
        action: function action(e) {
          that.artwork.setLayerLockAlpha(e.lock);
        },
        modifies: {
          layerProp: true
        }
      },
      // Palettes

      CPPalColor: new PaletteToggleAction("color"),
      CPPalBrush: new PaletteToggleAction("brush"),
      CPPalLayers: new PaletteToggleAction("layers"),
      CPPalStroke: new PaletteToggleAction("stroke"),
      CPPalSwatches: new PaletteToggleAction("swatches"),
      CPPalTool: new PaletteToggleAction("tool"),
      CPPalMisc: new PaletteToggleAction("misc"),
      CPPalTextures: new PaletteToggleAction("textures"),
      CPTogglePalettes: {
        action: function action() {
          mainGUI.togglePalettes();
        },
        modifies: {
          gui: true
        }
      },
      CPArrangePalettes: {
        action: function action() {
          mainGUI.arrangePalettes();
        },
        modifies: {
          gui: true
        }
      },
      // Saving

      CPSave: {
        action: function action() {
          saveDrawing();
        },
        isSupported: function isSupported() {
          return options.allowDownload !== false;
        },
        modifies: {
          document: true
        }
      },
      CPSend: {
        action: function action() {
          sendDrawing();
        },
        isSupported: function isSupported() {
          return !!options.saveUrl;
        },
        modifies: {
          document: true
        }
      },
      CPPost: {
        action: function action() {
          //画面移動の関数が定義されている時はユーザーが定義した関数で画面移動
          if (typeof handleExit === 'function') {
            return handleExit();
          }
          window.location = options.postUrl;
        },
        isSupported: function isSupported() {
          return !!options.postUrl;
        },
        modifies: {
          document: true
        }
      },
      CPContinue: {
        action: function action() {},
        isSupported: function isSupported() {
          return !!options.allowMultipleSends;
        }
      },
      CPExit: {
        action: function action() {
          // Exit the drawing session without posting the drawing to the forum
          window.location = options.exitUrl;
        },
        isSupported: function isSupported() {
          return !!options.exitUrl;
        },
        modifies: {}
      }
    };
  function PaletteToggleAction(palName) {
    this.palName = palName;
  }
  PaletteToggleAction.prototype.action = function (e) {
    mainGUI.showPalette(this.palName, e.selected);
  };
  PaletteToggleAction.prototype.modifies = {
    gui: true
  };
  function ToolChangeAction(toolNum) {
    this.toolNum = toolNum;
  }
  ToolChangeAction.prototype.action = function () {
    setTool(this.toolNum);
  };
  ToolChangeAction.prototype.modifies = {
    mode: true,
    tool: true
  };
  ToolChangeAction.prototype.requiresDrawable = true;
  function ModeChangeAction(modeNum) {
    this.modeNum = modeNum;
  }
  ModeChangeAction.prototype.action = function () {
    setMode(this.modeNum);
  };
  ModeChangeAction.prototype.modifies = {
    mode: true
  };
  function onEditModeChanged(newMode) {
    colorMode = newMode == _CPArtwork.default.EDITING_MODE_IMAGE ? ChickenPaint.COLOR_MODE_RGB : ChickenPaint.COLOR_MODE_GREYSCALE;
    that.emitEvent("colorModeChange", [newMode == _CPArtwork.default.EDITING_MODE_IMAGE ? "rgb" : "greyscale"]);
    var newColor;
    switch (colorMode) {
      case ChickenPaint.COLOR_MODE_RGB:
        newColor = curColor.clone();
        break;
      case ChickenPaint.COLOR_MODE_GREYSCALE:
        newColor = new _CPColor.default(_CPColor.default.greyToRGB(curMaskColor));
        break;
    }
    that.artwork.setForegroundColor(newColor.getRgb());
    that.emitEvent('colorChange', [newColor]);
  }
  function showBoxBlurDialog() {
    if (!boxBlurDialog) {
      boxBlurDialog = new _CPBoxBlurDialog.default(uiElem, that);
    }
    boxBlurDialog.show();
  }
  function showGridOptionsDialog() {
    if (!gridDialog) {
      gridDialog = new _CPGridDialog.default(uiElem, canvas);
    }
    gridDialog.show();
  }
  function callToolListeners() {
    that.emitEvent('toolChange', [curBrush, tools[curBrush]]);
  }

  // TODO make me private
  this.callToolListeners = function () {
    callToolListeners();
  };
  function callModeListeners() {
    that.emitEvent('modeChange', [curMode]);
  }

  /**
      * @returns {CPArtwork}
      */
  this.getArtwork = function () {
    return this.artwork;
  };
  this.setCanvas = function (_canvas) {
    canvas = _canvas;
  };

  /**
      * Change the interpolation mode used by Free Transform operations
      * 
      * @param {string} interpolation - Either "sharp" or "smooth"
      */
  this.setTransformInterpolation = function (interpolation) {
    this.artwork.setTransformInterpolation(interpolation);
  };

  /**
      *
      * @param {CPColor} color
      */
  this.setCurColor = function (color) {
    switch (colorMode) {
      case ChickenPaint.COLOR_MODE_RGB:
        if (!curColor.isEqual(color)) {
          curColor.copyFrom(color);
          this.artwork.setForegroundColor(color.getRgb());
          this.emitEvent('colorChange', [color]);
        }
        break;
      case ChickenPaint.COLOR_MODE_GREYSCALE:
        var grey = color.getValue();
        if (curMaskColor != grey) {
          var greyRGB = _CPColor.default.greyToRGB(grey);
          this.artwork.setForegroundColor(greyRGB);
          curMaskColor = grey;
          this.emitEvent('colorChange', [new _CPColor.default(greyRGB)]);
        }
        break;
    }
  };

  /**
      * @returns {CPColor}
      */
  this.getCurColor = function () {
    switch (colorMode) {
      case ChickenPaint.COLOR_MODE_RGB:
        return curColor.clone();
      case ChickenPaint.COLOR_MODE_GREYSCALE:
        return new _CPColor.default(_CPColor.default.greyToRGB(curMaskColor));
    }
  };
  this.setCurGradient = function (gradient) {
    curGradient = gradient.slice(0); // Clone

    this.emitEvent('gradientChange', [curGradient]);
  };
  this.getCurGradient = function () {
    return curGradient.slice(0); // Clone
  };

  this.setBrushSize = function (size) {
    tools[curBrush].size = Math.max(1, Math.min(200, size));
    callToolListeners();
  };
  this.getBrushSize = function () {
    return tools[curBrush].size;
  };
  this.setAlpha = function (alpha) {
    tools[curBrush].alpha = alpha;
    callToolListeners();
  };
  this.getAlpha = function () {
    return tools[curBrush].alpha;
  };
  this.getCurMode = function () {
    return curMode;
  };
  function setMode(newMode) {
    if (curMode != newMode) {
      if (newMode == ChickenPaint.M_TRANSFORM) {
        preTransformMode = curMode;
      }
      curMode = newMode;
      callModeListeners();
    }
  }
  this.getCurTool = function () {
    return curBrush;
  };
  function setTool(tool) {
    setMode(ChickenPaint.M_DRAW);
    curBrush = tool;
    that.artwork.setBrush(tools[tool]);
    callToolListeners();
  }
  this.getBrushInfo = function () {
    return tools[curBrush];
  };
  function saveDrawing() {
    var saver = new _CPResourceSaver.default({
      artwork: that.getArtwork(),
      rotation: canvas.getRotation90(),
      swatches: mainGUI.getSwatches()
    });
    saver.on("savingComplete", function () {
      that.artwork.setHasUnsavedChanges(false);
    });
    saver.on("savingFailure", function () {
      alert((0, _lang._)("Sorry, your drawing could not be saved, please try again later."));
    });
    saver.save();
  }
  function sendDrawing() {
    if (!that.isActionSupported("CPContinue") && !confirm((0, _lang._)('Are you sure you want to send your drawing to the server and finish drawing now?'))) {
      return;
    }
    var saver = new _CPResourceSaver.default({
        artwork: that.getArtwork(),
        rotation: canvas.getRotation90(),
        swatches: mainGUI.getSwatches(),
        url: options.saveUrl
      }),
      sendDialog = new _CPSendDialog.default(that, uiElem, saver);
    saver.on("savingComplete", function () {
      that.artwork.setHasUnsavedChanges(false);

      // If we're not allowed to keep editing, we can only go straight to viewing the new post
      if (!that.isActionSupported("CPContinue") && that.isActionSupported("CPPost")) {
        that.actionPerformed({
          action: "CPPost"
        });
      }
    });
    saver.on("savingFailure", function () {
      alert((0, _lang._)("Sorry, your drawing could not be saved, please try again later."));
    });

    // Allow the dialog to show before we begin serialization
    sendDialog.on("shown", function () {
      saver.save();
    });
    sendDialog.show();
  }

  /**
   * Not all saving actions will be supported (depending on what options we're configured with). Use this function
   * to check for support for a given action.
   *
   * @param {string} actionName
   * @returns {boolean}
   */
  this.isActionSupported = function (actionName) {
    if (actions[actionName]) {
      var supportedType = _typeof(actions[actionName].isSupported);
      if (supportedType == "function") {
        return actions[actionName].isSupported();
      } else if (supportedType == "undefined") {
        // If not otherwise specified, an action defaults to supported
        return true;
      } else {
        return actions[actionName].isSupported;
      }
    }
    return false;
  };

  /**
      * Check if a given action is allowed at the moment (e.g. in the current mode and with the current layer selected).
      *
      * @param actionName
      */
  this.isActionAllowed = function (actionName) {
    var action = actions[actionName];
    if (!action) {
      return false;
    } else if (typeof action.allowed == "function") {
      return action.allowed();
    } else if (typeof action.allowed == "string") {
      return this.artwork[action.allowed]();
    } else {
      return !action.requiresDrawable || this.artwork.isActiveLayerDrawable();
    }
  };
  this.showLayerNotification = function (layer, message, where) {
    this.emitEvent("layerNotification", [layer, message, where]);
  };
  this.actionPerformed = function (e) {
    if (this.artwork == null || canvas == null) {
      return; // this shouldn't happen, but just in case
    }

    var action = actions[e.action];
    if (action) {
      if (curMode == ChickenPaint.M_TRANSFORM && (action.modifies.document || action.modifies.mode) && ["CPTransformAccept", "CPTransformReject"].indexOf(e.action) == -1) {
        if (e.action == "CPUndo") {
          actions.CPTransformReject.action();
        } else if (e.action == "CPTransform") {
          // You're already transforming the selection!
        } else {
          // Prompt the user to finish their transform before starting something else
          var dialog = new _CPConfirmTransformDialog.default(uiElem, this);

          /* If they decide to finish up with the transform, we can apply the original action they
           * attempted afterwards.
           */
          dialog.on("accept", this.actionPerformed.bind(this, e));
          dialog.on("reject", this.actionPerformed.bind(this, e));
          dialog.show();
        }
      } else {
        action.action(e);
      }
    }

    // callCPEventListeners(); TODO
  };

  this.setSmallScreenMode = function (small) {
    if (smallScreenMode !== small) {
      smallScreenMode = small;
      (0, _jquery.default)(uiElem).toggleClass("chickenpaint-small-screen", smallScreenMode);
      that.emitEvent("smallScreen", [smallScreenMode]);
    }
  };
  this.getSmallScreenMode = function () {
    return smallScreenMode;
  };
  this.setFullScreen = function (newVal) {
    if (isFullScreen !== newVal) {
      isFullScreen = newVal;
      (0, _jquery.default)("body").toggleClass("chickenpaint-full-screen", isFullScreen);
      (0, _jquery.default)(uiElem).toggleClass("chickenpaint-full-screen", isFullScreen);
      if (isFullScreen && (0, _jquery.default)("head meta[name=viewport]").length === 0) {
        // Reset page zoom to zero if the host page didn't already set a viewport
        (0, _jquery.default)("head").append('<meta name="viewport" content="width=device-width,user-scalable=no">');

        // Give the browser time to adjust the viewport before we adapt to the new size
        setTimeout(function () {
          return that.emitEvent("fullScreen", [isFullScreen]);
        }, 200);
      } else {
        that.emitEvent("fullScreen", [isFullScreen]);
      }
    }
  };
  this.isFullScreen = function () {
    return isFullScreen;
  };
  this.setToolbarStyle = function (styleName) {
    preferences.set("toolbarStyle", styleName);
    preferences.save(); // Eager save, so we don't lose it upon a crash
  };

  this.getToolbarStyle = function () {
    return preferences.get("toolbarStyle");
  };
  function installUnsavedWarning() {
    if ((0, _CPPolyfill.isEventSupported)("onbeforeunload")) {
      window.addEventListener("beforeunload", function (e) {
        if (that.artwork.getHasUnsavedChanges()) {
          var confirmMessage = "Your drawing has unsaved changes!";
          e.preventDefault();
          return confirmMessage;
        }
      });
    } else {
      // Fall back to just catching links
      (0, _jquery.default)("a").on('click', function (e) {
        if (this.getAttribute("href") != "#" && that.artwork.getHasUnsavedChanges()) {
          return confirm("Your drawing has unsaved changes! Are you sure to want to navigate away?");
        }
      });
    }
  }
  function startMainGUI(swatches, initialRotation90) {
    if (!uiElem) {
      return;
    }

    // Prevent double-click iOS page zoom events
    uiElem.addEventListener("dblclick", function (e) {
      e.preventDefault();
      e.stopPropagation();
    });
    that.artwork.on("editModeChanged", onEditModeChanged);
    mainGUI = new _CPMainGUI.default(that, uiElem);
    that.emitEvent("fullScreen", [isFullScreen]);
    that.emitEvent("smallScreen", [smallScreenMode]);
    preferences.load();
    setTool(ChickenPaint.T_PEN);
    mainGUI.arrangePalettes();
    if (swatches) {
      mainGUI.setSwatches(swatches);
    }
    if (initialRotation90) {
      mainGUI.setRotation90(initialRotation90);
    }
    _CPWacomTablet.default.getRef().detectTablet();
    installUnsavedWarning();
    that.artwork.on("unsavedChanges", function (unsavedChanges) {
      // Only bug users to save if they can actually save multiple times per session.
      // Otherwise they'll save when they're done with their drawing and not before:
      if (options.allowMultipleSends) {
        that.emitEvent("unsavedChanges", [unsavedChanges]);
      }
    });
  }
  this.getResourcesRoot = function () {
    return options.resourcesRoot;
  };
  checkBrowserSupport();
  if (uiElem) {
    if (!(0, _CPPolyfill.isFlexboxSupported)()) {
      uiElem.className += " no-flexbox";
    }
    uiElem.className += " chickenpaint chickenpaint-lang-" + (0, _lang.currentLanguage)();
  }
  options.resourcesRoot = options.resourcesRoot || "chickenpaint/";
  if (options.disableBootstrapAPI) {
    (0, _jquery.default)(document).off('.data-api');
  }
  this.setSmallScreenMode(isSmallScreen());
  switch (options.fullScreenMode) {
    case "force":
      this.setFullScreen(true);
      break;
    case "auto":
      this.setFullScreen(smallScreenMode);
      break;
  }
  preferences.on("toolbarStyle", function (newStyle) {
    return _this.emitEvent("toolbarStyleChange", [newStyle]);
  });
  if (options.loadImageUrl || options.loadChibiFileUrl) {
    var loader = new _CPResourceLoader.default(options);
    new _CPSplashScreen.default(uiElem, loader, options.resourcesRoot);
    loader.on("loadingComplete", function (resources) {
      that.artwork = resources.layers || resources.flat;
      startMainGUI(resources.swatches, options.rotation);
      if (options.onLoaded) {
        options.onLoaded(this);
      }
    });
    loader.load();
  } else {
    if (options.artwork) {
      this.artwork = options.artwork;
    } else {
      this.artwork = new _CPArtwork.default(options.canvasWidth || 800, options.canvasHeight || 600);
      this.artwork.addBackgroundLayer();
      //起動時に透明なレイヤーを1枚追加
      this.artwork.addDefaultLayer();
    }
    startMainGUI();
    if (options.onLoaded) {
      options.onLoaded(this);
    }
  }
}
//Parcelでビルドする時はChickenPaintをGlobalオブジェクトに設定
// window.ChickenPaint = ChickenPaint;

ChickenPaint.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
ChickenPaint.prototype.constructor = ChickenPaint;
ChickenPaint.UnsupportedBrowserException = function (message) {
  this.message = message;
};
ChickenPaint.UnsupportedBrowserException.prototype.toString = function () {
  var msg = "Sorry, your web browser does not support ChickenPaint.";
  if (this.message) {
    msg += " " + this.message;
  } else {
    msg += " Please try a modern browser like Chrome, Safari, Firefox, or Edge.";
  }
  return msg;
};

//
// Definition of all the modes available
//

ChickenPaint.M_DRAW = 0;
ChickenPaint.M_FLOODFILL = 1;
ChickenPaint.M_RECT_SELECTION = 2;
ChickenPaint.M_MOVE_TOOL = 3;
ChickenPaint.M_ROTATE_CANVAS = 4;
ChickenPaint.M_COLOR_PICKER = 5;
ChickenPaint.M_GRADIENTFILL = 6;
ChickenPaint.M_TRANSFORM = 7;
ChickenPaint.M_PAN_CANVAS = 8;

//
// Definition of all the standard tools available
//
ChickenPaint.T_PENCIL = 0;
ChickenPaint.T_ERASER = 1;
ChickenPaint.T_PEN = 2;
ChickenPaint.T_SOFTERASER = 3;
ChickenPaint.T_AIRBRUSH = 4;
ChickenPaint.T_DODGE = 5;
ChickenPaint.T_BURN = 6;
ChickenPaint.T_WATER = 7;
ChickenPaint.T_BLUR = 8;
ChickenPaint.T_SMUDGE = 9;
ChickenPaint.T_BLENDER = 10;
ChickenPaint.T_MAX = 11;
ChickenPaint.COLOR_MODE_RGB = 0;
ChickenPaint.COLOR_MODE_GREYSCALE = 1;
module.exports = exports.default;

},{"../lib/raf.js":69,"./engine/CPArtwork.js":3,"./engine/CPBrushInfo.js":8,"./engine/CPResourceLoader.js":20,"./engine/CPResourceSaver.js":21,"./gui/CPAboutDialog.js":23,"./gui/CPBoxBlurDialog.js":24,"./gui/CPConfirmTransformDialog.js":32,"./gui/CPGridDialog.js":34,"./gui/CPMainGUI.js":36,"./gui/CPSendDialog.js":42,"./gui/CPShortcutsDialog.js":43,"./gui/CPSplashScreen.js":45,"./gui/CPTabletDialog.js":48,"./gui/CPUserPreferences.js":51,"./languages/lang.js":54,"./util/CPColor.js":58,"./util/CPPolyfill.js":60,"./util/CPRect.js":63,"./util/CPWacomTablet.js":66,"core-js/stable/array/fill.js":286,"core-js/stable/array/iterator.js":287,"core-js/stable/map/index.js":288,"core-js/stable/promise/index.js":289,"core-js/stable/set/index.js":290,"core-js/stable/string/ends-with.js":291,"core-js/stable/symbol/index.js":292,"core-js/stable/typed-array/fill.js":293,"core-js/stable/typed-array/slice.js":294,"jquery":296,"pepjs":313,"wolfy87-eventemitter":314}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCanvas = createCanvas;
exports.createImageData = createImageData;
/*
	ChickenPaint
	
	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.
	
	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
	
	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function createCanvas(width, height) {
  var canvas = document.createElement("canvas");
  canvas.width = width;
  canvas.height = height;
  return canvas;
}
function createImageData(width, height) {
  // return new ImageData(this.width, this.height); // Doesn't work on old IE
  var canvas = document.createElement("canvas"),
    context = canvas.getContext("2d");
  return context.createImageData(width, height);
}

},{}],3:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPArtwork;
var _CPImageLayer = _interopRequireDefault(require("./CPImageLayer.js"));
var _CPLayerGroup = _interopRequireDefault(require("./CPLayerGroup.js"));
var _CPBlend = _interopRequireDefault(require("./CPBlend.js"));
require("./CPBlendAdditional.js");
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _CPBlendTree = _interopRequireDefault(require("./CPBlendTree.js"));
var _CPMaskView = _interopRequireDefault(require("./CPMaskView.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPBrushManager = _interopRequireDefault(require("./CPBrushManager.js"));
var _CPBrushInfo = _interopRequireDefault(require("./CPBrushInfo.js"));
var _CPUndo2 = _interopRequireDefault(require("./CPUndo.js"));
var _CPClip = _interopRequireDefault(require("./CPClip.js"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _CPRandom = _interopRequireDefault(require("../util/CPRandom.js"));
var _CPTransform = _interopRequireDefault(require("../util/CPTransform.js"));
var _CPPolyfill = require("../util/CPPolyfill.js");
var _Canvas = require("../util/Canvas.js");
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _CPBrushTool = require("./CPBrushTool.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
                                                                                                                                                                                        ChickenPaint
                                                                                                                                                                                        
                                                                                                                                                                                        ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                        by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                        
                                                                                                                                                                                        ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                    
                                                                                                                                                                                        ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                        it under the terms of the GNU General Public License as published by
                                                                                                                                                                                        the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                        (at your option) any later version.
                                                                                                                                                                                    
                                                                                                                                                                                        ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                        GNU General Public License for more details.
                                                                                                                                                                                    
                                                                                                                                                                                        You should have received a copy of the GNU General Public License
                                                                                                                                                                                        along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                    */
/**
 * Capitalize the first letter of the string.
 *
 * @param {string} string
 * @returns {string}
 */
function capitalizeFirst(string) {
  return string.substring(0, 1).toUpperCase() + string.substring(1);
}
function sum(a, b) {
  return a + b;
}
function arrayEquals(a, b) {
  if (a.length != b.length) {
    return false;
  }
  for (var i = 0; i < a.length; i++) {
    if (a[i] != b[i]) {
      return false;
    }
  }
  return true;
}

/**
 * @param {HTMLCanvasElement} canvas
 * @returns {int}
 */
function memoryUsedByCanvas(canvas) {
  return canvas ? canvas.width * canvas.height * 4 : 0;
}

/**
 * Create a new empty artwork with the given dimensions.
 *
 * Note that an artwork with no layers is invalid, so you must call a routine like addBackgroundLayer(), addLayer(), or
 * addLayerObject() before calling any other routines.
 *
 * @param {int} _width
 * @param {int} _height
 * @constructor
 */
function CPArtwork(_width, _height) {
  _width = _width | 0;
  _height = _height | 0;
  var MAX_UNDO = 30,
    EMPTY_BACKGROUND_COLOR = 0xFFFFFFFF,
    EMPTY_MASK_COLOR = 0x00,
    EMPTY_LAYER_COLOR = 0x00FFFFFF,
    THUMBNAIL_REBUILD_DELAY_MSEC = 1000;
  var
    /**
     * The root of the document's hierarchy of layers and layer groups.
     *
     * @type {CPLayerGroup}
     */
    layersRoot = new _CPLayerGroup.default("Root", _CPBlend.default.LM_NORMAL),
    /**
     * Our cached strategy for merging the layers together into one for display.
     *
     * @type {CPBlendTree}
     */
    blendTree = new _CPBlendTree.default(layersRoot, _width, _height, true),
    /**
     * A copy of the current layer's image data that can be used for undo operations.
     *
     * @type {CPColorBmp}
     */
    undoImage = new _CPColorBmp.default(_width, _height),
    /**
     * The region of the undoImage which is out of date with respect to the content of the layer, and needs updated
     * with prepareForLayerUndo().
     *
     * @type {CPRect}
     */
    undoImageInvalidRegion = new _CPRect.default(0, 0, _width, _height),
    /**
     * A copy of the current layer's mask that can be used for undo operations.
     *
     * @type {CPGreyBmp}
     */
    undoMask = new _CPGreyBmp.default(_width, _height, 8),
    /**
     * The region of the undoMask which is out of date with respect to the content of the layer, and needs updated
     * with prepareForLayerUndo().
     *
     * @type {CPRect}
     */
    undoMaskInvalidRegion = new _CPRect.default(0, 0, _width, _height),
    /**
     * We use this buffer so we can customize the accumulation of the area painted during a brush stroke.
     * (e.g. so that brushing over the same area multiple times during one stroke doesn't further increase opacity
     * there).
     *
     * Normally we use it as a 16-bit opacity channel per pixel, but some brushes use the full 32-bits per pixel
     * as ARGB.
     *
     * @type {CPGreyBmp}
     */
    strokeBuffer = new _CPGreyBmp.default(_width, _height, 32),
    /**
     * The area of dirty data contained by strokeBuffer that should be merged by fusionLayers()
     *
     * @type {CPRect}
     */
    strokedRegion = new _CPRect.default(0, 0, 0, 0),
    brushManager = new _CPBrushManager.default(),
    that = this;
  var paintingModes = [],
    /**
        * The currently selected layer (should never be null)
        *
        * @type {(CPImageLayer|CPLayerGroup)}
        */
    curLayer = layersRoot,
    /**
        * True if we're editing the mask of the currently selected layer, false otherwise.
        *
        * @type {boolean}
        */
    maskEditingMode = false,
    /**
        * If the user is viewing a single mask from the document, we cache the view of that here for later invalidation.
        *
        * @type {CPMaskView}
        */
    maskView = null,
    /**
     * Used by CPUndoPaint to keep track of the area of layer data that has been dirtied during a brush stroke
     * (or other drawing operation) and should be saved for later undo.
     */
    paintUndoArea = new _CPRect.default(0, 0, 0, 0),
    hasUnsavedChanges = false,
    curSelection = new _CPRect.default(0, 0, 0, 0),
    /**
     * Points to a buffer which represents all the layers merged together. Since this buffer might be an actual
     * layer from the image stack, you must not write to it through here (you'll damage the image).
     *
     * @type {CPColorBmp}
     */
    fusion = null,
    rnd = new _CPRandom.default(),
    previewOperation = null,
    /**
     * @type {?CPClip}
     */
    clipboard = null,
    /**
     * @type {CPUndo[]}
     */
    undoList = [],
    /**
     * @type {CPUndo[]}
     */
    redoList = [],
    /**
        * @type {?CPBrushInfo}
        */
    curBrush = null,
    lastX = 0.0,
    lastY = 0.0,
    lastPressure = 0.0,
    sampleAllLayers = false,
    /**
        * Set to true when the user is in the middle of a painting operation (so redrawing the thumbnail would be
        * a waste of time).
        *
        * @type {boolean}
        */
    drawingInProgress = false,
    rebuildMaskThumbnail = new Set(),
    rebuildImageThumbnail = new Set(),
    thumbnailRebuildTimer = null,
    /**
        * @type {int}
        */
    curColor = 0x000000,
    // Black
    transformInterpolation = "smooth";

  /**
      * We use this routine to suppress the updating of a thumbnail while the user is still drawing.
      */
  function beginPaintingInteraction() {
    drawingInProgress = true;
  }

  /**
      *
      * @param {boolean} immediateUpdateOfThumbnail
      */
  function endPaintingInteraction(immediateUpdateOfThumbnail) {
    drawingInProgress = false;
    if (rebuildImageThumbnail.size > 0 || rebuildMaskThumbnail.size > 0) {
      if (immediateUpdateOfThumbnail) {
        buildThumbnails();
      } else if (!thumbnailRebuildTimer) {
        setTimeout(buildThumbnails, THUMBNAIL_REBUILD_DELAY_MSEC);
      }
    }
  }

  // When the selected rectangle changes
  function callListenersSelectionChange() {
    that.emitEvent("changeSelection", []);
  }

  /**
      * Get the root group which contains all the layers of the document.
      *
      * @returns {CPLayerGroup}
      */
  this.getLayersRoot = function () {
    return layersRoot;
  };

  /**
   * Gets the current selection rect or a rectangle covering the whole canvas if there are no selections
   * 
   * @returns {CPRect}
   */
  this.getSelectionAutoSelect = function () {
    if (!curSelection.isEmpty()) {
      return this.getSelection();
    }
    return this.getBounds();
  };
  this.getSelection = function () {
    return curSelection.clone();
  };
  function callListenersUpdateRegion(region) {
    that.emitEvent("updateRegion", [region]);
  }

  /**
   * Notify listeners that the structure of the document has changed (layers added or removed).
   */
  function artworkStructureChanged() {
    that.emitEvent("changeStructure");
    blendTree.resetTree();
    invalidateUndoBuffers();
    callListenersUpdateRegion(that.getBounds());
  }

  /**
   * Notify listeners that the properties of the given layer has changed (opacity, blendMode, etc).
   *
   * @param {CPLayer} layer
  * @param {string} propertyName
   * @param {boolean} noVisibleEffect - If true, notify listeners that the layer has changed but don't redraw anything.
   *                                    This is useful for properties like "expanded" and "name" which don't change the
   *                                    visual appearance of the layer on the canvas.
   */
  function layerPropertyChanged(layer, propertyName, noVisibleEffect) {
    that.emitEvent("changeLayer", [layer]);
    if (!noVisibleEffect) {
      blendTree.layerPropertyChanged(layer, propertyName);
      callListenersUpdateRegion(that.getBounds());
    }
  }
  function buildThumbnails() {
    var _iterator = _createForOfIteratorHelper(rebuildImageThumbnail),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var layer = _step.value;
        layer.rebuildImageThumbnail();
        that.emitEvent("changeLayerImageThumb", [layer]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var _iterator2 = _createForOfIteratorHelper(rebuildMaskThumbnail),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _layer = _step2.value;
        _layer.rebuildMaskThumbnail();
        that.emitEvent("changeLayerMaskThumb", [_layer]);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    rebuildImageThumbnail.clear();
    if (thumbnailRebuildTimer) {
      clearTimeout(thumbnailRebuildTimer);
      thumbnailRebuildTimer = null;
    }
  }

  /**
   * Mark the given rectangle on the layer as needing to be re-fused (i.e. we've drawn in this region).
   * Listeners are notified about our updated canvas region.
   *
   * @param {(CPLayer|CPLayer[])} layers - Layer or layers to invalidate
   * @param {CPRect} rect - Rect to invalidate. Must have all integer co-ordinates, and the rectangle must be contained
   * within the artwork bounds.
   * @param {boolean} invalidateImage - True if drawing happened on the layer's image data
   * @param {boolean} invalidateMask - True if drawing happened on the layer's mask
   */
  function invalidateLayer(layers, rect, invalidateImage, invalidateMask) {
    if (!Array.isArray(layers)) {
      layers = [layers];
    }
    layers.forEach(function (layer) {
      return blendTree.invalidateLayerRect(layer, rect);
    });
    var newThumbToRebuild = false;
    if (invalidateImage) {
      // This updated area will need to be updated in our undo buffer later
      undoImageInvalidRegion.union(rect);

      // Invalidate changed thumbnails
      var _iterator3 = _createForOfIteratorHelper(layers),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var layer = _step3.value;
          if (layer instanceof _CPImageLayer.default) {
            rebuildImageThumbnail.add(layer);
            newThumbToRebuild = true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
    if (invalidateMask) {
      undoMaskInvalidRegion.union(rect);
      layers.forEach(function (layer) {
        rebuildMaskThumbnail.add(layer);
        if (maskView && maskView.layer == layer) {
          maskView.invalidateRect(rect);
        }
      });
      newThumbToRebuild = true;
    }

    // Update layer thumbnails
    if (newThumbToRebuild) {
      if (thumbnailRebuildTimer) {
        clearTimeout(thumbnailRebuildTimer);
        thumbnailRebuildTimer = null;
      }
      if (!drawingInProgress) {
        thumbnailRebuildTimer = setTimeout(buildThumbnails, THUMBNAIL_REBUILD_DELAY_MSEC);
      }
    }
    callListenersUpdateRegion(rect);
  }

  /**
   * Call when the layer's pixels have been updated as part of a paint operation, to mark it to be redrawn.
   *
   * The routine will decide if the layer's image or mask has been modified by using the global 'maskEditingMode'
   * flag. This is what you want for a typical painting operation (since it'll typically modify only the image the
   * user selected).
   *
   * @param {CPLayer} layer
   * @param {CPRect} rect
   */
  function invalidateLayerPaint(layer, rect) {
    invalidateLayer(layer, rect, !maskEditingMode, maskEditingMode);
  }

  /**
      * Gets the image that the user has selected for drawing onto (a member of the currently active layer).
      * Can be null if selecting a group's "image".
      *
      * @returns {?CPColorBmp|CPGreyBmp}
      */
  function getActiveImage() {
    return maskEditingMode ? curLayer.mask : curLayer.image;
  }
  this.setHasUnsavedChanges = function (value) {
    if (value != hasUnsavedChanges) {
      hasUnsavedChanges = value;
      this.emitEvent("unsavedChanges", [value]);
    }
  };
  this.getHasUnsavedChanges = function () {
    return hasUnsavedChanges;
  };
  this.isAddLayerMaskAllowed = function () {
    return !curLayer.mask;
  };

  /**
   * Add a layer mask to the current layer.
   */
  this.addLayerMask = function () {
    if (this.isAddLayerMaskAllowed()) {
      addUndo(new CPActionAddLayerMask(curLayer));
    }
  };
  this.isRemoveLayerMaskAllowed = function () {
    return curLayer.mask !== null;
  };
  this.removeLayerMask = function () {
    if (this.isRemoveLayerMaskAllowed()) {
      addUndo(new CPActionRemoveLayerMask(curLayer, false));
    }
  };
  this.isApplyLayerMaskAllowed = function () {
    return curLayer.mask !== null && curLayer instanceof _CPImageLayer.default;
  };
  this.applyLayerMask = function (apply) {
    if (this.isApplyLayerMaskAllowed()) {
      addUndo(new CPActionRemoveLayerMask(curLayer, true));
    }
  };

  /**
   * Add a layer of the specified type (layer, group) on top of the current layer.
   *
   * @param {string} layerType
   * @returns {CPLayer}
   */
  this.addLayer = function (layerType) {
    var parentGroup, newLayerIndex, newLayer;
    if (curLayer instanceof _CPLayerGroup.default && curLayer.expanded) {
      parentGroup = curLayer;
      newLayerIndex = curLayer.layers.length;
    } else {
      parentGroup = curLayer.parent;
      newLayerIndex = parentGroup.layers.indexOf(curLayer) + 1;
    }
    switch (layerType) {
      case "group":
        // Attempt to insert above the clipping group if we're trying to insert inside one
        while (parentGroup.layers[newLayerIndex] instanceof _CPImageLayer.default && parentGroup.layers[newLayerIndex].clip) {
          newLayerIndex++;
        }
        newLayer = new _CPLayerGroup.default(this.getDefaultLayerName(true), _CPBlend.default.LM_PASSTHROUGH);
        break;
      default:
        newLayer = new _CPImageLayer.default(this.width, this.height, this.getDefaultLayerName(false));
        newLayer.image.clearAll(EMPTY_LAYER_COLOR);
    }
    addUndo(new CPActionAddLayer(parentGroup, newLayerIndex, newLayer));
    return newLayer;
  };

  /**
      * Effectively an internal method to be called by CPChibiFile to populate the layer stack.
      *
      * @param {CPLayerGroup} parent
      * @param {(CPImageLayer|CPLayerGroup)} layer
      */
  this.addLayerObject = function (parent, layer) {
    parent.addLayer(layer);

    // Select the layer if it's the first one in the document (so we can get a valid curLayer field)
    if (parent == layersRoot && layersRoot.layers.length == 1) {
      curLayer = layer;
    }
    artworkStructureChanged();
  };

  /**
      * Internal method for CPChibiFile to call to wrap a group around the given number of children on
      * the top of the layer stack.
      *
      * @param {CPLayerGroup} parent
      * @param {CPLayerGroup} group
      * @param {int} numChildren - Number of layers from the parent group to wrap
      */
  this.addLayerGroupObject = function (parent, group, numChildren) {
    var children = [];

    // Grab our child layers off the stack and add them to us.
    for (var i = 0; i < numChildren; i++) {
      children.unshift(parent.layers.pop());
    }
    children.forEach(function (child) {
      return group.addLayer(child);
    });
    this.addLayerObject(parent, group);
  };
  this.isRemoveLayerAllowed = function () {
    if (curLayer instanceof _CPImageLayer.default) {
      return layersRoot.getLinearizedLayerList(false).some(function (layer) {
        return layer instanceof _CPImageLayer.default && layer != curLayer;
      });
    }
    if (curLayer instanceof _CPLayerGroup.default) {
      return layersRoot.getLinearizedLayerList(false).some(function (layer) {
        return layer instanceof _CPImageLayer.default && !layer.hasAncestor(curLayer);
      });
    }
    return false;
  };

  /**
   * Remove the currently selected layer.
   * 
   * @return {boolean} True if the layer was removed, or false when removal failed because there would be no image
   * layers left in the document after deletion.
   */
  this.removeLayer = function () {
    if (this.isRemoveLayerAllowed()) {
      addUndo(new CPActionRemoveLayer(curLayer));
      return true;
    }
    return false;
  };
  this.duplicateLayer = function () {
    addUndo(new CPActionDuplicateLayer(curLayer));
  };
  this.isMergeDownAllowed = function () {
    var layerIndex = curLayer.parent.indexOf(curLayer);
    return layerIndex > 0 && curLayer instanceof _CPImageLayer.default && curLayer.parent.layers[layerIndex - 1] instanceof _CPImageLayer.default;
  };
  this.mergeDown = function () {
    if (this.isMergeDownAllowed()) {
      addUndo(new CPActionMergeDownLayer(curLayer));
    }
  };
  this.isMergeGroupAllowed = function () {
    return curLayer instanceof _CPLayerGroup.default && curLayer.getEffectiveAlpha() > 0;
  };
  this.mergeGroup = function () {
    if (this.isMergeGroupAllowed()) {
      addUndo(new CPActionMergeGroup(curLayer));
    }
  };
  this.isMergeAllLayersAllowed = function () {
    return layersRoot.getLinearizedLayerList(false).length > 1;
  };
  this.mergeAllLayers = function () {
    if (this.isMergeAllLayersAllowed()) {
      addUndo(new CPActionMergeAllLayers());
    }
  };

  /**
   * Move a layer in the stack from one index to another.
   * 
   * @param {(CPImageLayer|CPLayerGroup)} layer
   * @param {CPLayerGroup} toGroup
   * @param {int} toIndex
   */
  this.relocateLayer = function (layer, toGroup, toIndex) {
    if (layer && toGroup && layer != toGroup && !toGroup.hasAncestor(layer)) {
      addUndo(new CPActionRelocateLayer(layer, toGroup, toIndex));
    }
  };

  /**
      *
      * @param {CPLayer} layer
      * @param {boolean} visible
      */
  this.setLayerVisibility = function (layer, visible) {
    var layers = [];
    if (!layer.ancestorsAreVisible()) {
      // Assume the user wants to make this layer visible by revealing its hidden ancestors (as well as the layer)
      for (var node = layer; node != null; node = node.parent) {
        if (!node.visible) {
          layers.push(node);
        }
      }
      addUndo(new CPActionChangeLayerVisible(layers, true));
    } else if (layer.visible != visible) {
      addUndo(new CPActionChangeLayerVisible(layer, visible));
    }
  };

  /**
      * Expand or collapse the given layer group.
      *
      * @param {CPLayerGroup} group
      * @param {boolean} expand - True to expand, false to collapse
      */
  this.expandLayerGroup = function (group, expand) {
    if (group.expanded != expand) {
      group.expanded = expand;
      if (!expand && curLayer.hasAncestor(group)) {
        // Don't allow the selected layer to get hidden in the group
        this.setActiveLayer(group, false);
      }
      layerPropertyChanged(group, "expanded", true);
    }
  };
  this.setLayerAlpha = function (alpha) {
    if (curLayer.getAlpha() != alpha) {
      addUndo(new CPActionChangeLayerAlpha(curLayer, alpha));
    }
  };
  this.setLayerMaskLinked = function (linked) {
    if (curLayer.maskLinked != linked) {
      addUndo(new CPActionChangeLayerMaskLinked(curLayer, linked));
    }
  };

  /**
      *
   * @param {CPLayer} layer
   * @param {boolean} visible
   */
  this.setLayerMaskVisible = function (layer, visible) {
    if (layer.maskVisible != visible) {
      addUndo(new CPActionChangeLayerMaskVisible(layer, visible));
    }
  };
  this.setLayerBlendMode = function (blendMode) {
    if (curLayer.getBlendMode() != blendMode && (blendMode != _CPBlend.default.LM_PASSTHROUGH || curLayer instanceof _CPLayerGroup.default)) {
      addUndo(new CPActionChangeLayerMode(curLayer, blendMode));
    }
  };

  /**
      * @param {CPLayer} layer
      * @param {string} name
      */
  this.setLayerName = function (layer, name) {
    if (layer.getName() != name) {
      addUndo(new CPActionChangeLayerName(layer, name));
    }
  };

  /**
   * Paint a dab of paint to the canvas using the current brush.
   *
   * @param {number} x - Position of brush tip
   * @param {number} y - Position of brush tip
   * @param {number} pressure - Pen pressure (tablets).
   */
  this.paintDab = function (x, y, pressure) {
    curBrush.applyPressure(pressure);
    if (curBrush.scattering > 0.0) {
      x += rnd.nextGaussian() * curBrush.curScattering / 4.0;
      y += rnd.nextGaussian() * curBrush.curScattering / 4.0;
    }
    var brushTool = paintingModes[curBrush.brushMode],
      dab = brushManager.getDab(x, y, curBrush),
      brushRect = new _CPRect.default(0, 0, dab.width, dab.height),
      imageRect = new _CPRect.default(0, 0, dab.width, dab.height);
    imageRect.translate(dab.x, dab.y);
    that.getBounds().clipSourceDest(brushRect, imageRect);
    if (imageRect.isEmpty()) {
      // drawing entirely outside the canvas
      return;
    }
    paintUndoArea.union(imageRect);
    var destImage = maskEditingMode ? curLayer.mask : curLayer.image,
      sampleImage = sampleAllLayers && !maskEditingMode ? fusion : destImage;

    /* The brush will either paint itself directly to the image, or paint itself to the strokeBuffer and update
     * the strokedRegion (which will be merged to the image later by mergeStrokeBuffer(), perhaps in response
     * to a call to fusionLayers())
     */
    brushTool.paintDab(destImage, imageRect, sampleImage, curBrush, brushRect, dab, curColor);
    if (!maskEditingMode && brushTool.noMergePhase && curLayer.getLockAlpha()) {
      // This tool painted to the image during paintDab(), so we have to apply image alpha here instead of during merge
      restoreImageAlpha(destImage, imageRect);
    }
    if (brushTool.wantsOutputAsInput) {
      mergeStrokeBuffer();
      if (sampleAllLayers && !maskEditingMode) {
        that.fusionLayers();
      }
    }
    invalidateLayerPaint(curLayer, imageRect);
  };
  this.getDefaultLayerName = function (isGroup) {
    var prefix = isGroup ? "Group " : "Layer ",
      nameRegex = isGroup ? /^Group [0-9]+$/ : /^Layer [0-9]+$/,
      highestLayerNb = 0,
      layers = layersRoot.getLinearizedLayerList(false);
    for (var i = 0; i < layers.length; i++) {
      var layer = layers[i];
      if (nameRegex.test(layer.name)) {
        highestLayerNb = Math.max(highestLayerNb, parseInt(layer.name.substring(prefix.length), 10));
      }
    }
    return prefix + (highestLayerNb + 1);
  };

  /**
      * Restore the alpha channel of the given image from the undoImage (i.e. restore it to what it was before the
      * current drawing operation started).
      *
      * @param {CPColorBmp} image
      * @param {CPRect} rect
      */
  function restoreImageAlpha(image, rect) {
    image.copyAlphaFrom(undoImage, rect);
  }

  /**
   * Merge the brushstroke buffer from the current drawing operation to the active layer.
   */
  function mergeStrokeBuffer() {
    if (!strokedRegion.isEmpty()) {
      if (maskEditingMode) {
        var destMask = curLayer.mask;

        // Can't erase on masks, so just paint black instead
        if (curBrush.brushMode == _CPBrushInfo.default.BRUSH_MODE_ERASE) {
          paintingModes[_CPBrushInfo.default.BRUSH_MODE_PAINT].mergeOntoMask(destMask, undoMask, 0xFF000000);
        } else {
          paintingModes[curBrush.brushMode].mergeOntoMask(destMask, undoMask, curColor & 0xFF);
        }
      } else {
        var destImage = curLayer.image,
          lockAlpha = curLayer.getLockAlpha();
        if (curBrush.brushMode == _CPBrushInfo.default.BRUSH_MODE_ERASE && lockAlpha) {
          // We're erasing with locked alpha, so the only sensible thing to do is paint white...

          // FIXME: it would be nice to be able to set the paper color
          paintingModes[_CPBrushInfo.default.BRUSH_MODE_PAINT].mergeOntoImage(destImage, undoImage, EMPTY_LAYER_COLOR);
        } else {
          paintingModes[curBrush.brushMode].mergeOntoImage(destImage, undoImage, curColor);
        }
        if (lockAlpha) {
          restoreImageAlpha(destImage, strokedRegion);
        }
      }
      strokedRegion.makeEmpty();
    }
  }
  function prepareForFusion() {
    // The current brush renders out its buffers to the layer stack for us
    mergeStrokeBuffer();
    blendTree.buildTree();
  }
  this.addBackgroundLayer = function () {
    //背景レイヤーを追加
    var layer = new _CPImageLayer.default(that.width, that.height, this.getDefaultLayerName(false));
    layer.image.clearAll(EMPTY_BACKGROUND_COLOR);
    this.addLayerObject(this.getLayersRoot(), layer);
  };
  this.addDefaultLayer = function () {
    //起動時に透明なレイヤーを1枚追加
    var layer = new _CPImageLayer.default(that.width, that.height, this.getDefaultLayerName(false));
    layer.image.clearAll(EMPTY_LAYER_COLOR);
    this.addLayerObject(this.getLayersRoot(), layer);
    //アクティブレイヤーにセット
    this.setActiveLayer(layer, false);
  };
  /**
   * Merge together the visible layers and return the resulting image for display to the screen.
   * 
   * The image is cached, so repeat calls are cheap.
   *
   * @returns {CPColorBmp}
   */
  this.fusionLayers = function () {
    prepareForFusion();
    fusion = blendTree.blendTree().image;
    return fusion;
  };

  /**
      * Old ChibiPaint used a blending operator with a slightly different formula than us for blending onto opaque
      * canvases. We can fix this in two ways:
      *
      * default - If it looks like the original layer would have used the old Opaque Multiply algorithm, keep using that
      *           one, otherwise upgrade it to the new Multiply2 algorithm.
      *
      * bake - modify the pixels of Multiply layers in the document in order to bring their blended appearance to match what
      *        the old multiply algorithm would have produced.
      *
      *        The resulting artwork is not really editable, because the baked-in corrections will only look correct when
      *        the layers underneath the multiply layers are all the same as they originally were. Any change to layer
      *        opacities will also ruin the result.
      *
      * Either way, this must not be called on new (ChickenPaint 0.10 format) artworks.
      *
      * @param {?string} mode
   */
  this.upgradeMultiplyLayers = function (mode) {
    var layers = this.getLayersRoot().getLinearizedLayerList(false, []),
      lastMultiplyLayerIndex = -1;
    for (var i = 0; i < layers.length; i++) {
      var layer = layers[i];
      if (!(layer instanceof _CPImageLayer.default) || layer.mask || layer.blendMode > _CPBlend.default.LM_LAST_CHIBIPAINT) {
        throw new Error("Bad layer type during multiply upgrade");
      }
      if (layer.blendMode === _CPBlend.default.LM_MULTIPLY) {
        lastMultiplyLayerIndex = i;
      }
    }
    if (lastMultiplyLayerIndex !== -1) {
      var _fusion = new _CPColorBmp.default(this.width, this.height),
        hasTransparency = true,
        first = true,
        blendRect = this.getBounds();
      _fusion.clearAll(blendRect, 0x00FFFFFF); // Transparent white

      for (var _i = 0; _i <= lastMultiplyLayerIndex; _i++) {
        var _layer2 = layers[_i];
        if (!first) {
          hasTransparency = hasTransparency && _fusion.hasAlphaInRect(blendRect);
        }
        if (_layer2.blendMode === _CPBlend.default.LM_MULTIPLY) {
          switch (mode) {
            case "bake":
              /* Don't make changes to hidden multiply layers, we won't support editing the resulting
               * artwork to reveal these layers later anyway.
               */
              if (!hasTransparency && _layer2.getEffectiveAlpha() > 0) {
                // The original drawing probably used the old Opaque blend mode, so let's fix it up
                if (_layer2.alpha === 100) {
                  _CPBlend.default.upgradeMultiplyOfOpaqueLayer(_fusion, _layer2.image, 100, blendRect);
                } else {
                  _CPBlend.default.upgradeMultiplyOfTransparentLayer(_fusion, _layer2.image, _layer2.alpha, blendRect);
                }
                _layer2.setBlendMode(_CPBlend.default.LM_MULTIPLY2);
              }
              break;
            default:
              if (hasTransparency) {
                /* The original drawing probably wouldn't have used the old Opaque blend mode for this layer,
                 * so we can upgrade it.
                 */
                _layer2.setBlendMode(_CPBlend.default.LM_MULTIPLY2);
              }
          }
        }
        if (_layer2.getEffectiveAlpha() > 0) {
          first = false;
          _CPBlend.default.fuseImageOntoImage(_fusion, hasTransparency, _layer2.image, _layer2.alpha, _layer2.blendMode, blendRect, null);
        }
      }
    }
  };
  this.isCreateClippingMaskAllowed = function () {
    var layerIndex = curLayer.parent.indexOf(curLayer),
      underLayer = curLayer.parent.layers[layerIndex - 1];
    return curLayer instanceof _CPImageLayer.default && !curLayer.clip && underLayer instanceof _CPImageLayer.default;
  };

  /**
      * Clip this layer to the one below, if it is not already clipped.
      */
  this.createClippingMask = function () {
    if (this.isCreateClippingMaskAllowed()) {
      addUndo(new CPActionChangeLayerClip(curLayer, true));
    }
  };
  this.isReleaseClippingMaskAllowed = function () {
    return curLayer instanceof _CPImageLayer.default && curLayer.clip;
  };

  /**
   * Clip this layer to the one below, if it is not already clipped.
   */
  this.releaseClippingMask = function () {
    if (this.isReleaseClippingMaskAllowed()) {
      addUndo(new CPActionChangeLayerClip(curLayer, false));
    }
  };

  /**
   * Change the currently active layer. The layer may not be set to null.
   *
   * @param {(CPLayer|CPImageLayer|CPLayerGroup)} newLayer
   * @param {boolean} selectMask - True to select the layer's mask for editing
   */
  this.setActiveLayer = function (newLayer, selectMask) {
    if (newLayer) {
      // Ensure the mask really exists if we ask to select it
      selectMask = newLayer.mask && selectMask;
      var editingModeChanged = selectMask != maskEditingMode;
      if (curLayer != newLayer || editingModeChanged) {
        var oldLayer = curLayer;
        curLayer = newLayer;
        maskEditingMode = selectMask;
        invalidateUndoBuffers();
        this.emitEvent("changeActiveLayer", [oldLayer, newLayer, maskEditingMode]);
        if (editingModeChanged) {
          this.emitEvent("editModeChanged", [maskEditingMode ? CPArtwork.EDITING_MODE_MASK : CPArtwork.EDITING_MODE_IMAGE]);
        }
        if (maskView && maskView.layer == oldLayer) {
          if (selectMask) {
            maskView.setLayer(newLayer);
          } else {
            this.closeMaskView();
          }
        }
      }
    }
  };
  this.closeMaskView = function () {
    maskView.close();
    maskView = null;
  };
  this.toggleMaskView = function () {
    if (maskView == null || !maskView.isOpen()) {
      if (curLayer.mask) {
        maskView = new _CPMaskView.default(curLayer, mergeStrokeBuffer);
      } else {
        maskView = null;
      }
    } else {
      this.closeMaskView();
    }
    return maskView;
  };

  /**
   * Select the topmost visible layer, or the topmost layer if none are visible.
   */
  this.selectTopmostVisibleLayer = function () {
    var list = layersRoot.getLinearizedLayerList(false);

    // Find a visible, drawable layer
    for (var i = list.length - 1; i >= 0; i--) {
      if (list[i] instanceof _CPImageLayer.default && list[i].getEffectiveAlpha() > 0) {
        this.setActiveLayer(list[i], false);
        return;
      }
    }

    // None? Okay, how about just a drawable layer
    for (var _i2 = list.length - 1; _i2 >= 0; _i2--) {
      if (list[_i2] instanceof _CPImageLayer.default) {
        this.setActiveLayer(list[_i2], false);
        return;
      }
    }

    // Trying to be difficult, huh?
    this.setActiveLayer(list[list.length - 1], false);
  };

  /**
      * Get the currently active layer (the layer that drawing operations will be applied to))
      *
      * @returns {CPLayer}
      */
  this.getActiveLayer = function () {
    return curLayer;
  };
  this.isEditingMask = function () {
    return maskEditingMode;
  };
  this.isActiveLayerDrawable = function () {
    return maskEditingMode && curLayer.mask || !maskEditingMode && curLayer instanceof _CPImageLayer.default;
  };

  /**
      *
      * @returns {number}
      */
  this.getUndoMemoryUsed = function () {
    var total = 0;
    for (var _i3 = 0, _redoList = redoList; _i3 < _redoList.length; _i3++) {
      var redo = _redoList[_i3];
      total += redo.getMemoryUsed(true, null);
    }
    for (var _i4 = 0, _undoList = undoList; _i4 < _undoList.length; _i4++) {
      var undo = _undoList[_i4];
      total += undo.getMemoryUsed(false, null);
    }
    return total;
  };
  this.isUndoAllowed = function () {
    return undoList.length > 0;
  };
  this.isRedoAllowed = function () {
    return redoList.length > 0;
  };

  //
  // Undo / Redo
  //

  this.undo = function () {
    if (!this.isUndoAllowed()) {
      return;
    }
    this.setHasUnsavedChanges(true);
    var undo = undoList.pop();
    undo.undo();
    redoList.push(undo);
  };
  this.redo = function () {
    if (!this.isRedoAllowed()) {
      return;
    }
    this.setHasUnsavedChanges(true);
    var redo = redoList.pop();
    redo.redo();
    undoList.push(redo);
  };
  function prepareForLayerImageUndo() {
    if (curLayer instanceof _CPImageLayer.default && !undoImageInvalidRegion.isEmpty()) {
      // console.log("Copying " + undoImageInvalidRegion + " to the image undo buffer");

      undoImage.copyBitmapRect(curLayer.image, undoImageInvalidRegion.left, undoImageInvalidRegion.top, undoImageInvalidRegion);
      undoImageInvalidRegion.makeEmpty();
    }
  }
  function prepareForLayerMaskUndo() {
    if (curLayer.mask && !undoMaskInvalidRegion.isEmpty()) {
      // console.log("Copying " + undoMaskInvalidRegion + " to the mask undo buffer");

      undoMask.copyBitmapRect(curLayer.mask, undoMaskInvalidRegion.left, undoMaskInvalidRegion.top, undoMaskInvalidRegion);
      undoMaskInvalidRegion.makeEmpty();
    }
  }

  /**
   * Call before making a paint operation on the current layer, in order to store the state of the layer for
   * later undo with CPUndoPaint.
   */
  function prepareForLayerPaintUndo() {
    if (maskEditingMode) {
      prepareForLayerMaskUndo();
    } else {
      prepareForLayerImageUndo();
    }
  }

  /**
   * Call when the undo buffer has become completely worthless (e.g. after the active layer index changes, the undo
   * buffer won't contain any data from the new layer to begin with).
   */
  function invalidateUndoBuffers() {
    var bounds = that.getBounds();
    undoImageInvalidRegion.set(bounds);
    undoMaskInvalidRegion.set(bounds);
  }

  /**
   * The result of some of our operations aren't needed until later, so we can defer them until the user is idle.
   *
   * You may call this routine at any time (or never, if you like) as a hint that the user is idle and we should
   * try to perform pending operations before we will need to block on their results.
   */
  this.performIdleTasks = function () {
    prepareForLayerPaintUndo();
    prepareForFusion();
  };

  /**
      *
   * @param {CPUndo} undo
   */
  function addUndo(undo) {
    that.setHasUnsavedChanges(true);
    if (redoList.length > 0) {
      redoList = [];
    }
    if (undoList.length === 0 || !undoList[undoList.length - 1].merge(undo)) {
      if (undoList.length >= MAX_UNDO) {
        undoList.shift();
      }
      that.compactUndo();
      undoList.push(undo);
    } else if (undoList[undoList.length - 1].noChange()) {
      // Two merged changes can mean no change at all
      // don't leave a useless undo in the list
      undoList.pop();
    }
  }

  /**
      * Compress the undo action at the top of the stack to save space. Intended for internal calls only.
      */
  this.compactUndo = function () {
    if (undoList.length > 0) {
      undoList[undoList.length - 1].compact();
    }
  };
  this.clearHistory = function () {
    undoList = [];
    redoList = [];
  };

  /**
      * Sample the color at the given coordinates.
      *
      * @param {int} x
      * @param {int} y
      * @returns {int}
      */
  this.colorPicker = function (x, y) {
    if (maskEditingMode && curLayer.mask) {
      return _CPColor.default.greyToRGB(curLayer.mask.getPixel(~~x, ~~y));
    } else {
      return fusion.getPixel(~~x, ~~y) & 0xFFFFFF;
    }
  };
  this.setSelection = function (rect) {
    curSelection.set(rect);
    // Ensure we never have fractional coordinates in our selections:
    curSelection.roundNearest();
    curSelection.clipTo(this.getBounds());
  };
  this.emptySelection = function () {
    curSelection.makeEmpty();
  };

  /**
      * Flood fill the current layer using the current color at the given coordinates.
      *
   * @param {int} x
   * @param {int} y
   */
  this.floodFill = function (x, y) {
    var target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = this.getBounds();
      target.floodFill(~~x, ~~y, curColor | 0xff000000);
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, this.getBounds());
    }
  };
  this.gradientFill = function (fromX, fromY, toX, toY, gradientPoints) {
    var r = this.getSelectionAutoSelect(),
      target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      target.gradient(r, fromX, fromY, toX, toY, gradientPoints, false);
      if (this.getLayerLockAlpha() && target instanceof _CPColorBmp.default) {
        restoreImageAlpha(target, r);
      }
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, r);
    }
  };

  /**
      * Replace the pixels in the selection rectangle with the specified color.
      *
      * @param {int} color - ARGB color to fill with
      */
  this.fill = function (color) {
    var r = this.getSelectionAutoSelect(),
      target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      target.clearRect(r, color);
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, r);
    }
  };
  this.clear = function () {
    if (maskEditingMode) {
      this.fill(EMPTY_MASK_COLOR);
    } else {
      this.fill(EMPTY_LAYER_COLOR);
    }
  };

  /**
      *
      * @param {boolean} horizontal
      */
  this.flip = function (horizontal) {
    var rect = this.getSelection(),
      flipWholeLayer = rect.isEmpty(),
      transformBoth = flipWholeLayer && curLayer instanceof _CPImageLayer.default && curLayer.mask && curLayer.maskLinked,
      transformImage = (!maskEditingMode || transformBoth) && curLayer instanceof _CPImageLayer.default,
      transformMask = (maskEditingMode || transformBoth) && curLayer.mask,
      routine = horizontal ? "copyRegionHFlip" : "copyRegionVFlip";
    if (!transformImage && !transformMask) {
      return;
    }
    if (flipWholeLayer) {
      rect = this.getBounds();
    }
    paintUndoArea = rect.clone();
    if (transformImage) {
      prepareForLayerImageUndo();
      curLayer.image[routine](rect, undoImage);
    }
    if (transformMask) {
      prepareForLayerMaskUndo();
      curLayer.mask[routine](rect, undoMask);
    }
    addUndo(new CPUndoPaint(transformImage, transformMask));
    invalidateLayer(curLayer, rect, transformImage, transformMask);
  };
  this.hFlip = function () {
    this.flip(true);
  };
  this.vFlip = function () {
    this.flip(false);
  };
  this.monochromaticNoise = function () {
    var r = this.getSelectionAutoSelect(),
      target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      target.fillWithNoise(r);
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, r);
    }
  };
  this.isColorNoiseAllowed = function () {
    return !this.isEditingMask() && this.isActiveLayerDrawable();
  };

  /**
      * We can only fill layer images with color noise (not masks)
      */
  this.colorNoise = function () {
    if (this.isColorNoiseAllowed()) {
      var r = this.getSelectionAutoSelect();
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      curLayer.image.fillWithColorNoise(r);
      addUndo(new CPUndoPaint(true, false));
      invalidateLayer(curLayer, r, true, false);
    }
  };
  this.invert = function () {
    var r = this.getSelectionAutoSelect(),
      target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      target.invert(r);
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, r);
    }
  };

  /**
      *
   * @param {int} radiusX
   * @param {int} radiusY
   * @param {int} iterations
   */
  this.boxBlur = function (radiusX, radiusY, iterations) {
    var r = this.getSelectionAutoSelect(),
      target = getActiveImage();
    if (target) {
      prepareForLayerPaintUndo();
      paintUndoArea = r.clone();
      for (var i = 0; i < iterations; i++) {
        target.boxBlur(r, radiusX, radiusY);
      }
      addUndo(new CPUndoPaint());
      invalidateLayerPaint(curLayer, r);
    }
  };
  this.rectangleSelection = function (r) {
    var newSelection = r.clone();
    newSelection.clipTo(this.getBounds());
    addUndo(new CPUndoRectangleSelection(this.getSelection(), newSelection));
    this.setSelection(newSelection);
  };

  /**
   * Get the most recently completed operation from the undo list, or null if the undo list is empty.
   *
   * @returns {*}
   */
  function getActiveOperation() {
    if (undoList.length > 0) {
      return undoList[undoList.length - 1];
    }
    return null;
  }

  /**
   * Move the currently selected layer by the given offset.
   *
   * @param {int} offsetX
   * @param {int} offsetY
   * @param {boolean} copy - Make a copy of the selection instead of moving it.
   */
  this.move = function (offsetX, offsetY, copy) {
    /*
     * Add rounding to ensure we haven't been given float coordinates (that would cause horrible flow-on effects like
     * the boundary of the undo rectangle having float coordinates)
     */
    offsetX |= 0;
    offsetY |= 0;
    if (offsetX == 0 && offsetY == 0) {
      return;
    }
    var activeOp = getActiveOperation();

    // If we've changed layers since our last move, we want to move the new layer, not the old one, so can't amend
    if (!copy && activeOp instanceof CPActionMoveSelection && activeOp.layer == this.getActiveLayer()) {
      activeOp.amend(offsetX, offsetY);
      redoList = [];
      this.setHasUnsavedChanges(true);
    } else {
      var action = new CPActionMoveSelection(offsetX, offsetY, copy);
      addUndo(action);
      action.redo();
    }
  };

  /**
   * Change the interpolation mode used by Free Transform operations
   *
   * @param {string} interpolation - Either "sharp" or "smooth"
   */
  this.setTransformInterpolation = function (interpolation) {
    transformInterpolation = interpolation;
    if (previewOperation instanceof CPActionAffineTransformSelection) {
      previewOperation.setInterpolation(interpolation);
    }
  };

  /**
      * If the current operation is an affine transform, roll it back and remove it from the undo history.
      */
  this.transformAffineAbort = function () {
    if (previewOperation instanceof CPActionAffineTransformSelection) {
      previewOperation.undo();
      previewOperation = null;
      endPaintingInteraction(true);
    }
  };

  /**
      * Begins transforming the current selection/layer, and returns the initial source rectangle and initial transform.
      * You can update the transform by calling transformAffineAmend().
      * 
      * You must call transformAffineFinish() or transformAffineAbort() to finish the transformation.
      * 
      * Returns null if the current selection/layer doesn't contain any non-transparent pixels, and doesn't start
      * transforming.
      */
  this.transformAffineBegin = function () {
    // Are we already transforming? Continue that instead
    if (previewOperation instanceof CPActionAffineTransformSelection) {
      return {
        transform: previewOperation.getTransform(),
        rect: previewOperation.getInitialTransformRect(),
        selection: previewOperation.getInitialSelectionRect()
      };
    }
    var initialTransform = new _CPTransform.default(),
      operation;

    /* If we introduce other previewOperations, we might want to check we aren't overwriting them here...
     * Though probably ChickenPaint's global exclusive mode will enforce this for us.
     */
    operation = new CPActionAffineTransformSelection(initialTransform, transformInterpolation);
    if (operation.getInitialTransformRect().isEmpty()) {
      // Tried to transform a selection which contained no pixels
      return null;
    }
    previewOperation = operation;

    // No need for an initial .redo() since the transform is the identity

    beginPaintingInteraction();
    return {
      transform: initialTransform,
      rect: operation.getInitialTransformRect(),
      selection: operation.getInitialSelectionRect()
    };
  };

  /**
      * Finish and save the transform that is currently in progress.
      */
  this.transformAffineFinish = function () {
    if (previewOperation instanceof CPActionAffineTransformSelection) {
      addUndo(previewOperation);
      previewOperation = null;
      endPaintingInteraction(true);
    }
  };

  /**
   * Transform the currently selected layer data using the given AffineTransform.
   *
   * @param {CPTransform} affineTransform
   */
  this.transformAffineAmend = function (affineTransform) {
    if (previewOperation instanceof CPActionAffineTransformSelection) {
      previewOperation.amend(affineTransform);
    }
  };

  // Copy/Paste functions
  this.isCutSelectionAllowed = function () {
    return !this.getSelection().isEmpty() && getActiveImage() !== null;
  };
  this.isCopySelectionAllowed = this.isCutSelectionAllowed;
  this.cutSelection = function () {
    if (this.isCutSelectionAllowed()) {
      addUndo(new CPActionCut(curLayer, maskEditingMode, this.getSelection()));
    }
  };
  this.copySelection = function () {
    if (this.isCopySelectionAllowed()) {
      var selection = that.getSelection(),
        image = getActiveImage();
      clipboard = new _CPClip.default(image.cloneRect(selection), selection.left, selection.top);
    }
  };
  this.isCopySelectionMergedAllowed = function () {
    return !this.getSelection().isEmpty();
  };
  this.copySelectionMerged = function () {
    if (this.isCopySelectionMergedAllowed()) {
      var selection = that.getSelection();
      clipboard = new _CPClip.default(this.fusionLayers().cloneRect(selection), selection.left, selection.top);
    }
  };
  this.isPasteClipboardAllowed = function () {
    return !this.isClipboardEmpty();
  };
  this.pasteClipboard = function () {
    if (this.isPasteClipboardAllowed()) {
      addUndo(new CPActionPaste(clipboard));
    }
  };

  /**
      *
      * @returns {CPClip}
      */
  this.getClipboard = function () {
    return clipboard;
  };

  /*
   * @param {CPClip} clipboard
   */
  this.setClipboard = function (newClipboard) {
    clipboard = newClipboard;
  };
  this.isClipboardEmpty = function () {
    return clipboard == null;
  };
  this.setSampleAllLayers = function (b) {
    sampleAllLayers = b;
  };
  this.getLayerLockAlpha = function () {
    return this.getActiveLayer().getLockAlpha();
  };
  this.setLayerLockAlpha = function (lock) {
    if (curLayer.getLockAlpha() != lock) {
      addUndo(new CPActionChangeLayerLockAlpha(curLayer, lock));
    }
  };

  /**
      * @param {int} color - RGB color
      */
  this.setForegroundColor = function (color) {
    curColor = color;
  };
  this.setBrush = function (brush) {
    curBrush = brush;
  };
  this.setBrushTexture = function (texture) {
    brushManager.setTexture(texture);
  };

  /**
      * Start a painting operation.
      *
   * @param {float} x
   * @param {float} y
   * @param {float} pressure
   * @returns {boolean} - true if the painting began successfully, false otherwise (don't call continueStroke or endStroke!)
   */
  this.beginStroke = function (x, y, pressure) {
    if (curBrush === null || !this.isActiveLayerDrawable()) {
      return false;
    }
    prepareForLayerPaintUndo();
    paintUndoArea.makeEmpty();
    strokeBuffer.clearAll(0);
    strokedRegion.makeEmpty();
    lastX = x;
    lastY = y;
    lastPressure = pressure;
    beginPaintingInteraction();
    paintingModes[curBrush.brushMode].beginStroke();
    this.paintDab(x, y, pressure);
    return true;
  };
  this.continueStroke = function (x, y, pressure) {
    if (curBrush == null) {
      return;
    }
    var dist = Math.sqrt((lastX - x) * (lastX - x) + (lastY - y) * (lastY - y)),
      spacing = Math.max(curBrush.minSpacing, curBrush.curSize * curBrush.spacing);
    if (dist > spacing) {
      var nx = lastX,
        ny = lastY,
        np = lastPressure,
        df = (spacing - 0.001) / dist;
      for (var f = df; f <= 1.0; f += df) {
        nx = f * x + (1.0 - f) * lastX;
        ny = f * y + (1.0 - f) * lastY;
        np = f * pressure + (1.0 - f) * lastPressure;
        this.paintDab(nx, ny, np);
      }
      lastX = nx;
      lastY = ny;
      lastPressure = np;
    }
  };
  this.endStroke = function () {
    if (curBrush == null) {
      return;
    }
    mergeStrokeBuffer();
    paintingModes[curBrush.brushMode].endStroke();
    paintUndoArea.clipTo(this.getBounds());

    // Did we end up painting anything?
    if (!paintUndoArea.isEmpty()) {
      addUndo(new CPUndoPaint());

      /* Eagerly update the undo buffer for next time so we can avoid this lengthy
       * prepare at the beginning of a paint stroke
       */
      prepareForLayerPaintUndo();
    }
    endPaintingInteraction(false);
  };
  this.hasAlpha = function () {
    return fusion.hasAlpha();
  };

  /**
   * Get the artwork as a single flat PNG image.
   * 
   * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied to the drawing before
   * saving.
   * 
   * @return {string} A binary string of the PNG file data.
   */
  this.getFlatPNG = function (rotation) {
    this.fusionLayers();
    return fusion.getAsPNG(rotation);
  };

  /**
   * Get the artwork as a single flat PNG image.
   *
   * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied to the drawing before
   * saving.
   *
   * @return {Buffer}
   */
  this.getFlatPNGBuffer = function (rotation) {
    this.fusionLayers();
    return fusion.getAsPNGBuffer(rotation);
  };

  /**
   * Returns true if this artwork can be exactly represented as a simple transparent PNG (i.e. doesn't have multiple 
   * layers, and base layer's opacity is set to 100%).
   */
  this.isSimpleDrawing = function () {
    return layersRoot.layers.length == 1 && layersRoot.layers[0] instanceof _CPImageLayer.default && !layersRoot.layers[0].mask && layersRoot.layers[0].getEffectiveAlpha() == 100;
  };

  /**
   * Save the difference between the current layer and the undoImage / undoMask (within the undoArea) for undo, and
   * clear the undoArea.
   *
   * @constructor
   */
  function CPUndoPaint(paintedImage, paintedMask) {
    if (!paintedImage && !paintedMask) {
      paintedImage = !maskEditingMode;
      paintedMask = maskEditingMode;
    }
    var rect = paintUndoArea.clone(),
      xorImage = paintedImage ? undoImage.copyRectXOR(curLayer.image, rect) : null,
      xorMask = paintedMask ? undoMask.copyRectXOR(curLayer.mask, rect) : null;
    this.layer = curLayer;
    paintUndoArea.makeEmpty();
    this.undo = function () {
      if (xorImage) {
        this.layer.image.setRectXOR(xorImage, rect);
      }
      if (xorMask) {
        this.layer.mask.setRectXOR(xorMask, rect);
      }
      invalidateLayer(this.layer, rect, xorImage != null, xorMask != null);
    };
    this.redo = this.undo;
    this.getMemoryUsed = function (undone, param) {
      return (xorImage ? xorImage.length : 0) + (xorMask ? xorMask.length : 0);
    };
  }
  CPUndoPaint.prototype = Object.create(_CPUndo2.default.prototype);
  CPUndoPaint.prototype.constructor = CPUndoPaint;

  /**
   * Upon creation, adds a layer mask to the given layer.
   *
   * @param {CPLayer} layer
   *
   * @constructor
   */
  function CPActionAddLayerMask(layer) {
    var oldMaskLinked = layer.maskLinked,
      oldMaskVisible = layer.maskVisible;
    this.undo = function () {
      layer.setMask(null);
      layer.maskLinked = oldMaskLinked;
      layer.maskVisible = oldMaskVisible;
      artworkStructureChanged();
      that.setActiveLayer(layer, false);
    };
    this.redo = function () {
      var newMask = new _CPGreyBmp.default(that.width, that.height, 8);
      newMask.clearAll(255);
      layer.maskLinked = true;
      layer.maskVisible = true;
      layer.setMask(newMask);
      artworkStructureChanged();
      that.setActiveLayer(layer, true);
    };
    this.redo();
  }
  CPActionAddLayerMask.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionAddLayerMask.prototype.constructor = CPActionAddLayerMask;

  /**
      * Upon creation, removes, or applies and removes, the layer mask on the given layer.
      *
      * @param {CPLayer} layer
      * @param {boolean} apply
      *
      * @constructor
      */
  function CPActionRemoveLayerMask(layer, apply) {
    var oldMask = layer.mask,
      oldLayerImage,
      maskWasSelected = false;
    if (apply && layer instanceof _CPImageLayer.default) {
      oldLayerImage = layer.image.clone();
    } else {
      oldLayerImage = null;
    }
    maskWasSelected = curLayer == layer && maskEditingMode;
    this.undo = function () {
      layer.setMask(oldMask);
      if (oldLayerImage) {
        layer.image.copyPixelsFrom(oldLayerImage);
        invalidateLayer(layer, layer.image.getBounds(), true, false);
      }
      if (maskWasSelected) {
        that.setActiveLayer(layer, true);
      }
      artworkStructureChanged();
    };
    this.redo = function () {
      if (oldLayerImage) {
        _CPBlend.default.multiplyAlphaByMask(layer.image, 100, layer.mask);

        // Ensure thumbnail is repainted (artworkStructureChanged() doesn't repaint thumbs)
        invalidateLayer(layer, that.getBounds(), true, false);
      }
      if (maskWasSelected) {
        that.setActiveLayer(layer, false);
      }
      layer.setMask(null);
      artworkStructureChanged();
    };
    this.redo();
  }
  CPActionRemoveLayerMask.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionRemoveLayerMask.prototype.constructor = CPActionRemoveLayerMask;

  /**
   * Upon creation, adds a layer at the given index in the given layer group.
   *
   * @param {CPLayerGroup} parentGroup
   * @param {int} newLayerIndex
   * @param {CPLayer} newLayer
   *
   * @constructor
   */
  function CPActionAddLayer(parentGroup, newLayerIndex, newLayer) {
    var newLayerWasClipped = newLayer instanceof _CPImageLayer.default && newLayer.clip,
      toBelowLayer = parentGroup.layers[newLayerIndex],
      toBelowLayerWasClipped = toBelowLayer instanceof _CPImageLayer.default && toBelowLayer.clip,
      fromMask = maskEditingMode;
    this.undo = function () {
      parentGroup.removeLayer(newLayer);
      var newSelection = parentGroup.layers[newLayerIndex - 1] || parentGroup.layers[0] || parentGroup;
      if (toBelowLayer instanceof _CPImageLayer.default) {
        toBelowLayer.clip = toBelowLayerWasClipped;
      }
      if (newLayer instanceof _CPImageLayer.default) {
        newLayer.clip = newLayerWasClipped;
      }
      artworkStructureChanged();
      that.setActiveLayer(newSelection, fromMask);
    };
    this.redo = function () {
      parentGroup.insertLayer(newLayerIndex, newLayer);
      if (toBelowLayerWasClipped) {
        if (newLayer instanceof _CPImageLayer.default) {
          // Join a clipping group if we add an image layer in the middle of it
          newLayer.clip = true;
        } else {
          // If we add a group into a clipping group, break it
          toBelowLayer.clip = false;
        }
      }
      artworkStructureChanged();
      that.setActiveLayer(newLayer, false);
    };
    this.redo();
  }
  CPActionAddLayer.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionAddLayer.prototype.constructor = CPActionAddLayer;

  /**
      * Make a copy of the currently selected layer and add the new layer on top of the current layer.
      * 
      * @param {CPLayer} sourceLayer
      * @constructor
      */
  function CPActionDuplicateLayer(sourceLayer) {
    var newLayer = sourceLayer.clone(),
      oldMask = maskEditingMode;
    this.undo = function () {
      newLayer.parent.removeLayer(newLayer);
      artworkStructureChanged();
      that.setActiveLayer(sourceLayer, oldMask);
    };
    this.redo = function () {
      var COPY_SUFFIX = " Copy";
      var newLayerName = sourceLayer.name;
      if (!newLayerName.endsWith(COPY_SUFFIX)) {
        newLayerName += COPY_SUFFIX;
      }
      newLayer.name = newLayerName;
      sourceLayer.parent.insertLayer(sourceLayer.parent.indexOf(sourceLayer) + 1, newLayer);
      artworkStructureChanged();
      that.setActiveLayer(newLayer, false);
    };
    this.redo();
  }
  CPActionDuplicateLayer.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionDuplicateLayer.prototype.constructor = CPActionDuplicateLayer;

  /**
   * @param {CPLayer} layer
   */
  function CPActionRemoveLayer(layer) {
    var oldGroup = layer.parent,
      oldIndex = oldGroup.indexOf(layer),
      oldMask = maskEditingMode,
      numLayersClippedAbove = 0;
    if (layer instanceof _CPImageLayer.default && !layer.clip) {
      for (var i = oldIndex + 1; i < oldGroup.layers.length; i++) {
        if (oldGroup.layers[i] instanceof _CPImageLayer.default && oldGroup.layers[i].clip) {
          numLayersClippedAbove++;
        } else {
          break;
        }
      }
    }
    this.undo = function () {
      oldGroup.insertLayer(oldIndex, layer);
      for (var _i5 = 0; _i5 < numLayersClippedAbove; _i5++) {
        oldGroup.layers[_i5 + oldIndex + 1].clip = true;
      }
      artworkStructureChanged();
      that.setActiveLayer(layer, oldMask);
    };
    this.redo = function () {
      // Release the clip of any layers who had us as their clipping root
      for (var _i6 = 0; _i6 < numLayersClippedAbove; _i6++) {
        oldGroup.layers[_i6 + oldIndex + 1].clip = false;
      }
      oldGroup.removeLayerAtIndex(oldIndex);
      var newSelectedLayer;

      /* Attempt to select the layer underneath the one that was removed, otherwise the one on top,
       * otherwise the group that contained the layer.
       */
      if (oldGroup.layers.length == 0) {
        newSelectedLayer = layer.parent;
      } else {
        newSelectedLayer = oldGroup.layers[Math.max(oldIndex - 1, 0)];
      }
      artworkStructureChanged();
      that.setActiveLayer(newSelectedLayer, false);
    };
    this.getMemoryUsed = function (undone, param) {
      return undone ? 0 : layer.getMemoryUsed();
    };
    this.redo();
  }
  CPActionRemoveLayer.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionRemoveLayer.prototype.constructor = CPActionRemoveLayer;

  /**
   * Merge the given group together to form an image layer.
   *
   * @param {CPLayerGroup} layerGroup
   * @constructor
   */
  function CPActionMergeGroup(layerGroup) {
    var oldGroupIndex = layerGroup.parent.indexOf(layerGroup),
      fromMask = maskEditingMode,
      mergedLayer = new _CPImageLayer.default(that.width, that.height, "");
    this.undo = function () {
      layerGroup.parent.setLayerAtIndex(oldGroupIndex, layerGroup);
      artworkStructureChanged();
      that.setActiveLayer(layerGroup, fromMask);
    };
    this.redo = function () {
      layerGroup.parent.setLayerAtIndex(oldGroupIndex, mergedLayer);
      artworkStructureChanged();
      that.setActiveLayer(mergedLayer, false);
    };
    this.getMemoryUsed = function (undone, param) {
      return undone ? 0 : layerGroup.getMemoryUsed();
    };
    var blendTree = new _CPBlendTree.default(layerGroup, that.width, that.height, false),
      blended;
    blendTree.buildTree();
    blended = blendTree.blendTree();
    mergedLayer.name = layerGroup.name;
    mergedLayer.alpha = blended.alpha;
    mergedLayer.image = blended.image;
    mergedLayer.blendMode = blended.blendMode;
    mergedLayer.mask = blended.mask;
    if (mergedLayer.blendMode == _CPBlend.default.LM_PASSTHROUGH) {
      // Passthrough is not a meaningful blend mode for a single layer
      mergedLayer.blendMode = _CPBlend.default.LM_NORMAL;
    }
    this.redo();
  }
  CPActionMergeGroup.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionMergeGroup.prototype.constructor = CPActionMergeGroup;

  /**
   * Merge the top layer onto the under layer and remove the top layer.
   *
   * @param {CPImageLayer} topLayer
   * @constructor
   */
  function CPActionMergeDownLayer(topLayer) {
    var group = topLayer.parent,
      underLayer = group.layers[group.indexOf(topLayer) - 1],
      mergedLayer = new _CPImageLayer.default(that.width, that.height, ""),
      fromMask = maskEditingMode;
    this.undo = function () {
      var mergedIndex = group.indexOf(mergedLayer);
      group.removeLayerAtIndex(mergedIndex);
      group.insertLayer(mergedIndex, topLayer);
      group.insertLayer(mergedIndex, underLayer);
      artworkStructureChanged();
      that.setActiveLayer(topLayer, fromMask);
    };
    this.redo = function () {
      mergedLayer.copyFrom(underLayer);
      if (topLayer.getEffectiveAlpha() > 0) {
        // Ensure base layer has alpha 100, and apply its mask, ready for blending
        if (mergedLayer.mask) {
          _CPBlend.default.multiplyAlphaByMask(mergedLayer.image, mergedLayer.alpha, mergedLayer.mask);
          mergedLayer.mask = null;
        } else {
          _CPBlend.default.multiplyAlphaBy(mergedLayer.image, mergedLayer.alpha);
        }
        mergedLayer.alpha = 100;
        _CPBlend.default.fuseImageOntoImage(mergedLayer.image, true, topLayer.image, topLayer.alpha, topLayer.blendMode, topLayer.getBounds(), topLayer.mask);
      }
      var underIndex = group.indexOf(underLayer);

      // Remove both of the layers to be merged
      group.removeLayerAtIndex(underIndex);
      group.removeLayerAtIndex(underIndex);

      // And put our new one in its place
      group.insertLayer(underIndex, mergedLayer);
      artworkStructureChanged();
      that.setActiveLayer(mergedLayer, false);
    };
    this.getMemoryUsed = function (undone, param) {
      return undone ? 0 : topLayer.getMemoryUsed() + mergedLayer.getMemoryUsed();
    };
    this.redo();
  }
  CPActionMergeDownLayer.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionMergeDownLayer.prototype.constructor = CPActionMergeDownLayer;
  function CPActionMergeAllLayers() {
    var oldActiveLayer = that.getActiveLayer(),
      oldRootLayers = layersRoot.layers.slice(0),
      // Clone old layers array
      flattenedLayer = new _CPImageLayer.default(that.width, that.height, "");
    this.undo = function () {
      layersRoot.layers = oldRootLayers.slice(0);
      artworkStructureChanged();
      that.setActiveLayer(oldActiveLayer, false);
    };
    this.redo = function () {
      var oldFusion = that.fusionLayers();
      flattenedLayer.copyImageFrom(oldFusion);
      layersRoot.clearLayers();

      // Generate the name after the document is empty (so it can be "Layer 1")
      flattenedLayer.setName(that.getDefaultLayerName(false));
      layersRoot.addLayer(flattenedLayer);
      artworkStructureChanged();
      that.setActiveLayer(flattenedLayer, false);
    };
    this.getMemoryUsed = function (undone, param) {
      return oldRootLayers.map(function (layer) {
        return layer.getMemoryUsed();
      }).reduce(sum, 0);
    };
    this.redo();
  }
  CPActionMergeAllLayers.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionMergeAllLayers.prototype.constructor = CPActionMergeAllLayers;

  /**
      * Move the layer to the given position in the layer tree.
      *
      * @param {CPLayer} layer
      * @param {CPLayerGroup} toGroup - The group that the layer will be a child of after moving
      * @param {int} toIndex - The index of the layer inside the destination group that the layer will be below after the
      *                        move.
      * @constructor
      */
  function CPActionRelocateLayer(layer, toGroup, toIndex) {
    var fromGroup = layer.parent,
      fromIndex = layer.parent.indexOf(layer),
      fromMask = maskEditingMode,
      fromBelowLayer = fromGroup.layers[fromGroup.indexOf(layer) + 1],
      toBelowLayer = toGroup.layers[toIndex],
      wasClipped = layer instanceof _CPImageLayer.default && layer.clip,
      wasClippedTo = wasClipped ? layer.getClippingBase() : false;
    var fromNumLayersClippedAbove = 0,
      toNumLayersClippedAbove = 0;
    if (layer instanceof _CPImageLayer.default && !layer.clip) {
      // Release the clip of any layers that had us as their clipping root
      for (var i = fromIndex + 1; i < fromGroup.layers.length; i++) {
        if (fromGroup.layers[i] instanceof _CPImageLayer.default && fromGroup.layers[i].clip) {
          fromNumLayersClippedAbove++;
        } else {
          break;
        }
      }
    } else if (layer instanceof _CPLayerGroup.default) {
      // If we move a group into the middle of a clipping group, release the clip of the layers above
      for (var _i7 = toIndex; _i7 < toGroup.layers.length; _i7++) {
        if (toGroup.layers[_i7] instanceof _CPImageLayer.default && toGroup.layers[_i7].clip) {
          toNumLayersClippedAbove++;
        } else {
          break;
        }
      }
    }
    this.undo = function () {
      layer.parent.removeLayer(layer);
      var newIndex = fromBelowLayer ? fromGroup.indexOf(fromBelowLayer) : fromGroup.layers.length;
      fromGroup.insertLayer(newIndex, layer);
      if (layer instanceof _CPImageLayer.default) {
        layer.clip = wasClipped;
      }
      for (var _i8 = 0; _i8 < fromNumLayersClippedAbove; _i8++) {
        fromGroup.layers[_i8 + fromIndex + 1].clip = true;
      }
      for (var _i9 = 0; _i9 < toNumLayersClippedAbove; _i9++) {
        toGroup.layers[_i9 + toIndex].clip = true;
      }
      artworkStructureChanged();
      that.setActiveLayer(layer, fromMask);
    };
    this.redo = function () {
      for (var _i10 = 0; _i10 < fromNumLayersClippedAbove; _i10++) {
        fromGroup.layers[_i10 + fromIndex + 1].clip = false;
      }
      layer.parent.removeLayer(layer);
      var newIndex = toBelowLayer ? toGroup.indexOf(toBelowLayer) : toGroup.layers.length;
      toGroup.insertLayer(newIndex, layer);
      for (var _i11 = 0; _i11 < toNumLayersClippedAbove; _i11++) {
        toGroup.layers[_i11 + newIndex + 1].clip = false;
      }
      if (layer instanceof _CPImageLayer.default) {
        /*
         * Release the layer clip if we move the layer somewhere it won't be clipped onto its original base
         */
        if (layer.clip && layer.getClippingBase() != wasClippedTo) {
          layer.clip = false;
        }

        // If we're moving into the middle of a new clipping group, join the clip
        if (toBelowLayer instanceof _CPImageLayer.default && toBelowLayer.clip) {
          layer.clip = true;
        }
      }
      for (var _i12 = 0; _i12 < toNumLayersClippedAbove; _i12++) {
        toGroup.layers[_i12 + newIndex + 1].clip = false;
      }
      artworkStructureChanged();

      // TODO if moving to a collapsed group, select the group rather than the layer
      that.setActiveLayer(layer, false);
    };
    this.redo();
  }
  CPActionRelocateLayer.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionRelocateLayer.prototype.constructor = CPActionRelocateLayer;

  /**
   * @param {string} propertyName
   * @param {boolean} invalidatesLayer
   *
   * @returns {typeof CPUndo}
   */
  function generateLayerPropertyChangeAction(propertyName, invalidatesLayer) {
    var capitalPropertyName = capitalizeFirst(propertyName),
      ChangeAction = function ChangeAction(layers, newValue) {
        if (!Array.isArray(layers)) {
          layers = [layers];
        }
        this.layers = layers;
        this.from = this.layers.map(function (layer) {
          return layer["get" + capitalPropertyName]();
        });
        this.to = newValue;
        this.redo();
      };
    ChangeAction.prototype = Object.create(_CPUndo2.default.prototype);
    ChangeAction.prototype.constructor = ChangeAction;
    ChangeAction.prototype.undo = function () {
      var _this = this;
      this.layers.forEach(function (layer, index) {
        return layer["set" + capitalPropertyName](_this.from[index]);
      });
      this.layers.forEach(function (layer) {
        return layerPropertyChanged(layer, propertyName, !invalidatesLayer);
      });
    };
    ChangeAction.prototype.redo = function () {
      var _this2 = this;
      this.layers.forEach(function (layer) {
        return layer["set" + capitalPropertyName](_this2.to);
      });
      this.layers.forEach(function (layer) {
        return layerPropertyChanged(layer, propertyName, !invalidatesLayer);
      });
    };
    ChangeAction.prototype.merge = function (u) {
      if (u instanceof ChangeAction && arrayEquals(this.layers, u.layers)) {
        this.to = u.to;
        return true;
      }
      return false;
    };
    ChangeAction.prototype.noChange = function () {
      for (var i = 0; i < this.from.length; i++) {
        if (this.from[i] != this.to) {
          return false;
        }
      }
      return true;
    };
    return ChangeAction;
  }
  var CPActionChangeLayerAlpha = generateLayerPropertyChangeAction("alpha", true),
    CPActionChangeLayerMode = generateLayerPropertyChangeAction("blendMode", true),
    CPActionChangeLayerVisible = generateLayerPropertyChangeAction("visible", true),
    CPActionChangeLayerClip = generateLayerPropertyChangeAction("clip", true),
    CPActionChangeLayerMaskVisible = generateLayerPropertyChangeAction("maskVisible", true),
    CPActionChangeLayerName = generateLayerPropertyChangeAction("name", false),
    CPActionChangeLayerLockAlpha = generateLayerPropertyChangeAction("lockAlpha", false),
    CPActionChangeLayerMaskLinked = generateLayerPropertyChangeAction("maskLinked", false);

  /**
   * @param {CPRect} from
   * @param {CPRect} to
   *
   * @constructor
   */
  function CPUndoRectangleSelection(from, to) {
    from = from.clone();
    to = to.clone();
    this.undo = function () {
      that.setSelection(from);
      // TODO this is just because CPCanvas doesn't know when to repaint the selection box
      callListenersUpdateRegion(that.getBounds());
    };
    this.redo = function () {
      that.setSelection(to);
      callListenersUpdateRegion(that.getBounds());
    };
    this.noChange = function () {
      return from.equals(to);
    };
  }
  CPUndoRectangleSelection.prototype = Object.create(_CPUndo2.default.prototype);
  CPUndoRectangleSelection.prototype.constructor = CPUndoRectangleSelection;
  var CPActionTransformSelection = /*#__PURE__*/function (_CPUndo) {
    _inherits(CPActionTransformSelection, _CPUndo);
    var _super = _createSuper(CPActionTransformSelection);
    function CPActionTransformSelection() {
      var _this3;
      _classCallCheck(this, CPActionTransformSelection);
      _this3 = _super.call(this);

      /**
       * The layer we're moving (which might be an image layer or a whole group of layers).
       *
       * @type {CPLayer}
       */
      _this3.layer = curLayer;

      /**
       * @type {CPRect}
       */
      _this3.fromSelection = that.getSelection();
      _this3.fromMaskMode = maskEditingMode;
      _this3.movingWholeLayer = _this3.fromSelection.isEmpty();
      _this3.movingImage = !maskEditingMode || _this3.movingWholeLayer && _this3.layer.maskLinked;
      _this3.movingMask = maskEditingMode || _this3.movingWholeLayer && _this3.layer.maskLinked;
      _this3.hasFullUndo = false;

      /**
       * Set to true for transformations which will clear the pixels of the source rectangle (i.e. moves)
       * @type {boolean}
       */
      _this3.erasesSourceRect = false;

      /**
       * The rectangle we transformed onto in a previous iteration.
       *
       * @type {CPRect}
       */
      _this3.dstRect = new _CPRect.default(0, 0, 0, 0);

      /**
       * @typedef {Object} LayerMoveInfo
       *
       * @property {CPLayer} layer
       * @property {boolean} moveImage
       * @property {boolean} moveMask
       *
       * We either have these full undos which cover the whole layer area:
       *
       * @property {?CPColorBmp} imageUndo
       * @property {?CPGreyBmp} maskUndo
       *
       * Or else we have this map from rectangles to images which cover the dirtied areas only.
       *
       * @property {Map} imageRect
       * @property {Map} maskRect
       */

      /**
       * A list of the layers we're moving, and their properties.
       *
       * @type {LayerMoveInfo[]}
       */
      _this3.movingLayers = [{
        layer: _this3.layer,
        moveImage: _this3.layer instanceof _CPImageLayer.default && _this3.movingImage,
        moveMask: _this3.layer.mask !== null && _this3.movingMask,
        imageRect: new Map(),
        maskRect: new Map()
      }];

      // Moving the "image" of a group means to move all of its children
      if (_this3.layer instanceof _CPLayerGroup.default && _this3.movingImage && _this3.movingWholeLayer) {
        _this3.movingLayers = _this3.movingLayers.concat(_this3.layer.getLinearizedLayerList(false).map(function (layer) {
          return {
            layer: layer,
            moveImage: layer instanceof _CPImageLayer.default,
            moveMask: layer.mask !== null && layer.maskLinked,
            imageRect: new Map(),
            maskRect: new Map()
          };
        }));
      }

      // Only need to transform the non-transparent pixels
      var occupiedSpace = new _CPRect.default(0, 0, 0, 0);
      if (_this3.movingWholeLayer) {
        /**
         * @type {CPRect}
         */
        _this3.srcRect = that.getBounds();
        for (var i = 0; i < _this3.movingLayers.length && !occupiedSpace.equals(_this3.srcRect); i++) {
          var layerInfo = _this3.movingLayers[i];
          if (layerInfo.moveMask) {
            // Find the non-white pixels, since we'll be erasing the moved area with white
            occupiedSpace.union(layerInfo.layer.mask.getValueBounds(_this3.srcRect, 0xFF));
          }
          if (layerInfo.moveImage) {
            occupiedSpace.union(layerInfo.layer.image.getNonTransparentBounds(_this3.srcRect));
          }
        }
      } else {
        _this3.srcRect = _this3.fromSelection.clone();
        for (var _i13 = 0; _i13 < _this3.movingLayers.length && !occupiedSpace.equals(_this3.srcRect); _i13++) {
          var _layerInfo = _this3.movingLayers[_i13];
          if (_layerInfo.moveMask) {
            // Find the non-black pixels, since we'll be erasing the moved area with black
            occupiedSpace.union(_layerInfo.layer.mask.getValueBounds(_this3.srcRect, 0x00));
          }
          if (_layerInfo.moveImage) {
            occupiedSpace.union(_layerInfo.layer.image.getNonTransparentBounds(_this3.srcRect));
          }
        }
      }
      _this3.srcRect = occupiedSpace;
      return _this3;
    }

    /**
        * @override
        */
    _createClass(CPActionTransformSelection, [{
      key: "undo",
      value: function undo() {
        var _this4 = this;
        var
        // The region we're repainting for undo
        restoreRegions = [];
        if (!this.dstRect.isEmpty()) {
          restoreRegions.push(this.dstRect);
        }
        if (this.erasesSourceRect) {
          restoreRegions.push(this.srcRect);
          restoreRegions = _CPRect.default.union(restoreRegions);
        }
        this.movingLayers.forEach(function (layerInfo) {
          if (_this4.hasFullUndo) {
            restoreRegions.forEach(function (region) {
              if (layerInfo.moveImage) {
                layerInfo.layer.image.copyBitmapRect(layerInfo.imageUndo, region.left, region.top, region);
              }
              if (layerInfo.moveMask) {
                layerInfo.layer.mask.copyBitmapRect(layerInfo.maskUndo, region.left, region.top, region);
              }
            });
          } else {
            if (layerInfo.moveImage) {
              layerInfo.imageRect.forEach(function (image, rect) {
                layerInfo.layer.image.copyBitmapRect(image, rect.left, rect.top, image.getBounds());
              });
            }
            if (layerInfo.moveMask) {
              layerInfo.maskRect.forEach(function (mask, rect) {
                layerInfo.layer.mask.copyBitmapRect(mask, rect.left, rect.top, mask.getBounds());
              });
            }
          }
        });
        invalidateLayer(this.movingLayers.map(function (layerInfo) {
          return layerInfo.layer;
        }), restoreRegions.reduce(function (a, b) {
          return a.getUnion(b);
        }, new _CPRect.default(0, 0, 0, 0)), true, true);

        // Call this after we're done with restoreRegions, since it might be a part of that array.
        this.dstRect.makeEmpty();
        that.setSelection(this.fromSelection);
        that.setActiveLayer(this.layer, this.fromMaskMode);

        /*
         * FIXME Required because in the case of a copy, we don't invalidate the source rect in the fusion, so the canvas
         * won't end up repainting the selection rectangle there.
         */
        callListenersSelectionChange();
      }
    }, {
      key: "getMemoryUsed",
      value: function getMemoryUsed(undone, param) {
        return this.movingLayers.map(function (layerInfo) {
          var images = [layerInfo.imageUndo, layerInfo.maskUndo, layerInfo.imageRect, layerInfo.maskRect];
          return images.map(function (image) {
            return image ? image.getMemorySize() : 0;
          }).reduce(sum, 0);
        }).reduce(sum, 0);
      }

      /**
          * Called internally to reverse the effects of compact()
          */
    }, {
      key: "buildFullUndo",
      value: function buildFullUndo() {
        if (!this.hasFullUndo) {
          this.movingLayers.forEach(function (layerInfo) {
            if (layerInfo.moveImage) {
              layerInfo.imageUndo = layerInfo.layer.image.clone();
            }
            if (layerInfo.moveMask) {
              layerInfo.maskUndo = layerInfo.layer.mask.clone();
            }
            layerInfo.imageRect.clear();
            layerInfo.maskRect.clear();
          });
          this.hasFullUndo = true;
        }
      }

      /**
       * Called when we're no longer the top operation in the undo stack, so that we can optimize for lower memory
       * usage instead of faster revision speed
       */
    }, {
      key: "compact",
      value: function compact() {
        if (this.hasFullUndo) {
          // Replace our copy of the whole layers with just a copy of the areas we damaged
          var damagedRects = [];
          if (!this.dstRect.isEmpty()) {
            damagedRects.push(this.dstRect);
          }
          if (this.erasesSourceRect) {
            damagedRects.push(this.srcRect);
            damagedRects = _CPRect.default.union(damagedRects);
          }
          this.movingLayers.forEach(function (layerInfo) {
            layerInfo.imageRect.clear();
            layerInfo.maskRect.clear();
            damagedRects.forEach(function (rect) {
              if (layerInfo.moveImage) {
                layerInfo.imageRect.set(rect, layerInfo.imageUndo.cloneRect(rect));
              }
              if (layerInfo.moveMask) {
                layerInfo.maskRect.set(rect, layerInfo.maskUndo.cloneRect(rect));
              }
            });

            // Discard the full-size undos
            layerInfo.imageUndo = null;
            layerInfo.maskUndo = null;
          });
          this.hasFullUndo = false;
        }
      }
    }]);
    return CPActionTransformSelection;
  }(_CPUndo2.default);
  /**
   * Transforms the currently selected region of the current layer by the given affine transform.
   *
   * @param {CPTransform} affineTransform - Transform to apply
   * @param {string} interpolation - "smooth" or "sharp"
   */
  var CPActionAffineTransformSelection = /*#__PURE__*/function (_CPActionTransformSel) {
    _inherits(CPActionAffineTransformSelection, _CPActionTransformSel);
    var _super2 = _createSuper(CPActionAffineTransformSelection);
    function CPActionAffineTransformSelection(affineTransform, interpolation) {
      var _this5;
      _classCallCheck(this, CPActionAffineTransformSelection);
      _this5 = _super2.call(this);
      _this5.erasesSourceRect = true;
      _this5.affineTransform = affineTransform.clone();
      _this5.interpolation = interpolation || "smooth";

      /**
       * A canvas for composing the transform onto
       * @type {HTMLCanvasElement}
       */
      _this5.composeCanvas = null;

      /**
       * @type {CanvasRenderingContext2D}
       */
      _this5.composeCanvasContext = null;
      return _this5;
    }

    /**
        * @override
        */
    _createClass(CPActionAffineTransformSelection, [{
      key: "buildFullUndo",
      value: function buildFullUndo() {
        var _this6 = this;
        if (!this.hasFullUndo) {
          _get(_getPrototypeOf(CPActionAffineTransformSelection.prototype), "buildFullUndo", this).call(this);

          // Make a copy of just the source rectangles in their own canvases so we can transform them layer with Canvas APIs
          this.movingLayers.forEach(function (layerInfo) {
            if (layerInfo.moveImage) {
              var canvas = (0, _Canvas.createCanvas)(_this6.srcRect.getWidth(), _this6.srcRect.getHeight()),
                context = canvas.getContext("2d");
              context.putImageData(layerInfo.layer.image.getImageData(), -_this6.srcRect.left, -_this6.srcRect.top, _this6.srcRect.left, _this6.srcRect.top, _this6.srcRect.getWidth(), _this6.srcRect.getHeight());
              layerInfo.imageSourceCanvas = canvas;
            }
            if (layerInfo.moveMask) {
              var _canvas = (0, _Canvas.createCanvas)(_this6.srcRect.getWidth(), _this6.srcRect.getHeight()),
                _context = _canvas.getContext("2d");
              _context.putImageData(layerInfo.layer.mask.getImageData(_this6.srcRect.left, _this6.srcRect.top, _this6.srcRect.getWidth(), _this6.srcRect.getHeight()), 0, 0);
              layerInfo.maskSourceCanvas = _canvas;
            }
          });
          this.composeCanvas = (0, _Canvas.createCanvas)(that.width, that.height);

          // willReadFrequently オプションを使用して Canvas コンテキストを取得
          this.composeCanvasContext = this.composeCanvas.getContext("2d", {
            willReadFrequently: true
          });
          (0, _CPPolyfill.setCanvasInterpolation)(this.composeCanvasContext, this.interpolation == "smooth");

          /* Calling getImageData on the canvas forces Chrome to disable hardware acceleration for it, see
           * GetImageDataForcesNoAcceleration in https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/graphics/ExpensiveCanvasHeuristicParameters.h
           *
           * We normally call this as part of finishing up our redo(), which means that our first redo() would
           * use hardware acceleration, and all subsequent redo()s would use software emulation, with subtly
           * different pixel results.
           *
           * Force our results to be consistent by calling that right now:
           */
          this.junk = this.composeCanvasContext.getImageData(0, 0, 1, 1);
        }
      }
    }, {
      key: "redo",
      value: function redo() {
        var _this7 = this;
        this.buildFullUndo();
        var oldDstRect = this.dstRect.clone(),
          dstCorners = this.srcRect.toPoints();
        this.affineTransform.transformPoints(dstCorners);
        this.dstRect.set(_CPRect.default.createBoundingBox(dstCorners).roundContain().clipTo(that.getBounds()));
        var
          /* The area of original image data that we need to compose the transformed area onto (i.e. excluding the
           * source area we're just going to erase)
           */
          composeOntoRects = _CPRect.default.subtract(this.dstRect, this.srcRect),
          /* We need to erase the area we're moving from.
           *
           * If this is an amend(), we've already erased the source rectangle (except for the part occupied by the
           * old destination rectangle)
           *
           * We don't need to erase the area we're planning to overwrite later (dstRect)
           */
          eraseRects = _CPRect.default.subtract(oldDstRect.isEmpty() ? this.srcRect : this.srcRect.getIntersection(oldDstRect), this.dstRect),
          // The region of the source rectangle that we want to compose onto
          srcComposeRect = this.srcRect.getIntersection(this.dstRect),
          // Regions from oldDstRect in the layer data that we need to clean up after our operation
          repairOldRects = _CPRect.default.subtract(oldDstRect, [this.dstRect, this.srcRect]),
          // The region which needs repainting (from the previous redo() and after our redo())
          invalidateRect = this.srcRect.getUnion(this.dstRect).getUnion(oldDstRect);
        this.movingLayers.forEach(function (layerInfo) {
          // Erase the source area that won't be replaced by the canvas dest area
          eraseRects.forEach(function (rect) {
            if (layerInfo.moveImage) {
              layerInfo.layer.image.clearRect(rect, EMPTY_LAYER_COLOR);
            }
            if (layerInfo.moveMask) {
              if (_this7.movingWholeLayer) {
                layerInfo.layer.mask.clearRect(rect, 0xFF);
              } else {
                layerInfo.layer.mask.clearRect(rect, EMPTY_MASK_COLOR);
              }
            }
          });
          if (!_this7.dstRect.isEmpty()) {
            if (layerInfo.moveImage) {
              var imageData = layerInfo.imageUndo.getImageData();

              /*
               * Make a fresh copy of the undo data into the Canvas so we can compose the transformed data on top of
               * it (except the source region since we'll just erase that).
               */
              composeOntoRects.forEach(function (rect) {
                _this7.composeCanvasContext.putImageData(imageData, 0, 0, rect.left, rect.top, rect.getWidth(), rect.getHeight());
              });

              // Erase the portion of the source region that we're going to compose onto
              _this7.composeCanvasContext.clearRect(srcComposeRect.left, srcComposeRect.top, srcComposeRect.getWidth(), srcComposeRect.getHeight());
              _this7.composeCanvasContext.save();

              // Apply the transform when drawing the transformed fragment
              _this7.composeCanvasContext.setTransform(_this7.affineTransform.m[0], _this7.affineTransform.m[1], _this7.affineTransform.m[2], _this7.affineTransform.m[3], _this7.affineTransform.m[4], _this7.affineTransform.m[5]);
              _this7.composeCanvasContext.drawImage(layerInfo.imageSourceCanvas, _this7.srcRect.left, _this7.srcRect.top);
              _this7.composeCanvasContext.restore();

              // Save that to the layer data
              layerInfo.layer.image.copyBitmapRect(new _CPColorBmp.default(_this7.composeCanvasContext.getImageData(_this7.dstRect.left, _this7.dstRect.top, _this7.dstRect.getWidth(), _this7.dstRect.getHeight())), _this7.dstRect.left, _this7.dstRect.top, new _CPRect.default(0, 0, _this7.dstRect.getWidth(), _this7.dstRect.getHeight()));
            }
            if (layerInfo.moveMask) {
              composeOntoRects.forEach(function (rect) {
                _this7.composeCanvasContext.putImageData(layerInfo.layer.mask.getImageData(rect.left, rect.top, rect.getWidth(), rect.getHeight()), rect.left, rect.top);
              });
              if (_this7.movingWholeLayer) {
                _this7.composeCanvasContext.fillStyle = '#FFF';
              } else {
                _this7.composeCanvasContext.fillStyle = '#000';
              }
              _this7.composeCanvasContext.fillRect(srcComposeRect.left, srcComposeRect.top, srcComposeRect.getWidth(), srcComposeRect.getHeight());
              _this7.composeCanvasContext.save();

              // TODO set blend mode to replace? We don't have any alpha in the source or dest images

              _this7.composeCanvasContext.setTransform(_this7.affineTransform.m[0], _this7.affineTransform.m[1], _this7.affineTransform.m[2], _this7.affineTransform.m[3], _this7.affineTransform.m[4], _this7.affineTransform.m[5]);
              _this7.composeCanvasContext.drawImage(layerInfo.maskSourceCanvas, _this7.srcRect.left, _this7.srcRect.top);
              _this7.composeCanvasContext.restore();
              layerInfo.layer.mask.pasteImageData(_this7.composeCanvasContext.getImageData(_this7.dstRect.left, _this7.dstRect.top, _this7.dstRect.getWidth(), _this7.dstRect.getHeight()), _this7.dstRect.left, _this7.dstRect.top);
            }
          }

          /*
           * Use the CPColorBmp/CPGreyBmp undo data to erase any leftovers from the previous redo(). We do this
           * instead of just copying from the canvas, since Canvas' getImageData/setImageData doesn't round-trip
           * (due to premultiplied alpha on some browsers/systems) and we want to avoid damaging areas we don't
           * need to touch.
           */
          repairOldRects.forEach(function (rect) {
            if (layerInfo.moveImage) {
              layerInfo.layer.image.copyBitmapRect(layerInfo.imageUndo, rect.left, rect.top, rect);
            }
            if (layerInfo.moveMask) {
              layerInfo.layer.mask.copyBitmapRect(layerInfo.maskUndo, rect.left, rect.top, rect);
            }
          });
        });
        invalidateLayer(this.movingLayers.map(function (layerInfo) {
          return layerInfo.layer;
        }), invalidateRect, true, true);

        // Transform the selection rect to enclose the transformed selection
        if (!this.fromSelection.isEmpty()) {
          var toSelectionPoints = this.fromSelection.toPoints(),
            toSelectionRect;
          this.affineTransform.transformPoints(toSelectionPoints);
          toSelectionRect = _CPRect.default.createBoundingBox(toSelectionPoints);
          toSelectionRect.roundNearest();
          that.setSelection(toSelectionRect);
          callListenersSelectionChange();
        }
        that.setActiveLayer(this.layer, this.fromMaskMode);
      }

      /**
       * Replace the transform with the given one.
       *
       * @override
       *
       * @param {CPTransform} affineTransform
       */
    }, {
      key: "amend",
      value: function amend(affineTransform) {
        if (!this.hasFullUndo) {
          /* redo() requires a full undo to be available to update the transform. It'll effectively undo the
           * current transform for us while it does the redo.
           *
           * If there's no full undo, for redo() to be able to generate it we'll have to undo() for them first.
           */
          this.undo();
        }
        this.affineTransform = affineTransform.clone();
        this.redo();
      }
    }, {
      key: "setInterpolation",
      value: function setInterpolation(newInterpolation) {
        if (newInterpolation != this.interpolation) {
          this.interpolation = newInterpolation;
          if (this.composeCanvasContext) {
            (0, _CPPolyfill.setCanvasInterpolation)(this.composeCanvasContext, this.interpolation == "smooth");
          }
          this.undo();
          this.redo();
        }
      }

      /**
       * @override
       */
    }, {
      key: "compact",
      value: function compact() {
        _get(_getPrototypeOf(CPActionAffineTransformSelection.prototype), "compact", this).call(this);

        // Discard our temporary drawing canvases
        this.composeCanvas = null;
        this.composeCanvasContext = null;
        this.movingLayers.forEach(function (layerInfo) {
          return layerInfo.imageSourceCanvas = null;
        });
      }

      /**
       * @override
       */
    }, {
      key: "getMemoryUsed",
      value: function getMemoryUsed(undone, param) {
        var result = _get(_getPrototypeOf(CPActionAffineTransformSelection.prototype), "getMemoryUsed", this).call(this, undone, param);
        result += memoryUsedByCanvas(this.composeCanvas);
        result += this.movingLayers.map(function (layerInfo) {
          return memoryUsedByCanvas(layerInfo.imageSourceCanvas);
        }).reduce(sum, 0);
        return result;
      }

      /**
          * Get a copy of the affine transform.
          */
    }, {
      key: "getTransform",
      value: function getTransform() {
        return this.affineTransform.clone();
      }

      /**
       * Get a copy of the initial document rectangle (before the transform was applied)
       *
       * @returns {CPRect}
       */
    }, {
      key: "getInitialTransformRect",
      value: function getInitialTransformRect() {
        return this.srcRect.clone();
      }

      /**
       * Get a copy of the initial user selection rectangle (before the transform was applied). Can be empty if
       * the user didn't have anything selected before the transform began.
       *
       * @returns {CPRect}
       */
    }, {
      key: "getInitialSelectionRect",
      value: function getInitialSelectionRect() {
        return this.fromSelection.clone();
      }
    }]);
    return CPActionAffineTransformSelection;
  }(CPActionTransformSelection);
  /**
   * Upon creation, moves the currently selected region of the current layer by the given offset
   *
   * @param {?CPRect} srcRect - Rectangle that will be moved, or an empty rectangle to move whole layer.
   * @param {int} offsetX
   * @param {int} offsetY
   * @param {boolean} copy - True if we should copy to the destination instead of move.
   * @constructor
   */
  var CPActionMoveSelection = /*#__PURE__*/function (_CPActionTransformSel2) {
    _inherits(CPActionMoveSelection, _CPActionTransformSel2);
    var _super3 = _createSuper(CPActionMoveSelection);
    function CPActionMoveSelection(offsetX, offsetY, copy) {
      var _this8;
      _classCallCheck(this, CPActionMoveSelection);
      _this8 = _super3.call(this);
      _this8.offsetX = offsetX;
      _this8.offsetY = offsetY;
      _this8.erasesSourceRect = !copy;
      return _this8;
    }
    _createClass(CPActionMoveSelection, [{
      key: "redo",
      value: function redo() {
        var _this9 = this;
        var oldDestRect = this.dstRect.clone(),
          destRectUnclipped,
          /**
              * Do we have anything to repaint from a previous call to redo()? (if we are called by amend())
              * @type {CPRect[]}
              */
          restoreFromUndoAreas,
          invalidateRegion = oldDestRect.clone(),
          eraseRegion = null;
        this.buildFullUndo();
        this.dstRect.set(this.srcRect);
        this.dstRect.translate(this.offsetX, this.offsetY);
        destRectUnclipped = this.dstRect.clone();
        this.dstRect.clipTo(that.getBounds());
        if (this.erasesSourceRect) {
          // We're moving, so erase the source region we're moving out of.
          if (oldDestRect.isEmpty()) {
            eraseRegion = this.srcRect;
          } else {
            /*
             * We've erased the source rect already in a previous redo(), so we only need to erase the damaged
             * area.
             */
            eraseRegion = this.srcRect.getIntersection(oldDestRect);
          }
          invalidateRegion.union(eraseRegion);
          restoreFromUndoAreas = oldDestRect.subtract(this.srcRect);
        } else {
          restoreFromUndoAreas = [oldDestRect];
        }
        this.movingLayers.forEach(function (layerInfo) {
          if (eraseRegion) {
            if (layerInfo.moveImage) {
              layerInfo.layer.image.clearRect(eraseRegion, EMPTY_LAYER_COLOR);
            }
            if (layerInfo.moveMask) {
              layerInfo.layer.mask.clearRect(eraseRegion, _this9.movingWholeLayer ? 0xFF : EMPTY_MASK_COLOR);
            }
          }
          restoreFromUndoAreas.forEach(function (restore) {
            if (layerInfo.moveImage) {
              layerInfo.layer.image.copyBitmapRect(layerInfo.imageUndo, restore.left, restore.top, restore);
            }
            if (layerInfo.moveMask) {
              layerInfo.layer.mask.copyBitmapRect(layerInfo.maskUndo, restore.left, restore.top, restore);
            }
          });

          /* Note that while we could copy image data from the layer itself onto the layer (instead of sourcing that
           * data from the undo buffers), this would require that pasteAlphaRect do the right thing when source and
           * dest rectangles overlap, which it doesn't.
           */
          if (layerInfo.moveImage) {
            _CPBlend.default.normalFuseImageOntoImageAtPosition(layerInfo.layer.image, layerInfo.imageUndo, destRectUnclipped.left, destRectUnclipped.top, _this9.srcRect);
          }
          if (layerInfo.moveMask) {
            layerInfo.layer.mask.copyBitmapRect(layerInfo.maskUndo, destRectUnclipped.left, destRectUnclipped.top, _this9.srcRect);
          }
        });
        invalidateRegion.union(this.dstRect);
        invalidateLayer(this.movingLayers.map(function (layerInfo) {
          return layerInfo.layer;
        }), invalidateRegion, true, true);
        if (!this.fromSelection.isEmpty()) {
          var toSelection = this.fromSelection.clone();
          toSelection.translate(this.offsetX, this.offsetY);
          that.setSelection(toSelection);
          callListenersSelectionChange();
        }
      }
    }, {
      key: "amend",
      value:
      /**
       * Move further by the given offset on top of the current offset.
       *
       * @param {int} offsetX
       * @param {int} offsetY
       */
      function amend(offsetX, offsetY) {
        if (!this.hasFullUndo) {
          this.undo();
        }
        this.offsetX += offsetX;
        this.offsetY += offsetY;
        this.redo();
      }
    }]);
    return CPActionMoveSelection;
  }(CPActionTransformSelection);
  /**
   * Cut the selected rectangle from the layer
   * 
   * @param {CPImageLayer} layer - Layer to cut from
   * @param {boolean} cutFromMask - True to cut from the mask of the layer, false to cut from the image
   * @param {CPRect} selection - The cut rectangle co-ordinates
   */
  function CPActionCut(layer, cutFromMask, selection) {
    var fromImage = cutFromMask ? layer.mask : layer.image,
      cutData = fromImage.cloneRect(selection);
    selection = selection.clone();
    this.undo = function () {
      fromImage.copyBitmapRect(cutData, selection.left, selection.top, cutData.getBounds());
      that.setActiveLayer(layer, cutFromMask);
      that.setSelection(selection);
      invalidateLayer(layer, selection, !cutFromMask, cutFromMask);
    };
    this.redo = function () {
      if (cutFromMask) {
        fromImage.clearRect(selection, EMPTY_MASK_COLOR);
      } else {
        fromImage.clearRect(selection, EMPTY_LAYER_COLOR);
      }
      clipboard = new _CPClip.default(cutData, selection.left, selection.top);
      that.setActiveLayer(layer, cutFromMask);
      that.emptySelection();
      invalidateLayer(layer, selection, !cutFromMask, cutFromMask);
    };
    this.getMemoryUsed = function (undone, param) {
      return cutData == param ? 0 : cutData.getMemorySize();
    };
    this.redo();
  }
  CPActionCut.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionCut.prototype.constructor = CPActionCut;

  /**
   * Paste the given clipboard onto the given layer.
   * 
   * @param {CPClip} clip
   */
  function CPActionPaste(clip) {
    var oldSelection = that.getSelection(),
      oldMask = maskEditingMode,
      newLayer = new _CPImageLayer.default(that.width, that.height, that.getDefaultLayerName(false)),
      oldLayer = curLayer,
      parentGroup = oldLayer.parent;
    this.undo = function () {
      parentGroup.removeLayer(newLayer);
      that.setSelection(oldSelection);
      artworkStructureChanged();
      that.setActiveLayer(oldLayer, oldMask);
    };
    this.redo = function () {
      var layerIndex = parentGroup.indexOf(oldLayer),
        sourceRect = clip.bmp.getBounds(),
        x,
        y;
      parentGroup.insertLayer(layerIndex + 1, newLayer);
      if (sourceRect.isInside(that.getBounds())) {
        x = clip.x;
        y = clip.y;
      } else {
        x = (that.width - clip.bmp.width) / 2 | 0;
        y = (that.height - clip.bmp.height) / 2 | 0;
      }
      if (clip.bmp instanceof _CPGreyBmp.default) {
        // Need to convert greyscale to color before we can paste
        var clone = new _CPColorBmp.default(clip.bmp.width, clip.bmp.height);
        clone.copyPixelsFromGreyscale(clip.bmp);
        newLayer.image.copyBitmapRect(clone, x, y, sourceRect);
      } else {
        newLayer.image.copyBitmapRect(clip.bmp, x, y, sourceRect);
      }
      that.emptySelection();
      artworkStructureChanged();
      that.setActiveLayer(newLayer, false);
    };
    this.getMemoryUsed = function (undone, param) {
      return clip.bmp == param ? 0 : clip.bmp.getMemorySize();
    };
    this.redo();
  }
  CPActionPaste.prototype = Object.create(_CPUndo2.default.prototype);
  CPActionPaste.prototype.constructor = CPActionPaste;
  paintingModes = [_CPBrushTool.CPBrushTool, _CPBrushTool.CPBrushToolEraser, _CPBrushTool.CPBrushToolDodge, _CPBrushTool.CPBrushToolBurn, _CPBrushTool.CPBrushToolWatercolor, _CPBrushTool.CPBrushToolBlur, _CPBrushTool.CPBrushToolSmudge, _CPBrushTool.CPBrushToolOil].map(function (modeFunc) {
    return new modeFunc(strokeBuffer, strokedRegion);
  });
  this.width = _width;
  this.height = _height;
}
;
CPArtwork.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPArtwork.prototype.constructor = CPArtwork;
CPArtwork.prototype.getBounds = function () {
  return new _CPRect.default(0, 0, this.width, this.height);
};
CPArtwork.prototype.isPointWithin = function (x, y) {
  return x >= 0 && y >= 0 && x < this.width && y < this.height;
};
CPArtwork.EDITING_MODE_IMAGE = 0;
CPArtwork.EDITING_MODE_MASK = 1;
module.exports = exports.default;

},{"../util/CPColor.js":58,"../util/CPPolyfill.js":60,"../util/CPRandom.js":62,"../util/CPRect.js":63,"../util/CPTransform.js":64,"../util/Canvas.js":2,"./CPBlend.js":5,"./CPBlendAdditional.js":6,"./CPBlendTree.js":7,"./CPBrushInfo.js":8,"./CPBrushManager.js":9,"./CPBrushTool.js":10,"./CPClip.js":12,"./CPColorBmp.js":13,"./CPGreyBmp.js":14,"./CPImageLayer.js":15,"./CPLayerGroup.js":17,"./CPMaskView.js":19,"./CPUndo.js":22,"wolfy87-eventemitter":314}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBitmap;
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * 
 * @param width
 * @param height
 * @constructor
 */
function CPBitmap(width, height) {
  // Width and height forced to integers
  this.width = width | 0;
  this.height = height | 0;
}
CPBitmap.prototype.getBounds = function () {
  return new _CPRect.default(0, 0, this.width, this.height);
};
CPBitmap.prototype.isInside = function (x, y) {
  return x >= 0 && y >= 0 && x < this.width && y < this.height;
};
module.exports = exports.default;

},{"../util/CPRect.js":63}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBlend;
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _CPLayer = _interopRequireDefault(require("./CPLayer.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// This file is generated, please see codegenerator/BlendGenerator.js!

function CPBlend() {}
var BYTES_PER_PIXEL = 4,
  ALPHA_BYTE_OFFSET = 3,
  softLightLUTSquare = new Array(256),
  softLightLUTSquareRoot = new Array(256);

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiplyOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - ((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - ((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - ((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiplyOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - ((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - ((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - ((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiplyOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiplyOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiplyOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - ((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - ((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - ((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiplyOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - ((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - ((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - ((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255) | 0);
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiplyOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiplyOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiply2OntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - Math.ceil((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - Math.ceil((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - Math.ceil((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255));
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiply2OntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - Math.ceil((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - Math.ceil((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - Math.ceil((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255));
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiply2OntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.multiply2OntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiply2OntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - Math.ceil((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - Math.ceil((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - Math.ceil((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255));
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiply2OntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color2 = void 0;
      if (alpha1) {
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 - Math.ceil((layer.data[pixIndex] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 - Math.ceil((layer.data[pixIndex + 1] ^ 0xFF) * color2 * alpha1 / (255 * 255));
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 - Math.ceil((layer.data[pixIndex + 2] ^ 0xFF) * color2 * alpha1 / (255 * 255));
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiply2OntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the multiply blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.multiply2OntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + (color1 * color2 * alpha12 / 255 | 0)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.normalOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0;
      if (alpha1) {
        if (alpha1 == 255) {
          fusion.data[pixIndex] = layer.data[pixIndex];
          fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
        } else {
          var invAlpha1 = 255 - alpha1;
          color1 = layer.data[pixIndex];
          fusion.data[pixIndex] = (color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 1] = (color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 2];
          fusion.data[pixIndex + 2] = (color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0;
        }
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.normalOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0;
      if (alpha1) {
        if (false) {
          fusion.data[pixIndex] = layer.data[pixIndex];
          fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
        } else {
          var invAlpha1 = 255 - alpha1;
          color1 = layer.data[pixIndex];
          fusion.data[pixIndex] = (color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 1] = (color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 2];
          fusion.data[pixIndex + 2] = (color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0;
        }
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.normalOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          realAlpha = alpha1 * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        fusion.data[pixIndex] = (layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.normalOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          realAlpha = alpha1 * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        fusion.data[pixIndex] = (layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.normalOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0;
      if (alpha1) {
        if (alpha1 == 255) {
          fusion.data[pixIndex] = layer.data[pixIndex];
          fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
        } else {
          var invAlpha1 = 255 - alpha1;
          color1 = layer.data[pixIndex];
          fusion.data[pixIndex] = (color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 1] = (color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 2];
          fusion.data[pixIndex + 2] = (color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0;
        }
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.normalOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0;
      if (alpha1) {
        if (false) {
          fusion.data[pixIndex] = layer.data[pixIndex];
          fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
        } else {
          var invAlpha1 = 255 - alpha1;
          color1 = layer.data[pixIndex];
          fusion.data[pixIndex] = (color1 * alpha1 + fusion.data[pixIndex] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 1];
          fusion.data[pixIndex + 1] = (color1 * alpha1 + fusion.data[pixIndex + 1] * invAlpha1) / 255 | 0;
          color1 = layer.data[pixIndex + 2];
          fusion.data[pixIndex + 2] = (color1 * alpha1 + fusion.data[pixIndex + 2] * invAlpha1) / 255 | 0;
        }
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.normalOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          realAlpha = alpha1 * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        fusion.data[pixIndex] = (layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.normalOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          realAlpha = alpha1 * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        fusion.data[pixIndex] = (layer.data[pixIndex] * realAlpha + fusion.data[pixIndex] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndex + 1] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndex + 2] * invAlpha) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.addOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.addOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.addOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0;

        // No need to clamp the color to 0...255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.addOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0;

        // No need to clamp the color to 0...255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.addOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.addOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.addOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0;

        // No need to clamp the color to 0...255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the add blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.addOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0;

        // No need to clamp the color to 0...255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex]) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1]) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2]) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.subtractOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.subtractOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.subtractOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2;

        // No need to clamp the color to 255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.subtractOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2;

        // No need to clamp the color to 255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.subtractOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.subtractOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0;
      if (alpha1) {
        fusion.data[pixIndex] = fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 1] = fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] / 255 - alpha1 | 0;
        fusion.data[pixIndex + 2] = fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] / 255 - alpha1 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.subtractOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2;

        // No need to clamp the color to 255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the subtract blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.subtractOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2;

        // No need to clamp the color to 255 since we're writing to a clamped array anyway
        fusion.data[pixIndex] = (alpha2 * fusion.data[pixIndex] + alpha1 * layer.data[pixIndex] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 1] = (alpha2 * fusion.data[pixIndex + 1] + alpha1 * layer.data[pixIndex + 1] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + 2] = (alpha2 * fusion.data[pixIndex + 2] + alpha1 * layer.data[pixIndex + 2] - alpha12) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.screenOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.screenOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.screenOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.screenOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.screenOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.screenOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 1] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color2 ^ 0xFF) * invAlpha1 + (layer.data[pixIndex + 2] ^ 0xFF) * (color2 ^ 0xFF) * alpha1 / 255) / 255;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.screenOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the screen blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.screenOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = 0xFF ^ ((color1 ^ 0xFF) * alpha1n2 + (color2 ^ 0xFF) * alphan12 + (color1 ^ 0xFF) * (color2 ^ 0xFF) * alpha12 / 255) / newAlpha;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.lightenOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.lightenOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.lightenOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.lightenOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.lightenOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.lightenOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? color2 : (color2 * invAlpha1 + color1 * alpha1) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.lightenOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the lighten blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.lightenOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color1 * alpha21 + color2 * invAlpha21 : color2 * alpha12 + color1 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.darkenOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.darkenOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.darkenOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.darkenOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.darkenOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.darkenOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = color2 >= color1 ? (color2 * invAlpha1 + color1 * alpha1) / 255 | 0 : color2;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.darkenOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the darken blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.darkenOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          // This alpha is used when color1 > color2
          alpha12 = alpha1 * (alpha2 ^ 0xFF) / newAlpha | 0,
          invAlpha12 = alpha12 ^ 0xFF,
          // This alpha is used when color2 > color1
          alpha21 = alpha2 * (alpha1 ^ 0xFF) / newAlpha | 0,
          invAlpha21 = alpha21 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 >= color1 ? color2 * alpha21 + color1 * invAlpha21 : color1 * alpha12 + color2 * invAlpha12) / 255 | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.dodgeOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.dodgeOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.dodgeOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.dodgeOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.dodgeOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.dodgeOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.dodgeOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the dodge blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.dodgeOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 255 ? 255 : Math.min(255, 255 * color2 / (color1 ^ 0xFF) | 0))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.burnOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.burnOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.burnOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.burnOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.burnOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.burnOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color2 * invAlpha1 + alpha1 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.burnOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the burn blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.burnOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (color1 * alpha1n2 + color2 * alphan12 + alpha12 * (color1 == 0 ? 0 : Math.min(255, 255 * (color2 ^ 0xFF) / color1) ^ 0xFF)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.overlayOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.overlayOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.overlayOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.overlayOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.overlayOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.overlayOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xFF;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color2 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.overlayOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the overlay blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.overlayOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color2 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.hardLightOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.hardLightOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.hardLightOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.hardLightOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.hardLightOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.hardLightOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * 2 * color1 * color2 / 255 : alpha1 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.hardLightOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the hard light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.hardLightOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * 2 * color1 * color2 / 255 : alpha12 * (2 * (color1 ^ 0xff) * (color2 ^ 0xff) / 255 ^ 0xff))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.softLightOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.softLightOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.softLightOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.softLightOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.softLightOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.softLightOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color1 <= 127 ? ((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2 : ((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.softLightOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the soft light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.softLightOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (((2 * color1 - 255) * softLightLUTSquare[color2] / 255 | 0) + color2) : alpha12 * (((2 * color1 - 255) * softLightLUTSquareRoot[color2] / 255 | 0) + color2))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.vividLightOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.vividLightOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.vividLightOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.vividLightOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.vividLightOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.vividLightOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + (color1 <= 127 ? alpha1 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha1 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.vividLightOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the vivid light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.vividLightOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + (color1 <= 127 ? alpha12 * (color1 == 0 ? 0 : 255 - Math.min(255, (255 - color2) * 255 / (2 * color1) | 0)) : alpha12 * (color1 == 255 ? 255 : Math.min(255, color2 * 255 / (2 * (255 - color1)) | 0)))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.linearLightOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.linearLightOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.linearLightOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.linearLightOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.linearLightOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.linearLightOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 1] - 255))) / 255 | 0;
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * Math.min(255, Math.max(0, color2 + 2 * layer.data[pixIndex + 2] - 255))) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.linearLightOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the linear light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.linearLightOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * Math.min(255, Math.max(0, color2 + 2 * color1 - 255))) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.pinLightOntoOpaqueFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.pinLightOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.pinLightOntoTransparentFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.pinLightOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.pinLightOntoOpaqueFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.pinLightOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        var invAlpha1 = alpha1 ^ 0xff;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (invAlpha1 * color2 + alpha1 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / 255 | 0;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.pinLightOntoTransparentFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the pin light blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.pinLightOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0,
        alpha2 = void 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          alpha12 = alpha1 * alpha2 / 255 | 0,
          alpha1n2 = alpha1 * (alpha2 ^ 0xFF) / 255 | 0,
          alphan12 = (alpha1 ^ 0xFF) * alpha2 / 255 | 0;
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        fusion.data[pixIndex] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        fusion.data[pixIndex + 1] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        fusion.data[pixIndex + 2] = (alpha1n2 * color1 + alphan12 * color2 + alpha12 * (color2 >= 2 * color1 ? 2 * color1 : color2 <= 2 * color1 - 255 ? 2 * color1 - 255 : color2)) / newAlpha | 0;
        fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};

// Blending operations with non-standard variants 

/**
 * Blend the given layer onto the fusion using the passthrough blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.passthroughOntoOpaqueFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = 255,
        alphaMix = layerAlpha / 100,
        invAlphaMix = 1.0 - alphaMix;
      var realAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;

      // Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result
      fusion.data[pixIndex] = (layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;
    }
  }
};
CPBlend.passthroughOntoOpaqueFusionWithOpaqueLayer = CPBlend.passthroughOntoOpaqueFusionWithTransparentLayer;

/**
 * Blend the given layer onto the fusion using the passthrough blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.passthroughOntoTransparentFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET],
        alphaMix = layerAlpha / 100,
        invAlphaMix = 1.0 - alphaMix;
      var realAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;

      // Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result
      fusion.data[pixIndex] = (layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;
    }
  }
};
CPBlend.passthroughOntoTransparentFusionWithOpaqueLayer = CPBlend.passthroughOntoTransparentFusionWithTransparentLayer;

/**
 * Blend the given layer onto the fusion using the passthrough blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.passthroughOntoOpaqueFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = 255,
        alphaMix = mask.data[maskIndex] * layerAlpha / 25500,
        invAlphaMix = 1.0 - alphaMix;
      var realAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;

      // Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result
      fusion.data[pixIndex] = (layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;
    }
  }
};
CPBlend.passthroughOntoOpaqueFusionWithOpaqueLayerMasked = CPBlend.passthroughOntoOpaqueFusionWithTransparentLayerMasked;

/**
 * Blend the given layer onto the fusion using the passthrough blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.passthroughOntoTransparentFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = fusion.data[pixIndex + ALPHA_BYTE_OFFSET],
        alphaMix = mask.data[maskIndex] * layerAlpha / 25500,
        invAlphaMix = 1.0 - alphaMix;
      var realAlpha = alpha1 * alphaMix + alpha2 * invAlphaMix;

      // Effectively use pre-multiplied alpha so that fully transparent colors have no effect on the result
      fusion.data[pixIndex] = (layer.data[pixIndex] * alpha1 * alphaMix + fusion.data[pixIndex] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 1] = (layer.data[pixIndex + 1] * alpha1 * alphaMix + fusion.data[pixIndex + 1] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + 2] = (layer.data[pixIndex + 2] * alpha1 * alphaMix + fusion.data[pixIndex + 2] * alpha2 * invAlphaMix) / realAlpha | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = realAlpha;
    }
  }
};
CPBlend.passthroughOntoTransparentFusionWithOpaqueLayerMasked = CPBlend.passthroughOntoTransparentFusionWithTransparentLayerMasked;

// These "replace" routines disregard the original contents of the fusion, so we need not make both an opaque and transparent fusion variant

/**
 * Blend the given layer onto the fusion using the replace blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.replaceOntoFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0;
      fusion.data[pixIndex] = layer.data[pixIndex];
      fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
      fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replace blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.replaceOntoFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];
      fusion.data[pixIndex] = layer.data[pixIndex];
      fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
      fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replace blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.replaceOntoFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0;
      fusion.data[pixIndex] = layer.data[pixIndex];
      fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
      fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replace blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.replaceOntoFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0;
      fusion.data[pixIndex] = layer.data[pixIndex];
      fusion.data[pixIndex + 1] = layer.data[pixIndex + 1];
      fusion.data[pixIndex + 2] = layer.data[pixIndex + 2];
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replaceAlpha blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.replaceAlphaOntoFusionWithTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replaceAlpha blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.replaceAlphaOntoFusionWithTransparentLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] * layerAlpha / 25500 | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replaceAlpha blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.replaceAlphaOntoFusionWithOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET];
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Blend the given layer onto the fusion using the replaceAlpha blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * The given alpha mask will be multiplied with the layer alpha before blending.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {CPGreyBmp} mask
 * 
 */
CPBlend.replaceAlphaOntoFusionWithOpaqueLayerMasked = function (fusion, layer, layerAlpha, srcRect, mask) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideMask = mask.width - w | 0,
    maskIndex = mask.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, maskIndex += yStrideMask) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, maskIndex++) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * mask.data[maskIndex] / 255 | 0;
      fusion.data[pixIndex + ALPHA_BYTE_OFFSET] = alpha1;
    }
  }
};

/**
 * Modify the given layer using the multiplyUpgrade blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.upgradeMultiplyOfOpaqueLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        // Legacy formula: color2 - Math.floor(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))
        // New formula:    color2 -  Math.ceil(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        layer.data[pixIndex] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        layer.data[pixIndex + 1] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        layer.data[pixIndex + 2] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
      }
    }
  }
};

/**
 * Modify the given layer using the multiplyUpgrade blending operator.
 * 
 * The layer alpha must be less than 100
 * 
 * Fusion pixels must be opaque.
 * 
 * The destination co-ordinates will be the same as the source ones, so both fusion and layer
 * must be the same dimensions.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * 
 */
CPBlend.upgradeMultiplyOfTransparentLayer = function (fusion, layer, layerAlpha, srcRect) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET] * layerAlpha / 100 | 0,
        color1 = void 0,
        color2 = void 0;
      if (alpha1) {
        // Legacy formula: color2 - Math.floor(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))
        // New formula:    color2 -  Math.ceil(((color1 ^ 0xFF) * color2 * alpha1) / (255 * 255))
        color1 = layer.data[pixIndex];
        color2 = fusion.data[pixIndex];
        layer.data[pixIndex] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
        color1 = layer.data[pixIndex + 1];
        color2 = fusion.data[pixIndex + 1];
        layer.data[pixIndex + 1] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
        color1 = layer.data[pixIndex + 2];
        color2 = fusion.data[pixIndex + 2];
        layer.data[pixIndex + 2] = color1 + Math.ceil((255 - color1) * color2 * alpha1 % (255 * 255) / (color2 * alpha1));
      }
    }
  }
};

/**
 * Blend the given layer onto the fusion using the normal blending operator.
 * 
 * The layer must have its layer alpha set to 100
 * 
 * Fusion can contain transparent pixels.
 * 
 * The destination's top left will be at destX, destY. The fusion can be a different size to
 * the layer.
 * 
 * @param {CPColorBmp} fusion
 * @param {CPColorBmp} layer
 * @param {int} layerAlpha
 * @param {CPRect} srcRect
 * @param {int} destX
 * @param {int} destY
 * 
 */
CPBlend._normalFuseImageOntoImageAtPosition = function (fusion, layer, layerAlpha, srcRect, destX, destY) {
  var h = srcRect.getHeight() | 0,
    w = srcRect.getWidth() | 0,
    yStride = (layer.width - w) * BYTES_PER_PIXEL | 0,
    pixIndex = layer.offsetOfPixel(srcRect.left, srcRect.top) | 0,
    yStrideDest = (fusion.width - w) * BYTES_PER_PIXEL | 0,
    pixIndexDest = fusion.offsetOfPixel(destX, destY) | 0;
  for (var y = 0; y < h; y++, pixIndex += yStride, pixIndexDest += yStrideDest) {
    for (var x = 0; x < w; x++, pixIndex += BYTES_PER_PIXEL, pixIndexDest += BYTES_PER_PIXEL) {
      var alpha1 = layer.data[pixIndex + ALPHA_BYTE_OFFSET],
        alpha2 = void 0;
      if (alpha1) {
        alpha2 = fusion.data[pixIndexDest + ALPHA_BYTE_OFFSET];
        var newAlpha = alpha1 + alpha2 - (alpha1 * alpha2 / 255 | 0) | 0,
          realAlpha = alpha1 * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        fusion.data[pixIndexDest] = (layer.data[pixIndex] * realAlpha + fusion.data[pixIndexDest] * invAlpha) / 255 | 0;
        fusion.data[pixIndexDest + 1] = (layer.data[pixIndex + 1] * realAlpha + fusion.data[pixIndexDest + 1] * invAlpha) / 255 | 0;
        fusion.data[pixIndexDest + 2] = (layer.data[pixIndex + 2] * realAlpha + fusion.data[pixIndexDest + 2] * invAlpha) / 255 | 0;
        fusion.data[pixIndexDest + ALPHA_BYTE_OFFSET] = newAlpha;
      }
    }
  }
};
function makeLookupTables() {
  // V - V^2 table
  for (var i = 0; i < 256; i++) {
    var v = i / 255;
    softLightLUTSquare[i] = (v - v * v) * 255 | 0;
  }

  // sqrt(V) - V table
  for (var _i = 0; _i < 256; _i++) {
    var _v = _i / 255;
    softLightLUTSquareRoot[_i] = (Math.sqrt(_v) - _v) * 255 | 0;
  }
}
CPBlend.LM_NORMAL = 0;
CPBlend.LM_MULTIPLY = 1;
CPBlend.LM_ADD = 2;
CPBlend.LM_SCREEN = 3;
CPBlend.LM_LIGHTEN = 4;
CPBlend.LM_DARKEN = 5;
CPBlend.LM_SUBTRACT = 6;
CPBlend.LM_DODGE = 7;
CPBlend.LM_BURN = 8;
CPBlend.LM_OVERLAY = 9;
CPBlend.LM_HARDLIGHT = 10;
CPBlend.LM_SOFTLIGHT = 11;
CPBlend.LM_VIVIDLIGHT = 12;
CPBlend.LM_LINEARLIGHT = 13;
CPBlend.LM_PINLIGHT = 14;
CPBlend.LM_PASSTHROUGH = 15;
CPBlend.LM_MULTIPLY2 = 16;
CPBlend.LM_FIRST = 0;
CPBlend.LM_LAST = 16;
CPBlend.LM_LAST_CHIBIPAINT = CPBlend.LM_PINLIGHT;
CPBlend.BLEND_MODE_CODENAMES = ["normal", "multiply", "add", "screen", "lighten", "darken", "subtract", "dodge", "burn", "overlay", "hardLight", "softLight", "vividLight", "linearLight", "pinLight", "passthrough", "multiply2"];
CPBlend.BLEND_MODE_DISPLAY_NAMES = ["Normal", "Multiply", "Add", "Screen", "Lighten", "Darken", "Subtract", "Dodge", "Burn", "Overlay", "Hard Light", "Soft Light", "Vivid Light", "Linear Light", "Pin Light", "Passthrough", "Multiply"];
makeLookupTables();
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPColorBmp.js":13,"./CPGreyBmp.js":14,"./CPLayer.js":16}],6:[function(require,module,exports){
"use strict";

var _CPBlend = _interopRequireDefault(require("./CPBlend.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
	ChickenPaint

	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.

	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Extra functions for CPBlend that don't need to be generated dynamically.
 */

var BYTES_PER_PIXEL = 4,
  ALPHA_BYTE_OFFSET = 3;
_CPBlend.default.blendFunctionNameForParameters = function (fusionHasTransparency, imageAlpha, imageBlendMode, hasMask) {
  var funcName = _CPBlend.default.BLEND_MODE_CODENAMES[imageBlendMode] + "Onto";
  if (fusionHasTransparency) {
    funcName += "TransparentFusion";
  } else {
    funcName += "OpaqueFusion";
  }
  if (imageAlpha == 100) {
    funcName += "WithOpaqueLayer";
  } else {
    funcName += "WithTransparentLayer";
  }
  if (hasMask) {
    funcName += "Masked";
  }
  return funcName;
};

/**
 * Blends the given image on top of the fusion.
 *
 * @param {CPColorBmp} fusion - Image to fuse on top of
 * @param {boolean} fusionHasTransparency - True if the fusion layer has alpha < 100, or any transparent pixels.
 * @param {CPColorBmp} image - Image that should be drawn on top of the fusion
 * @param {int} imageAlpha - Alpha [0...100] to apply to the image
 * @param {int} imageBlendMode - Blending mode (CPBlend.LM_*) to apply to the image
 * @param {CPRect} rect - The rectangle of pixels that should be fused.
 * @param {?CPGreyBmp} mask - An optional mask to apply to the image
 */
_CPBlend.default.fuseImageOntoImage = function (fusion, fusionHasTransparency, image, imageAlpha, imageBlendMode, rect, mask) {
  if (imageAlpha <= 0) {
    return;
  }
  var funcName = _CPBlend.default.blendFunctionNameForParameters(fusionHasTransparency, imageAlpha, imageBlendMode, mask != null);
  rect = fusion.getBounds().clipTo(rect);
  this[funcName](fusion, image, imageAlpha, rect, mask);
};
_CPBlend.default.normalFuseImageOntoImageAtPosition = function (fusion, image, destX, destY, sourceRect) {
  var sourceRectCopy = sourceRect.clone(),
    destRect = new _CPRect.default(destX, destY, 0, 0);
  fusion.getBounds().clipSourceDest(sourceRectCopy, destRect);
  this._normalFuseImageOntoImageAtPosition(fusion, image, 100, sourceRectCopy, destRect.left, destRect.top);
};

/**
 * Multiplies the given alpha into the alpha of the individual pixels of the image.
 *
 * @param {CPColorBmp} image
 * @param {int} alpha - [0...100] alpha to apply
 */
_CPBlend.default.multiplyAlphaBy = function (image, alpha) {
  if (alpha < 100) {
    if (alpha == 0) {
      image.clearAll(0);
    } else {
      var imageData = image.data;
      for (var pixIndex = ALPHA_BYTE_OFFSET; pixIndex < imageData.length; pixIndex += BYTES_PER_PIXEL) {
        imageData[pixIndex] = Math.round(imageData[pixIndex] * alpha / 100);
      }
    }
  }
};

/**
 * Multiplies the values from the mask, and the given overall alpha, into the alpha channel of the image.
 *
 * @param {CPColorBmp} image
 * @param {number} alpha
 * @param {CPGreyBmp} mask
 */
_CPBlend.default.multiplyAlphaByMask = function (image, alpha, mask) {
  var scale = alpha / (100 * 255);
  for (var dstIndex = _CPColorBmp.default.ALPHA_BYTE_OFFSET, srcIndex = 0; dstIndex < image.data.length; dstIndex += _CPColorBmp.default.BYTES_PER_PIXEL, srcIndex++) {
    image.data[dstIndex] = Math.round(image.data[dstIndex] * mask.data[srcIndex] * scale);
  }
};

/**
 * Multiplies the given alpha into the alpha of the individual pixels of the image and stores the
 * resulting pixels into the specified image.
 *
 * @param {CPColorBmp} dest
 * @param {CPColorBmp} image
 * @param {int} alpha - [0...100] alpha to apply
 * @param {CPRect} rect
 */
_CPBlend.default.copyAndMultiplyAlphaBy = function (dest, image, alpha, rect) {
  if (alpha == 100) {
    dest.copyBitmapRect(image, rect.left, rect.top, rect);
  } else if (alpha == 0) {
    dest.clearRect(rect, 0);
  } else {
    var imageData = image.data;
    for (var pixIndex = 0; pixIndex < imageData.length; pixIndex += BYTES_PER_PIXEL) {
      imageData[pixIndex] = imageData[pixIndex];
      imageData[pixIndex + 1] = imageData[pixIndex + 1];
      imageData[pixIndex + 2] = imageData[pixIndex + 2];
      imageData[pixIndex + ALPHA_BYTE_OFFSET] = Math.round(imageData[pixIndex + ALPHA_BYTE_OFFSET] * alpha / 100);
    }
  }
};

},{"../util/CPRect.js":63,"./CPBlend.js":5,"./CPColorBmp.js":13,"./CPGreyBmp.js":14}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBlendTree;
var _CPBlend = _interopRequireDefault(require("./CPBlend.js"));
require("./CPBlendAdditional.js");
var _CPLayer = _interopRequireDefault(require("./CPLayer.js"));
var _CPLayerGroup = _interopRequireDefault(require("./CPLayerGroup.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPImageLayer = _interopRequireDefault(require("./CPImageLayer.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
                                                                                                                                                                                    	ChickenPaint
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                    	by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                    
                                                                                                                                                                                    	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                    	it under the terms of the GNU General Public License as published by
                                                                                                                                                                                    	the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                    	(at your option) any later version.
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                    	but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                    	GNU General Public License for more details.
                                                                                                                                                                                    
                                                                                                                                                                                    	You should have received a copy of the GNU General Public License
                                                                                                                                                                                    	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                    */
/**
 *
 * @param {int} width
 * @param {int} height
 * @param {(CPLayer|CPLayerGroup)} layer
 * @constructor
 */
function CPBlendNode(width, height, layer) {
  if (layer) {
    this.isGroup = layer instanceof _CPLayerGroup.default;
    this.image = layer.image;
    this.mask = layer.getEffectiveMask();
    this.layer = layer;
    this.blendMode = layer.blendMode;
    this.alpha = layer.alpha;
    this.visible = layer.visible;
  } else {
    this.isGroup = true;
    this.image = null;
    this.mask = null;
    this.layer = null;
    this.blendMode = _CPBlend.default.LM_PASSTHROUGH;
    this.alpha = 100;
    this.visible = true;
  }

  /**
   * For group nodes, this is the rectangle of data which is dirty (due to changes in child nodes) and needs to be re-merged
   *
   * @type {CPRect}
   */
  this.dirtyRect = new _CPRect.default(0, 0, width, height);

  /**
   *
   * @type {CPBlendNode[]}
   */
  this.layers = [];

  /**
   * @type {?CPBlendNode}
   */
  this.parent = null;

  /**
   * When true, we should clip the layers in this group to the bottom layer of the stack
   *
   * @type {boolean}
   */
  this.clip = false;
}

/**
 * Add zero (null), one (CPBlendNode) or more (CPBlendNode[]) children to this node.
 *
 * @param {(?CPBlendNode|CPBlendNode[])} children
 */
CPBlendNode.prototype.addChildren = function (children) {
  var _this = this;
  if (children != null) {
    if (Array.isArray(children)) {
      children.forEach(function (child) {
        return child.parent = _this;
      });
      this.layers = this.layers.concat(children);
    } else {
      var child = children;
      child.parent = this;
      this.layers.push(child);
    }
  }
};

/**
 * Analyses a stack of layers in a CPLayerGroup and optimizes a drawing scheme for them. Then you can reuse that
 * scheme to blend all the layers together.
 *
 * @param {CPLayerGroup} drawingRootGroup - The root of the layer stack.
 * @param {int} width - Dimension of layers and final merge result.
 * @param {int} height
 * @param {boolean} requireSimpleFusion - Set to true if the result must have alpha 100 and no mask.
 *
 * @constructor
 */
function CPBlendTree(drawingRootGroup, width, height, requireSimpleFusion) {
  var DEBUG = false;
  var
    /**
     * @type {CPBlendNode}
     */
    drawTree,
    /**
     * Unused buffers we could re-use instead of allocating more memory.
     *
    	 * @type {CPColorBmp[]}
     */
    spareBuffers = [],
    /**
     * @type {Map}
     */
    nodeForLayer = new Map();
  function allocateBuffer() {
    if (spareBuffers.length > 0) {
      return spareBuffers.pop();
    }
    return new _CPColorBmp.default(width, height);
  }

  /**
   *
   * @param {CPBlendNode} groupNode
   * @returns {?CPBlendNode|CPBlendNode[]}
   */
  function optimizeGroupNode(groupNode) {
    if (groupNode.layers.length == 0) {
      // Group was empty, so omit it

      return null;
    }
    if (groupNode.layers.length == 1 && (groupNode.mask == null || groupNode.layers[0].mask == null)) {
      /*
       * Replace this group with the layer it contains (combine the alpha of the two layers)
       * At most one of the two layers may have a mask, so that we can use that mask for both of them.
       */
      var flattenedNode = groupNode.layers[0];
      flattenedNode.alpha = Math.round(groupNode.alpha * flattenedNode.alpha / 100);
      if (groupNode.blendMode != _CPBlend.default.LM_PASSTHROUGH) {
        flattenedNode.blendMode = groupNode.blendMode;
      }
      flattenedNode.mask = groupNode.mask || flattenedNode.mask;

      /* However, make sure that if someone invalidates the group node (i.e. draws on its mask) we invalidate this
       * new merged node too.
       */
      if (groupNode.layer) {
        nodeForLayer.set(groupNode.layer, flattenedNode);
      }
      return flattenedNode;
    }

    // Replace logically-transparent pass-through groups with their contents
    if (groupNode.blendMode == _CPBlend.default.LM_PASSTHROUGH && groupNode.alpha == 100 && groupNode.mask == null) {
      return groupNode.layers;
    }

    // Since we didn't fall into any of the optimized cases, our group must need a temporary buffer to merge its children into
    groupNode.image = allocateBuffer();
    return groupNode;
  }

  /**
   *
   * @param {CPLayer} layer
   * @returns {CPBlendNode}
   */
  function createNodeForLayer(layer) {
    var node = new CPBlendNode(width, height, layer);
    nodeForLayer.set(layer, node);
    return node;
  }

  /**
   * Build a CPBlendNode for this CPLayerGroup and return it, or null if this group doesn't draw anything.
   *
   * @param {CPLayerGroup} layerGroup
   * @returns {?CPBlendNode|CPBlendNode[]}
   */
  function buildTreeInternal(layerGroup) {
    if (layerGroup.getEffectiveAlpha() == 0) {
      return null;
    }
    var treeNode = createNodeForLayer(layerGroup);
    for (var i = 0; i < layerGroup.layers.length; i++) {
      var childLayer = layerGroup.layers[i],
        nextChild = layerGroup.layers[i + 1];

      // Do we need to create a clipping group?
      if (childLayer instanceof _CPImageLayer.default && nextChild && nextChild.clip) {
        var clippingGroupNode = new CPBlendNode(width, height, null),
          j = void 0;
        clippingGroupNode.blendMode = childLayer.blendMode;
        clippingGroupNode.alpha = 100;
        clippingGroupNode.clip = true;
        clippingGroupNode.addChildren(createNodeForLayer(childLayer));

        // All the contiguous layers above us with "clip" set will become the children of the new group
        for (j = i + 1; j < layerGroup.layers.length; j++) {
          if (layerGroup.layers[j].clip) {
            if (layerGroup.layers[j].getEffectiveAlpha() > 0) {
              clippingGroupNode.addChildren(createNodeForLayer(layerGroup.layers[j]));
            }
          } else {
            break;
          }
        }

        // If the clipping base is invisible, so will the children be (so drop them here by not adding them anywhere)
        if (childLayer.getEffectiveAlpha() > 0) {
          treeNode.addChildren(optimizeGroupNode(clippingGroupNode));
        }

        // Skip the layers we just added
        i = j - 1;
      } else if (childLayer instanceof _CPLayerGroup.default) {
        treeNode.addChildren(buildTreeInternal(childLayer));
      } else if (childLayer.getEffectiveAlpha() > 0) {
        treeNode.addChildren(createNodeForLayer(childLayer));
      }
    }
    return optimizeGroupNode(treeNode);
  }

  /**
   * @param {CPBlendNode} node
   * @param {CPRect} rect
   */
  function invalidateNodeRect(node, rect) {
    if (node) {
      node.dirtyRect.union(rect);
      invalidateNodeRect(node.parent, rect);
    }
  }

  /**
   * Mark an area of a layer as updated (so next time fusion is called, it must be redrawn).
   *
   * @param {CPLayer} layer
   * @param {CPRect} rect
   */
  this.invalidateLayerRect = function (layer, rect) {
    var node = nodeForLayer.get(layer);
    invalidateNodeRect(node, rect);
  };

  /**
   * Build and optimize the blend tree if it was not already built.
   */
  this.buildTree = function () {
    if (!drawTree) {
      drawTree = buildTreeInternal(drawingRootGroup);
      if (!drawTree) {
        /*
         * No layers in the image to draw, so clear a buffer to transparent and use that.
         * This doesn't need to be fast because documents with no visible layers are not useful at all.
         */
        drawTree = new CPBlendNode(width, height, {
          image: allocateBuffer(),
          blendMode: _CPBlend.default.LM_NORMAL,
          alpha: 100,
          getEffectiveMask: function getEffectiveMask() {
            return null;
          },
          visible: true
        });
        drawTree.image.clearAll(0);
      } else {
        /*
         * Caller wants fusion to be a single opaque node, so add a group node as a wrapper if needed (to hold
         * a buffer for the merged children).
         */
        if (Array.isArray(drawTree) || requireSimpleFusion && (drawTree.alpha < 100 || drawTree.mask)) {
          var oldNode = drawTree;
          drawTree = new CPBlendNode(width, height);
          drawTree.blendMode = Array.isArray(oldNode) ? _CPBlend.default.LM_NORMAL : oldNode.blendMode;
          drawTree.alpha = 100;
          drawTree.image = allocateBuffer();
          drawTree.addChildren(oldNode);
        }
      }

      /* Assume we'll have re-used most of the buffers we were ever going to, so we can trim our memory usage
       * to fit now.
       */
      spareBuffers = [];
    }
  };

  /**
   * Give back temporary merge buffers to our buffer pool.
   *
   * @param {CPBlendNode} root
   */
  function resetTreeInternal(root) {
    if (root.isGroup) {
      if (root.image) {
        spareBuffers.push(root.image);
      }
      var _iterator = _createForOfIteratorHelper(root.layers),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          resetTreeInternal(child);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  /**
   * Clear the blend tree (so it can be re-built to reflect changes in the layer structure)
   */
  this.resetTree = function () {
    if (drawTree) {
      resetTreeInternal(drawTree);
      drawTree = null;
      nodeForLayer.clear();
    }
  };

  /**
   * Call when a property of the layer has changed (opacity, blendMode, visibility)
   *
   * @param {CPLayer} layer
   * @param {string} propertyName
   */
  this.layerPropertyChanged = function (layer, propertyName) {
    var layerNode = nodeForLayer.get(layer);

    /*
     * If only the blendMode changed, we won't have to reconstruct our blend tree, since none of our
     * tree structure depends on this (as long as it isn't "passthrough").
     */
    if (!layerNode || layerNode.visible != layer.visible || layerNode.alpha != layer.alpha || layerNode.mask == null != (layer.getEffectiveMask() == null) || layerNode.blendMode == _CPBlend.default.LM_PASSTHROUGH != (layer.blendMode == _CPBlend.default.LM_PASSTHROUGH) || propertyName === "clip") {
      this.resetTree();
    } else {
      layerNode.blendMode = layer.blendMode;
      invalidateNodeRect(layerNode, new _CPRect.default(0, 0, width, height));
    }
  };

  /**
   *
   * @param {CPColorBmp} dest
   * @param {CPColorBmp} source
   * @param {CPRect} rect
   */
  function copyOpaqueImageRect(dest, source, rect) {
    if (rect.getWidth() == dest.width && rect.getHeight() == dest.height) {
      /*
       * If we're copying the whole image at alpha 100, we're just doing a linear byte copy.
       * We have a fast version for that!
       */
      if (DEBUG) {
        console.log("CPColorBmp.copyDataFrom(source);");
      }
      dest.copyPixelsFrom(source);
    } else {
      // Otherwise use the CPBlend version which only blends the specified rectangle
      if (DEBUG) {
        console.log("CPBlend.replaceOntoFusionWithOpaqueLayer(dest, source, 100, ".concat(rect, ");"));
      }
      _CPBlend.default.replaceOntoFusionWithOpaqueLayer(dest, source, 100, rect);
    }
  }

  /**
   *
   * @param {CPColorBmp} dest
   * @param {CPColorBmp} source
   * @param {int} sourceAlpha
   * @param {CPRect} rect
   * @param {?CPGreyBmp} mask
   */
  function copyImageRect(dest, source, sourceAlpha, rect, mask) {
    // Use a plain copy if possible
    if (sourceAlpha == 100 && !mask && rect.getWidth() == dest.width && rect.getHeight() == dest.height) {
      if (DEBUG) {
        console.log("CPColorBmp.copyDataFrom(source);");
      }
      dest.copyPixelsFrom(source);
    } else {
      // Otherwise do some blending
      var routineName = "replaceOntoFusionWith";
      if (sourceAlpha == 100) {
        routineName += "OpaqueLayer";
      } else {
        routineName += "TransparentLayer";
      }
      if (mask) {
        routineName += "Masked";
      }
      if (DEBUG) {
        console.log("CPBlend.".concat(routineName, "(dest, source, sourceAlpha = ").concat(sourceAlpha, ", rect = ").concat(rect, ", mask = ").concat(mask, ");"));
      }
      _CPBlend.default[routineName](dest, source, sourceAlpha, rect, mask);
    }
  }

  /**
   * Blend the given tree node and return the tree node that contains the resulting blend, or null if the tree is empty.
   * 
   * @param {?CPBlendNode} treeNode
   */
  function blendTreeInternal(treeNode) {
    if (!treeNode || !treeNode.isGroup) {
      // Tree is empty, or it's just a layer and doesn't need further blending
      return treeNode;
    }
    var blendArea = treeNode.dirtyRect,
      groupIsEmpty = true,
      fusionHasTransparency = true;
    if (treeNode.blendMode == _CPBlend.default.LM_PASSTHROUGH && treeNode.parent) {
      /* With passthrough blending, the contents of the group are also dependent on the fusion it sits on top of,
       * so invalidating the parent must invalidate the passthrough child.
       */
      blendArea.union(treeNode.parent.dirtyRect);
    }
    if (blendArea.isEmpty()) {
      // Nothing to draw!
      return treeNode;
    }
    if (treeNode.blendMode == _CPBlend.default.LM_PASSTHROUGH && treeNode.parent) {
      // We need to fuse our children layers onto a copy of our parents fusion, so make that copy now
      groupIsEmpty = false;
      copyOpaqueImageRect(treeNode.image, treeNode.parent.image, blendArea);
    }

    // Avoid using an iterator here because Chrome refuses to optimize when a "finally" clause is present (caused by Babel iterator codegen)
    for (var i = 0; i < treeNode.layers.length; i++) {
      var child = treeNode.layers[i],
        childNode = blendTreeInternal(child);
      if (groupIsEmpty) {
        // If the fusion is currently empty then there's nothing to blend, replace the fusion with the contents of the bottom layer instead

        copyImageRect(treeNode.image, childNode.image, childNode.alpha, blendArea, childNode.mask);
        groupIsEmpty = false;
      } else {
        fusionHasTransparency = fusionHasTransparency && treeNode.image.hasAlphaInRect(blendArea);
        if (DEBUG) {
          console.log("CPBlend.fuseImageOntoImage(treeNode.image, fusionHasTransparency == ".concat(fusionHasTransparency, ", childNode.image, childNode.alpha == ").concat(childNode.alpha, ", childNode.blendMode == ").concat(childNode.blendMode, ", ").concat(blendArea, ", ").concat(childNode.mask, ");"));
        }
        _CPBlend.default.fuseImageOntoImage(treeNode.image, fusionHasTransparency, childNode.image, childNode.alpha, childNode.blendMode, blendArea, childNode.mask);
      }
    }
    if (treeNode.clip) {
      // Need to restore the original alpha from the base layer we're clipping onto
      var baseLayer = treeNode.layers[0];
      if (baseLayer.alpha < 100) {
        if (baseLayer.mask) {
          if (DEBUG) {
            console.log("CPBlend.replaceAlphaOntoFusionWithTransparentLayerMasked(treeNode.image, baseLayer.image, treeNode.layers[0].alpha == ".concat(treeNode.layers[0].alpha, ", ").concat(blendArea, ");"));
          }
          _CPBlend.default.replaceAlphaOntoFusionWithTransparentLayerMasked(treeNode.image, baseLayer.image, baseLayer.alpha, blendArea, baseLayer.mask);
        } else {
          if (DEBUG) {
            console.log("CPBlend.replaceAlphaOntoFusionWithTransparentLayer(treeNode.image, baseLayer.image, treeNode.layers[0].alpha == ".concat(treeNode.layers[0].alpha, ", ").concat(blendArea, ");"));
          }
          _CPBlend.default.replaceAlphaOntoFusionWithTransparentLayer(treeNode.image, baseLayer.image, baseLayer.alpha, blendArea);
        }
      } else {
        if (baseLayer.mask) {
          if (DEBUG) {
            console.log("CPBlend.replaceAlphaOntoFusionWithOpaqueLayerMasked(treeNode.image, baseLayer.image, 100, ".concat(blendArea, ");"));
          }
          _CPBlend.default.replaceAlphaOntoFusionWithOpaqueLayerMasked(treeNode.image, baseLayer.image, 100, blendArea, baseLayer.mask);
        } else {
          if (DEBUG) {
            console.log("CPBlend.replaceAlphaOntoFusionWithOpaqueLayer(treeNode.image, baseLayer.image, 100, ".concat(blendArea, ");"));
          }
          _CPBlend.default.replaceAlphaOntoFusionWithOpaqueLayer(treeNode.image, baseLayer.image, 100, blendArea);
        }
      }
    }
    treeNode.dirtyRect.makeEmpty();
    return treeNode;
  }

  /**
   * Blend the layers in the tree and return the resulting image.
   * 
   * @returns An object with blendMode, alpha and image (CPColorBmp) properties.
   */
  this.blendTree = function () {
    if (DEBUG) {
      console.log("Fusing layers...");
    }
    return blendTreeInternal(drawTree);
  };
}
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPBlend.js":5,"./CPBlendAdditional.js":6,"./CPColorBmp.js":13,"./CPImageLayer.js":15,"./CPLayer.js":16,"./CPLayerGroup.js":17}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBrushInfo;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @param {Object} properties - Non-default properties to set on the brush
 *
 * @property {int} alpha - The user-chosen alpha of this brush
 * @property {float} alphaScale - A scale factor applied to curAlpha before drawing
 * @property {int} curAlpha - The current alpha after pen pressure etc. has been applied
 *
 * @property {int} spacing
 * @property {int} minSpacing
 * 
 * @property {int} size - The user-chosen size of this brush
 * @property {int} curSize - The current size of the brush after pen pressure has been applied
 *
 * @property {int} brushMode - Selects the CPBrushTool that will be used to render the brush (CPBrushInfo.BRUSH_MODE_*)
 * @property {int} paintMode - Controls how paint builds up on the canvas during painting (for brush modes that don't
 * override the default paintDab() function). (CPBrushInfo.PAINT_MODE_*)
 * @property {int} strokeMode - How stroke points will be connected during drawing (CPBrushInfo.STROKE_MODE_*)
 * @property {int} tip - Kind of brush tip to be used (CPBrushInfo.TIP_*)
 *
 * @property {number} scattering
 * @property {number} curScattering
 * @property {number} angle
 * @property {number} resat - 0-1.0, controls how much of the user's selected paint color is mixed into the brush while painting.
 * @property {number} bleed - 0-1.0, controls how much of the color from the canvas is picked up by the brush.
 *
 * @property {boolean} isAA
 *
 * @constructor
 */
function CPBrushInfo(properties) {
  var propName;

  // Set brush setting fields with default values, then apply the supplied 'properties' on top
  for (propName in CPBrushInfo.DEFAULTS) {
    if (CPBrushInfo.DEFAULTS.hasOwnProperty(propName)) {
      this[propName] = CPBrushInfo.DEFAULTS[propName];
    }
  }
  for (propName in properties) {
    if (properties.hasOwnProperty(propName)) {
      this[propName] = properties[propName];
    }
  }
}

// Stroke modes
CPBrushInfo.STROKE_MODE_FREEHAND = 0;
CPBrushInfo.STROKE_MODE_LINE = 1;
CPBrushInfo.STROKE_MODE_BEZIER = 2;

// Brush dab types
CPBrushInfo.TIP_ROUND_PIXEL = 0;
CPBrushInfo.TIP_ROUND_AA = 1;
CPBrushInfo.TIP_ROUND_AIRBRUSH = 2;
CPBrushInfo.TIP_SQUARE_PIXEL = 3;
CPBrushInfo.TIP_SQUARE_AA = 4;
CPBrushInfo.BRUSH_MODE_PAINT = 0;
CPBrushInfo.BRUSH_MODE_ERASE = 1;
CPBrushInfo.BRUSH_MODE_DODGE = 2;
CPBrushInfo.BRUSH_MODE_BURN = 3;
CPBrushInfo.BRUSH_MODE_WATER = 4;
CPBrushInfo.BRUSH_MODE_BLUR = 5;
CPBrushInfo.BRUSH_MODE_SMUDGE = 6;
CPBrushInfo.BRUSH_MODE_OIL = 7;
CPBrushInfo.PAINT_MODE_OPACITY = 0;
CPBrushInfo.PAINT_MODE_FLOW = 1;
CPBrushInfo.DEFAULTS = {
  isAA: false,
  minSpacing: 0,
  spacing: 0,
  pressureSize: true,
  pressureAlpha: false,
  pressureScattering: false,
  alphaScale: 1.0,
  tip: CPBrushInfo.TIP_ROUND_PIXEL,
  brushMode: CPBrushInfo.BRUSH_MODE_PAINT,
  paintMode: CPBrushInfo.PAINT_MODE_OPACITY,
  strokeMode: CPBrushInfo.STROKE_MODE_FREEHAND,
  resat: 1.0,
  bleed: 0.0,
  texture: 1.0,
  // "cur" values are current brush settings (once tablet pressure and stuff is applied)
  size: 0,
  curSize: 0,
  alpha: 0,
  curAlpha: 0,
  scattering: 0.0,
  curScattering: 0,
  squeeze: 0.0,
  curSqueeze: 0,
  angle: Math.PI,
  curAngle: 0,
  smoothing: 0.0
};
CPBrushInfo.prototype.applyPressure = function (pressure) {
  // FIXME: no variable size for smudge and oil :(
  if (this.pressureSize && this.brushMode != CPBrushInfo.BRUSH_MODE_SMUDGE && this.brushMode != CPBrushInfo.BRUSH_MODE_OIL) {
    this.curSize = Math.max(0.1, this.size * pressure);
  } else {
    this.curSize = Math.max(0.1, this.size);
  }

  // FIXME: what is the point of doing that?
  if (this.curSize > 16) {
    this.curSize = Math.floor(this.curSize);
  }

  // Don't allow brush size to exceed that supported by CPBrushManager
  this.curSize = Math.min(this.curSize, 400);
  this.curAlpha = this.pressureAlpha ? Math.floor(this.alpha * Math.min(pressure, 1.0)) : this.alpha;
  this.curSqueeze = this.squeeze;
  this.curAngle = this.angle;
  this.curScattering = this.scattering * this.curSize * (this.pressureScattering ? pressure : 1.0);
};
CPBrushInfo.prototype.clone = function () {
  return new CPBrushInfo(this);
};
module.exports = exports.default;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBrushManager;
var _CPBrushInfo = _interopRequireDefault(require("./CPBrushInfo.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

var MAX_SQUEEZE = 10;

/**
 *
 * @param {Uint8Array} brush
 * @param {CPBrushInfo} brushInfo
 */
function buildBrush(brush, brushInfo) {
  var intSize = Math.ceil(brushInfo.curSize),
    center = intSize / 2.0,
    sqrRadius = brushInfo.curSize / 2 * (brushInfo.curSize / 2),
    xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,
    cosA = Math.cos(brushInfo.curAngle),
    sinA = Math.sin(brushInfo.curAngle),
    offset = 0;
  for (var j = 0; j < intSize; j++) {
    for (var i = 0; i < intSize; i++) {
      var x = i + 0.5 - center,
        y = j + 0.5 - center,
        dx = (x * cosA - y * sinA) * xFactor,
        dy = y * cosA + x * sinA,
        sqrDist = dx * dx + dy * dy;
      if (sqrDist <= sqrRadius) {
        brush[offset++] = 0xFF;
      } else {
        brush[offset++] = 0;
      }
    }
  }
}

/**
 * @param {Uint8Array} brush
 * @param {CPBrushInfo} brushInfo
 */
function buildBrushAA(brush, brushInfo) {
  var intSize = Math.ceil(brushInfo.curSize),
    center = intSize / 2.0,
    sqrRadius = brushInfo.curSize / 2 * (brushInfo.curSize / 2),
    sqrRadiusInner = (brushInfo.curSize - 2) / 2 * ((brushInfo.curSize - 2) / 2),
    sqrRadiusOuter = (brushInfo.curSize + 2) / 2 * ((brushInfo.curSize + 2) / 2),
    xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,
    cosA = Math.cos(brushInfo.curAngle),
    sinA = Math.sin(brushInfo.curAngle),
    offset = 0;
  for (var j = 0; j < intSize; j++) {
    for (var i = 0; i < intSize; i++) {
      var x = i + 0.5 - center,
        y = j + 0.5 - center,
        dx = (x * cosA - y * sinA) * xFactor,
        dy = y * cosA + x * sinA,
        sqrDist = dx * dx + dy * dy;
      if (sqrDist <= sqrRadiusInner) {
        brush[offset++] = 0xFF;
      } else if (sqrDist > sqrRadiusOuter) {
        brush[offset++] = 0;
      } else {
        var count = 0;
        for (var oy = 0; oy < 4; oy++) {
          for (var ox = 0; ox < 4; ox++) {
            x = i + ox * (1.0 / 4.0) - center;
            y = j + oy * (1.0 / 4.0) - center;
            dx = (x * cosA - y * sinA) * xFactor;
            dy = y * cosA + x * sinA;
            sqrDist = dx * dx + dy * dy;
            if (sqrDist <= sqrRadius) {
              count += 1;
            }
          }
        }
        brush[offset++] = Math.min(count * 16, 255);
      }
    }
  }
}

/**
 * @param {Uint8Array} brush
 * @param {CPBrushInfo} brushInfo
 */
function buildBrushSquare(brush, brushInfo) {
  var intSize = Math.ceil(brushInfo.curSize),
    center = intSize / 2.0,
    size = brushInfo.curSize * Math.sin(Math.PI / 4),
    sizeX = size / 2 / (1.0 + brushInfo.curSqueeze * MAX_SQUEEZE),
    sizeY = size / 2,
    cosA = Math.cos(brushInfo.curAngle),
    sinA = Math.sin(brushInfo.curAngle),
    offset = 0;
  for (var j = 0; j < intSize; j++) {
    for (var i = 0; i < intSize; i++) {
      var x = i + 0.5 - center,
        y = j + 0.5 - center,
        dx = Math.abs(x * cosA - y * sinA),
        dy = Math.abs(y * cosA + x * sinA);
      if (dx <= sizeX && dy <= sizeY) {
        brush[offset++] = 0xFF;
      } else {
        brush[offset++] = 0;
      }
    }
  }
}

/**
 * @param {Uint8Array} brush
 * @param {CPBrushInfo} brushInfo
 */
function buildBrushSquareAA(brush, brushInfo) {
  var intSize = Math.ceil(brushInfo.curSize),
    center = intSize / 2.0,
    size = brushInfo.curSize * Math.sin(Math.PI / 4),
    sizeX = size / 2 / (1.0 + brushInfo.curSqueeze * MAX_SQUEEZE),
    sizeY = size / 2,
    sizeXInner = sizeX - 1,
    sizeYInner = sizeY - 1,
    sizeXOuter = sizeX + 1,
    sizeYOuter = sizeY + 1,
    cosA = Math.cos(brushInfo.curAngle),
    sinA = Math.sin(brushInfo.curAngle),
    offset = 0;
  for (var j = 0; j < intSize; j++) {
    for (var i = 0; i < intSize; i++) {
      var x = i + 0.5 - center,
        y = j + 0.5 - center,
        dx = Math.abs(x * cosA - y * sinA),
        dy = Math.abs(y * cosA + x * sinA);
      if (dx <= sizeXInner && dy <= sizeYInner) {
        brush[offset++] = 0xFF;
      } else if (dx > sizeXOuter || dy > sizeYOuter) {
        brush[offset++] = 0;
      } else {
        var count = 0;
        for (var oy = 0; oy < 4; oy++) {
          for (var ox = 0; ox < 4; ox++) {
            x = i + ox * (1.0 / 4.0) - center;
            y = j + oy * (1.0 / 4.0) - center;
            dx = Math.abs(x * cosA - y * sinA);
            dy = Math.abs(y * cosA + x * sinA);
            if (dx <= sizeX && dy <= sizeY) {
              count++;
            }
          }
        }
        brush[offset++] = Math.min(count * 16, 255);
      }
    }
  }
}

/**
 *
 * @param {Uint8Array} brush
 * @param {CPBrushInfo} brushInfo
 */
function buildBrushSoft(brush, brushInfo) {
  var intSize = Math.ceil(brushInfo.curSize),
    center = intSize / 2.0,
    sqrRadius = brushInfo.curSize / 2 * (brushInfo.curSize / 2),
    xFactor = 1.0 + brushInfo.curSqueeze * MAX_SQUEEZE,
    cosA = Math.cos(brushInfo.curAngle),
    sinA = Math.sin(brushInfo.curAngle),
    offset = 0;
  for (var j = 0; j < intSize; j++) {
    for (var i = 0; i < intSize; i++) {
      var x = i + 0.5 - center,
        y = j + 0.5 - center,
        dx = (x * cosA - y * sinA) * xFactor,
        dy = y * cosA + x * sinA,
        sqrDist = dx * dx + dy * dy;
      if (sqrDist <= sqrRadius) {
        brush[offset++] = ~~(255 * (1 - sqrDist / sqrRadius));
      } else {
        brush[offset++] = 0;
      }
    }
  }
}

/**
 * A brush spot
 *
 * @typedef {Object} CPBrushDab
 *
 * @property {Uint8Array} brush - The brush image mask
 * @property {int} width - The size of the brush image (note, it need not occupy the entire brush array).
 * @property {int} height
 * @property {int} x - Pixel in the document where the brush will be applied
 * @property {int} y
 * @property {int} alpha
 */

/**
 * Creates and holds one cached brush at a time, with the given parameters.
 *
 * @constructor
 */
function CPBrushManager() {
  var BRUSH_MAX_DIM = 401,
    BRUSH_AA_MAX_DIM = 402;
  var brush = new Uint8Array(BRUSH_MAX_DIM * BRUSH_MAX_DIM),
    brushAA = new Uint8Array(BRUSH_AA_MAX_DIM * BRUSH_AA_MAX_DIM),
    brushAARows = [new Float32Array(BRUSH_AA_MAX_DIM), new Float32Array(BRUSH_AA_MAX_DIM)],
    cacheBrush = null,
    cacheSize,
    cacheSqueeze,
    cacheAngle,
    cacheTip,
    that = this;

  /**
   * Shift a brush by a positive sub-pixel amount (dx, dy) [0..1), and return the new brush.
   *
   * The resulting brush array is 1 pixel larger than the original one in both dimensions.
   *
   * @param {CPBrushInfo} brushInfo
   * @param {number} dx
   * @param {number} dy
   *
   * @returns {Uint8Array}
   */
  function createSubpixelShiftedBrush(brushInfo, dx, dy) {
    var nonAABrush = getBrush(brushInfo),
      intSize = Math.ceil(brushInfo.curSize),
      intSizeAA = Math.ceil(brushInfo.curSize) + 1;
    var invdx_invdy = (1 - dx) * (1 - dy),
      dx_invdy = dx * (1 - dy),
      dx_dy = dx * dy,
      invdx_dy = (1 - dx) * dy,
      srcIndex = 0,
      dstIndex = 0,
      curRow = brushAARows[0],
      nextRow = brushAARows[1],
      swap;
    curRow.fill(0); // Since it will be dirty from a previous call

    for (var y = 0; y < intSize; y++) {
      var x = void 0;
      nextRow[0] = 0; // We overwrite all the subsequent values in the loop, but we do need to clear this one for the first iteration's benefit

      // For all the source pixels in the row:
      for (x = 0; x < intSize; x++, srcIndex++, dstIndex++) {
        var brushAlpha = nonAABrush[srcIndex];

        /*
         * Use a weighted sum to shift the source pixels's position by a sub-pixel amount dx, dy and accumulate
         * it into the final brushAA array.
         */

        // We have the contribution from our previous 3 neighbours now so we can complete this output pixel
        brushAA[dstIndex] = curRow[x] + brushAlpha * invdx_invdy + 0.5 | 0;
        curRow[x + 1] += brushAlpha * dx_invdy;
        nextRow[x] += brushAlpha * invdx_dy;
        nextRow[x + 1] = brushAlpha * dx_dy; // We're the first iteration that writes to this pixel so we needn't +=
      }

      // The final output pixel of the row doesn't have a source pixel of its own (it just gets the contribution from the previous ones)
      brushAA[dstIndex++] = curRow[x] + 0.5 | 0;
      swap = curRow;
      curRow = nextRow;
      nextRow = swap;
    }

    // Output final residual row
    for (var _x = 0; _x < intSizeAA; _x++, dstIndex++) {
      brushAA[dstIndex] = curRow[_x] + 0.5 | 0;
    }
    return brushAA;
  }

  /**
   * Build and return a brush that conforms to the given brush settings.
   *
   * @param {CPBrushInfo} brushInfo
   *
   * @returns {Uint8Array}
   */
  function getBrush(brushInfo) {
    if (cacheBrush != null && brushInfo.curSize == cacheSize && brushInfo.curSqueeze == cacheSqueeze && brushInfo.curAngle == cacheAngle && brushInfo.tip == cacheTip) {
      return cacheBrush;
    }
    switch (brushInfo.tip) {
      case _CPBrushInfo.default.TIP_ROUND_AIRBRUSH:
        buildBrushSoft(brush, brushInfo);
        break;
      case _CPBrushInfo.default.TIP_ROUND_AA:
        buildBrushAA(brush, brushInfo);
        break;
      case _CPBrushInfo.default.TIP_ROUND_PIXEL:
        buildBrush(brush, brushInfo);
        break;
      case _CPBrushInfo.default.TIP_SQUARE_AA:
        buildBrushSquareAA(brush, brushInfo);
        break;
      case _CPBrushInfo.default.TIP_SQUARE_PIXEL:
        buildBrushSquare(brush, brushInfo);
        break;
    }
    cacheBrush = brush;
    cacheSize = brushInfo.curSize;
    cacheTip = brushInfo.tip;
    cacheSqueeze = brushInfo.curSqueeze;
    cacheAngle = brushInfo.curAngle;
    return brush;
  }

  /**
      *
      * @param {CPBrushDab} dab
      * @param {float} textureAmount
      */
  function applyTexture(dab, textureAmount) {
    var amount = Math.floor(textureAmount * 255),
      texture = that.texture,
      textureX = dab.x % texture.width,
      textureY = dab.y % texture.height,
      brushPos = 0,
      texturePos,
      textureEOL;
    if (textureX < 0) {
      textureX += texture.width;
    }
    if (textureY < 0) {
      textureY += texture.height;
    }
    for (var y = 0; y < dab.height; y++) {
      texturePos = textureY * texture.width + textureX;
      textureEOL = textureY * texture.width + texture.width;
      for (var x = 0; x < dab.width; x++) {
        var brushValue = dab.brush[brushPos],
          textureValue = texture.data[texturePos];
        dab.brush[brushPos] = ~~(brushValue * (textureValue * amount / 255 ^ 0xff) / 255);
        brushPos++;
        texturePos++;
        if (texturePos == textureEOL) {
          // Wrap to left side of texture
          texturePos -= texture.width;
        }
      }
      textureY++;
      if (textureY == texture.height) {
        textureY = 0;
      }
    }
  }

  /**
   * Create a paint dab using the given brush at the given image co-ordinates.
   *
   * @param {number} x - Image coordinate of center of brush dab
   * @param {number} y - Image coordinate of center of brush dab
   * @param {CPBrushInfo} brushInfo - Brush appearance parameters
   *
   * @returns {CPBrushDab}
   */
  this.getDab = function (x, y, brushInfo) {
    var dab = {
      alpha: brushInfo.curAlpha,
      width: Math.ceil(brushInfo.curSize),
      height: Math.ceil(brushInfo.curSize)
    };

    // FIXME: I don't like this special case for ROUND_PIXEL
    // it would be better to have brush presets for working with pixels
    var useSubpixelShift = brushInfo.isAA && brushInfo.tip != _CPBrushInfo.default.TIP_ROUND_PIXEL;
    if (useSubpixelShift) {
      dab.width++;
      dab.height++;
    }
    var
      // The top left corner of the brush dab
      dabX = x - dab.width / 2.0 + 0.5,
      dabY = y - dab.height / 2.0 + 0.5,
      // The pixel the top left corner lies in
      dabXInt = Math.floor(dabX),
      dabYInt = Math.floor(dabY);
    if (useSubpixelShift) {
      var subpixelX = dabX - dabXInt,
        subpixelY = dabY - dabYInt;
      dab.brush = createSubpixelShiftedBrush(brushInfo, subpixelX, subpixelY);
    } else {
      dab.brush = getBrush(brushInfo);
    }
    dab.x = dabXInt;
    dab.y = dabYInt;
    if (brushInfo.texture > 0.0 && this.texture != null) {
      // we need a brush bitmap that can be modified everytime
      // the one in "brush" can be kept in cache so if we are using it, make a copy
      if (dab.brush == brush) {
        brushAA.set(brush);
        dab.brush = brushAA;
      }
      applyTexture(dab, brushInfo.texture);
    }
    return dab;
  };
  this.setTexture = function (texture) {
    this.texture = texture;
  };
}
module.exports = exports.default;

},{"./CPBrushInfo.js":8}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CPBrushToolWatercolor = exports.CPBrushToolSmudge = exports.CPBrushToolOil = exports.CPBrushToolEraser = exports.CPBrushToolDodge = exports.CPBrushToolBurn = exports.CPBrushToolBlur = exports.CPBrushTool = void 0;
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _CPBrushInfo = _interopRequireDefault(require("./CPBrushInfo.js"));
var _CPColorFloat = _interopRequireDefault(require("../util/CPColorFloat.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                                                                                                                                                                                                  by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                  it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                  the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                  (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                  GNU General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                  along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                              */
/**
 * @param {number[]} array
 * @returns {number}
 */
function average(array) {
  var accumulator = 0;
  for (var i = 0; i < array.length; i++) {
    accumulator += array[i];
  }
  return accumulator / array.length;
}

/**
 * @param {CPColorFloat[]} array
 * @returns {CPColorFloat}
 */
function averageColorFloat(array) {
  var average = new _CPColorFloat.default(0, 0, 0);
  for (var i = 0; i < array.length; i++) {
    var sample = array[i];
    average.r += sample.r;
    average.g += sample.g;
    average.b += sample.b;
  }
  average.r /= array.length;
  average.g /= array.length;
  average.b /= array.length;
  return average;
}
function lerp(from, to, prop) {
  return from * (1 - prop) + to * prop;
}
var CPBrushTool = exports.CPBrushTool = /*#__PURE__*/function () {
  /**
   * @param {CPGreyBmp} strokeBuffer - A 32-bit image we can use for buffering paint operations to be merged later.
   * @param {CPRect} strokedRegion - The area of the strokeBuffer we've painted on.
   */
  function CPBrushTool(strokeBuffer, strokedRegion) {
    _classCallCheck(this, CPBrushTool);
    this._strokeBuffer = strokeBuffer;
    this._strokedRegion = strokedRegion;

    /**
     * Set to true if the brush wants to be able to sample its output
     * from the layer as input for its next drawing operation (i.e. please merge the stroke buffer through to the
     * layer before the next call).
     *
     * @type {boolean}
     */
    this.wantsOutputAsInput = true;
  }

  /**
   * @param {CPColorBmp|CPGreyBmp} destImage - Image to paint to (for those brushes not using the strokeBuffer)
   * @param {CPRect} imageRect - The area on the canvas that will be painted to
   * @param {CPBrushInfo} brushConfig - The current brush tip configuration
   * @param {CPRect} brushRect - The rectangle from the dab which will be painted to the canvas
   * @param {CPBrushDab} dab
   * @param {CPColorBmp|CPGreyBmp} sampleImage - Image to sample from (either the current layer/mask or the fusion depending on user's
   * choice of "sample all layers"
   * @param {int} color - RGB current brush color
   */
  _createClass(CPBrushTool, [{
    key: "paintDab",
    value: function paintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {
      var alpha = Math.max(1, Math.ceil(dab.alpha * brushConfig.alphaScale));
      switch (brushConfig.paintMode) {
        case _CPBrushInfo.default.PAINT_MODE_FLOW:
          this._paintFlow(brushRect, imageRect, dab.brush, dab.width, alpha);
          break;
        case _CPBrushInfo.default.PAINT_MODE_OPACITY:
          this._paintOpacity(brushRect, imageRect, dab.brush, dab.width, alpha);
          break;
      }
    }

    /**
     * Blends the brush data from the current stroke (strokeBuffer, strokedRegion) onto the original (pre-stroke)
     * image data (from undoData) and stores the result in destImage.
     *
     * @param {CPColorBmp} destImage - The layer to draw onto
     * @param {CPColorBmp} undoImage - The original pixels for the layer before the stroke began
     * @param {int} color - RGB color of the current brush
     */
  }, {
    key: "mergeOntoImage",
    value: function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoData = undoImage.data,
        destData = destImage.data,
        red = color >> 16 & 0xFF,
        green = color >> 8 & 0xFF,
        blue = color & 0xFF,
        width = strokedRegion.getWidth() | 0,
        height = strokedRegion.getHeight() | 0,
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcYStride = this._strokeBuffer.width - width | 0,
        dstYStride = (destImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL | 0;
      for (var y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var strokeAlpha = strokeData[srcOffset] / 255 + 0.5 | 0; // Round nearest so it's easier to achieve 255 opacity

          if (strokeAlpha > 0) {
            var destAlpha = undoData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET],
              newLayerAlpha = strokeAlpha + destAlpha * (255 - strokeAlpha) / 255 | 0,
              realAlpha = 255 * strokeAlpha / newLayerAlpha | 0,
              invAlpha = 255 - realAlpha;
            destData[dstOffset] = (red * realAlpha + undoData[dstOffset] * invAlpha) / 255 & 0xff;
            destData[dstOffset + 1] = (green * realAlpha + undoData[dstOffset + 1] * invAlpha) / 255 & 0xff;
            destData[dstOffset + 2] = (blue * realAlpha + undoData[dstOffset + 2] * invAlpha) / 255 & 0xff;
            destData[dstOffset + 3] = newLayerAlpha;
          }
        }
      }
    }

    /**
     * Uses the strokeBuffer as an alpha mask to paint the given color onto the original (pre-stroke) mask data (undoMask)
     * and stores the result in destMask.
     *
     * @param {CPGreyBmp} destMask - The destination to write to
     * @param {CPGreyBmp} undoMask - The original contents of the mask
     * @param {int} color - Intensity to paint (0-255)
     */
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoMaskData = undoMask.data,
        destMaskData = destMask.data,
        width = strokedRegion.getWidth() | 0,
        height = strokedRegion.getHeight() | 0,
        dstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcYStride = this._strokeBuffer.width - width | 0,
        dstYStride = destMask.width - width | 0;
      for (var y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            var invAlpha = 255 - strokeAlpha;
            destMaskData[dstOffset] = (color * strokeAlpha + undoMaskData[dstOffset] * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * Paint the brush into the strokeBuffer at the given position.
     *
     * If the brush covers the same area multiple times, ink builds up until the area becomes opaque.
     *
     * @param {CPRect} brushRect - Rectangle from brushShape array to paint
     * @param {CPRect} imageRect - Rectangle of the destination image that corresponds to brushRect
     * @param {Uint8Array} brushShape - An opacity mask for the brush tip shape
     * @param {int} brushWidth - Width of the brush buffer (bytes per row)
     * @param {int} alpha - Alpha to apply to the brush (0-255)
     */
  }, {
    key: "_paintFlow",
    value: function _paintFlow(brushRect, imageRect, brushShape, brushWidth, alpha) {
      var strokeData = this._strokeBuffer.data,
        brushOffset = brushRect.left + brushRect.top * brushWidth,
        strokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top),
        dstHeight = imageRect.getHeight(),
        dstWidth = imageRect.getWidth(),
        srcYStride = brushWidth - dstWidth,
        dstYStride = this._strokeBuffer.width - dstWidth;
      this._strokedRegion.union(imageRect);
      for (var y = 0; y < dstHeight; y++, brushOffset += srcYStride, strokeOffset += dstYStride) {
        for (var x = 0; x < dstWidth; x++, brushOffset++, strokeOffset++) {
          var brushAlpha = brushShape[brushOffset] * alpha;
          if (brushAlpha != 0) {
            strokeData[strokeOffset] = Math.min(255 * 255, strokeData[strokeOffset] + (255 - strokeData[strokeOffset] / 255) * brushAlpha / 255);
          }
        }
      }
    }

    /**
     * The shape of the brush is combined with the alpha in the strokeBuffer with a simple max()
     * operation. Effectively, the brush just sets the opacity of the buffer.
     *
     * Painting the same area multiple times during a single stroke does not increase the opacity.
     *
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brush
     * @param {int} brushWidth
     * @param {int} alpha
     */
  }, {
    key: "_paintOpacity",
    value: function _paintOpacity(brushRect, imageRect, brush, brushWidth, alpha) {
      var strokeData = this._strokeBuffer.data,
        brushOffset = brushRect.left + brushRect.top * brushWidth,
        imageOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top),
        imageWidth = imageRect.getWidth(),
        srcYStride = brushWidth - imageWidth,
        dstYStride = this._strokeBuffer.width - imageWidth;
      alpha = Math.min(255, alpha);
      this._strokedRegion.union(imageRect);
      for (var y = imageRect.top; y < imageRect.bottom; y++, brushOffset += srcYStride, imageOffset += dstYStride) {
        for (var x = 0; x < imageWidth; x++, brushOffset++, imageOffset++) {
          strokeData[imageOffset] = Math.max(brush[brushOffset] * alpha, strokeData[imageOffset]);
        }
      }
    }

    /**
     * Allows setup to be performed when a stroke begins
     */
  }, {
    key: "beginStroke",
    value: function beginStroke() {}

    /**
     * Allows teardown to be performed when a stroke ends
     */
  }, {
    key: "endStroke",
    value: function endStroke() {}
  }]);
  return CPBrushTool;
}();
var CPBrushToolEraser = exports.CPBrushToolEraser = /*#__PURE__*/function (_CPBrushTool) {
  _inherits(CPBrushToolEraser, _CPBrushTool);
  var _super = _createSuper(CPBrushToolEraser);
  function CPBrushToolEraser() {
    _classCallCheck(this, CPBrushToolEraser);
    return _super.apply(this, arguments);
  }
  _createClass(CPBrushToolEraser, [{
    key: "mergeOntoImage",
    value:
    /**
     * @override
     */
    function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoData = undoImage.data,
        destData = destImage.data;
      for (var y = strokedRegion.top; y < strokedRegion.bottom; y++) {
        var dstOffset = destImage.offsetOfPixel(strokedRegion.left, y) + _CPColorBmp.default.ALPHA_BYTE_OFFSET,
          srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, y);
        for (var x = strokedRegion.left; x < strokedRegion.right; x++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var strokeAlpha = strokeData[srcOffset++] / 255 | 0;
          if (strokeAlpha > 0) {
            var destAlpha = undoData[dstOffset];
            destData[dstOffset] = destAlpha * (255 - strokeAlpha) / 255;
          }
        }
      }
    }
  }]);
  return CPBrushToolEraser;
}(CPBrushTool);
var CPBrushToolDodge = exports.CPBrushToolDodge = /*#__PURE__*/function (_CPBrushTool2) {
  _inherits(CPBrushToolDodge, _CPBrushTool2);
  var _super2 = _createSuper(CPBrushToolDodge);
  function CPBrushToolDodge() {
    _classCallCheck(this, CPBrushToolDodge);
    return _super2.apply(this, arguments);
  }
  _createClass(CPBrushToolDodge, [{
    key: "mergeOntoImage",
    value:
    /**
     * Uses the opacity data in the strokeBuffer to brighten non-transparent pixels from the original image.
     *
     * @override
     */
    function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        width = strokedRegion.getWidth(),
        height = strokedRegion.getHeight(),
        dstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstYSkip = (destImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL,
        srcYSkip = this._strokeBuffer.width - width,
        undoData = undoImage.data,
        destImageData = destImage.data;
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0 && undoData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET] != 0) {
            var scale = (strokeAlpha + 255) / 255;
            destImageData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET] * scale;
            destImageData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] * scale;
            destImageData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] * scale;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        width = strokedRegion.getWidth(),
        height = strokedRegion.getHeight(),
        dstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstYSkip = destMask.width - width,
        srcYSkip = this._strokeBuffer.width - width,
        undoMaskData = undoMask.data,
        destMaskData = destMask.data;
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            var scale = (strokeAlpha + 255) / 255;
            destMaskData[dstOffset] = Math.min(undoMaskData[dstOffset] * scale, 255);
          }
        }
      }
    }
  }]);
  return CPBrushToolDodge;
}(CPBrushTool);
var BURN_CONSTANT = 260;
var CPBrushToolBurn = exports.CPBrushToolBurn = /*#__PURE__*/function (_CPBrushTool3) {
  _inherits(CPBrushToolBurn, _CPBrushTool3);
  var _super3 = _createSuper(CPBrushToolBurn);
  function CPBrushToolBurn() {
    _classCallCheck(this, CPBrushToolBurn);
    return _super3.apply(this, arguments);
  }
  _createClass(CPBrushToolBurn, [{
    key: "mergeOntoImage",
    value:
    /**
     * Uses the opacity data in the strokeBuffer to brighten non-transparent pixels from the original image.
     *
     * @override
     */
    function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        width = strokedRegion.getWidth(),
        height = strokedRegion.getHeight(),
        dstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstYSkip = (destImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL,
        srcYSkip = this._strokeBuffer.width - width,
        undoData = undoImage.data,
        destImageData = destImage.data;
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0 && undoData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET] != 0) {
            destImageData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET] - (BURN_CONSTANT - undoData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET]) * strokeAlpha / 255 | 0;
            destImageData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] - (BURN_CONSTANT - undoData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET]) * strokeAlpha / 255 | 0;
            destImageData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] = undoData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] - (BURN_CONSTANT - undoData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET]) * strokeAlpha / 255 | 0;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        width = strokedRegion.getWidth(),
        height = strokedRegion.getHeight(),
        dstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstYSkip = destMask.width - width,
        srcYSkip = this._strokeBuffer.width - width,
        undoMaskData = undoMask.data,
        destMaskData = destMask.data;
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            destMaskData[dstOffset] = Math.max(undoMaskData[dstOffset] - (BURN_CONSTANT - undoMaskData[dstOffset]) * strokeAlpha / 255, 0);
          }
        }
      }
    }
  }]);
  return CPBrushToolBurn;
}(CPBrushTool);
var BLUR_MIN = 64,
  BLUR_MAX = 1;

/**
 * Blends a pixel with its nearest 4 neighbors using a weighted sum. The opacity accumulated in the stroke buffer decides
 * how much weight the central pixel should have in the sum (higher opacities cause the central pixel to have lower weight,
 * increasing the contribution of those on the edges)
 */
var CPBrushToolBlur = exports.CPBrushToolBlur = /*#__PURE__*/function (_CPBrushTool4) {
  _inherits(CPBrushToolBlur, _CPBrushTool4);
  var _super4 = _createSuper(CPBrushToolBlur);
  function CPBrushToolBlur() {
    _classCallCheck(this, CPBrushToolBlur);
    return _super4.apply(this, arguments);
  }
  _createClass(CPBrushToolBlur, [{
    key: "mergeOntoImage",
    value:
    /**
     * @override
     */
    function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoData = undoImage.data,
        destImageData = destImage.data,
        width = strokedRegion.getWidth(),
        destYStride = undoImage.width * _CPColorBmp.default.BYTES_PER_PIXEL,
        destOffset = undoImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        destYSkip = (undoImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL,
        srcYSkip = this._strokeBuffer.width - width,
        r,
        g,
        b,
        a,
        addSample = function addSample(sampleOffset) {
          r += undoData[sampleOffset + _CPColorBmp.default.RED_BYTE_OFFSET];
          g += undoData[sampleOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET];
          b += undoData[sampleOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET];
          a += undoData[sampleOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET];
        };
      for (var y = strokedRegion.top; y < strokedRegion.bottom; y++, destOffset += destYSkip, srcOffset += srcYSkip) {
        for (var x = strokedRegion.left; x < strokedRegion.right; x++, destOffset += _CPColorBmp.default.BYTES_PER_PIXEL, srcOffset++) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            var centralSampleWeight = BLUR_MIN + (BLUR_MAX - BLUR_MIN) * strokeAlpha / 255 | 0,
              weightSum = centralSampleWeight + 4;

            // Center pixel has a custom weighting
            r = centralSampleWeight * undoData[destOffset + _CPColorBmp.default.RED_BYTE_OFFSET];
            g = centralSampleWeight * undoData[destOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET];
            b = centralSampleWeight * undoData[destOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET];
            a = centralSampleWeight * undoData[destOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET];

            // The other pixels have a unit weighting

            // x, y - 1
            addSample(y > 0 ? destOffset - destYStride : destOffset);
            // x, y + 1
            addSample(y < undoImage.height - 1 ? destOffset + destYStride : destOffset);
            // x - 1, y
            addSample(x > 0 ? destOffset - _CPColorBmp.default.BYTES_PER_PIXEL : destOffset);
            // x + 1, y
            addSample(x < undoImage.width - 1 ? destOffset + _CPColorBmp.default.BYTES_PER_PIXEL : destOffset);
            a /= weightSum;
            r /= weightSum;
            g /= weightSum;
            b /= weightSum;
            destImageData[destOffset + _CPColorBmp.default.RED_BYTE_OFFSET] = r | 0;
            destImageData[destOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] = g | 0;
            destImageData[destOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] = b | 0;
            destImageData[destOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = a | 0;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoMaskData = undoMask.data,
        destMaskData = destMask.data,
        width = strokedRegion.getWidth(),
        destYStride = undoMask.width,
        destOffset = undoMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        destYSkip = undoMask.width - width,
        srcYSkip = this._strokeBuffer.width - width,
        sampleSum;
      for (var y = strokedRegion.top; y < strokedRegion.bottom; y++, destOffset += destYSkip, srcOffset += srcYSkip) {
        for (var x = strokedRegion.left; x < strokedRegion.right; x++, destOffset++, srcOffset++) {
          var strokeAlpha = strokeData[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            var centralSampleWeight = BLUR_MIN + (BLUR_MAX - BLUR_MIN) * strokeAlpha / 255 | 0,
              weightSum = centralSampleWeight + 4;

            // Center pixel has a custom weighting
            sampleSum = centralSampleWeight * undoMaskData[destOffset];

            // The other pixels have a unit weighting

            // x, y - 1
            sampleSum += undoMaskData[y > 0 ? destOffset - destYStride : destOffset];
            // x, y + 1
            sampleSum += undoMaskData[y < undoMask.height - 1 ? destOffset + destYStride : destOffset];
            // x - 1, y
            sampleSum += undoMaskData[x > 0 ? destOffset - 1 : destOffset];
            // x + 1, y
            sampleSum += undoMaskData[x < undoMask.width - 1 ? destOffset + 1 : destOffset];
            destMaskData[destOffset] = sampleSum / weightSum | 0;
          }
        }
      }
    }
  }]);
  return CPBrushToolBlur;
}(CPBrushTool);
/**
 * Brushes derived from this class use the strokeBuffer as a ARGB or AG (greyscale) layer.
 *
 * The undoBuffer (pre-stroke image data) is restored to the layer, then the pixels from strokeBuffer are blended
 * on top of that.
 */
var CPBrushToolDirectBrush = /*#__PURE__*/function (_CPBrushTool5) {
  _inherits(CPBrushToolDirectBrush, _CPBrushTool5);
  var _super5 = _createSuper(CPBrushToolDirectBrush);
  function CPBrushToolDirectBrush() {
    _classCallCheck(this, CPBrushToolDirectBrush);
    return _super5.apply(this, arguments);
  }
  _createClass(CPBrushToolDirectBrush, [{
    key: "mergeOntoImage",
    value:
    /**
     * @override
     */
    function mergeOntoImage(destImage, undoImage, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoData = undoImage.data,
        destImageData = destImage.data,
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstOffset = destImage.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        width = strokedRegion.getWidth() | 0,
        height = strokedRegion.getHeight() | 0,
        srcYStride = this._strokeBuffer.width - width | 0,
        dstYStride = (destImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL | 0;
      for (var y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var color1 = strokeData[srcOffset],
            alpha1 = color1 >>> 24;
          if (alpha1 > 0) {
            var alpha2 = undoData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET],
              newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
              realAlpha = alpha1 * 255 / newAlpha | 0,
              invAlpha = 255 - realAlpha;
            destImageData[dstOffset] = ((color1 >> 16 & 0xFF) * realAlpha + undoData[dstOffset] * invAlpha) / 255 | 0;
            destImageData[dstOffset + 1] = ((color1 >> 8 & 0xFF) * realAlpha + undoData[dstOffset + 1] * invAlpha) / 255 | 0;
            destImageData[dstOffset + 2] = ((color1 & 0xFF) * realAlpha + undoData[dstOffset + 2] * invAlpha) / 255 | 0;
            destImageData[dstOffset + 3] = newAlpha;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {
      var strokeData = this._strokeBuffer.data,
        strokedRegion = this._strokedRegion,
        undoMaskData = undoMask.data,
        destMaskData = destMask.data,
        srcOffset = this._strokeBuffer.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        dstOffset = destMask.offsetOfPixel(strokedRegion.left, strokedRegion.top),
        width = strokedRegion.getWidth() | 0,
        height = strokedRegion.getHeight() | 0,
        srcYStride = this._strokeBuffer.width - width | 0,
        dstYStride = destMask.width - width | 0;
      for (var y = 0; y < height; y++, srcOffset += srcYStride, dstOffset += dstYStride) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var color1 = strokeData[srcOffset],
            alpha1 = color1 >> 8;
          if (alpha1 > 0) {
            var invAlpha = 255 - alpha1;
            destMaskData[dstOffset] = ((color1 & 0xFF) * alpha1 + undoMaskData[dstOffset] * invAlpha) / 255 | 0;
          }
        }
      }
    }
  }]);
  return CPBrushToolDirectBrush;
}(CPBrushTool);
var WATERCOLOR_NUM_SAMPLES = 50,
  WATERCOLOR_SAMPLE_RADIUS = 64,
  WATERCOLOR_SPREAD_FACTOR = 2 / 6;
var CPBrushToolWatercolor = exports.CPBrushToolWatercolor = /*#__PURE__*/function (_CPBrushToolDirectBru) {
  _inherits(CPBrushToolWatercolor, _CPBrushToolDirectBru);
  var _super6 = _createSuper(CPBrushToolWatercolor);
  function CPBrushToolWatercolor(strokeBuffer, strokedRegion) {
    var _this;
    _classCallCheck(this, CPBrushToolWatercolor);
    _this = _super6.call(this, strokeBuffer, strokedRegion);
    _this.wantsOutputAsInput = true;
    return _this;
  }

  /**
   * Average out a bunch of samples from around the given pixel.
   *
   * @param {CPGreyBmp} mask
   * @param {number} x - Center of sample
   * @param {number} y
   * @param {number} dx - Spread of samples from center
   * @param {number} dy
   *
   * @returns {number}
   */
  _createClass(CPBrushToolWatercolor, [{
    key: "_paintToColorStrokeBuffer",
    value:
    /**
     * Blend the brush stroke with full color into the strokeBuffer
     *
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape
     * @param {int} brushWidth
     * @param {int} alpha
     * @param {int} color1 - RGB brush color
     */
    function _paintToColorStrokeBuffer(brushRect, imageRect, brushShape, brushWidth, alpha, color1) {
      var strokeData = this._strokeBuffer.data,
        width = imageRect.getWidth(),
        height = imageRect.getHeight(),
        imageYSkip = this._strokeBuffer.width - width,
        brushYSkip = brushWidth - width,
        brushOffset = brushRect.left + brushRect.top * brushWidth,
        imageOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, imageRect.top);
      this._strokedRegion.union(imageRect);
      for (var y = 0; y < height; y++, brushOffset += brushYSkip, imageOffset += imageYSkip) {
        for (var x = 0; x < width; x++, brushOffset++, imageOffset++) {
          var alpha1 = brushShape[brushOffset] * alpha / 255 | 0;
          if (alpha1 > 0) {
            var color2 = strokeData[imageOffset],
              alpha2 = color2 >>> 24,
              newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
              realAlpha = alpha1 * 255 / newAlpha | 0,
              invAlpha = 255 - realAlpha;

            // The usual alpha blending formula C = A * alpha + B * (1 - alpha)
            // has to rewritten in the form C = A + (1 - alpha) * B - (1 - alpha) *A
            // that way the rounding up errors won't cause problems
            strokeData[imageOffset] = newAlpha << 24 | (color1 >> 16 & 0xff) + ((color2 >> 16 & 0xff) * invAlpha - (color1 >> 16 & 0xff) * invAlpha) / 255 << 16 | (color1 >> 8 & 0xff) + ((color2 >> 8 & 0xff) * invAlpha - (color1 >> 8 & 0xff) * invAlpha) / 255 << 8 | (color1 & 0xff) + ((color2 & 0xff) * invAlpha - (color1 & 0xff) * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * Blend a brush stroke into the strokeBuffer
     *
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape - Defines the shape of the brush tip
     * @param {int} brushWidth - Width of the brushShape array
     * @param {int} alpha - 0 - 255 alpha of the brush stroke
     * @param {int} color1 - Greyscale intensity (0 - 255)
     */
  }, {
    key: "_paintToGreyscaleStrokeBuffer",
    value: function _paintToGreyscaleStrokeBuffer(brushRect, imageRect, brushShape, brushWidth, alpha, color1) {
      var strokeData = this._strokeBuffer.data;
      this._strokedRegion.union(imageRect);
      for (var destY = imageRect.top, brushY = brushRect.top; destY < imageRect.bottom; destY++, brushY++) {
        var srcOffset = brushRect.left + brushY * brushWidth,
          dstOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, destY);
        for (var destX = imageRect.left; destX < imageRect.right; destX++, srcOffset++, dstOffset++) {
          var alpha1 = brushShape[srcOffset] * alpha / 255 | 0;
          if (alpha1 <= 0) {
            continue;
          }
          var color2 = strokeData[dstOffset],
            alpha2 = color2 >> 8,
            newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0;
          if (newAlpha > 0) {
            var realAlpha = alpha1 * 255 / newAlpha | 0,
              invAlpha = 255 - realAlpha;

            // The usual alpha blending formula C = A * alpha + B * (1 - alpha)
            // has to rewritten in the form C = A + (1 - alpha) * B - (1 - alpha) *A
            // that way the rounding up errors won't cause problems

            strokeData[dstOffset] = newAlpha << 8 | color1 + ((color2 & 0xFF) * invAlpha - color1 * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "beginStroke",
    value: function beginStroke() {
      this._previousSamples = null;
    }

    /**
     * @override
     */
  }, {
    key: "paintDab",
    value: function paintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {
      var paintAlpha = Math.max(1, dab.alpha / 4),
        sampleX = (imageRect.left + imageRect.right) / 2,
        sampleY = (imageRect.top + imageRect.bottom) / 2,
        dx = Math.max(1, Math.min(WATERCOLOR_SAMPLE_RADIUS, imageRect.getWidth() * WATERCOLOR_SPREAD_FACTOR)),
        dy = Math.max(1, Math.min(WATERCOLOR_SAMPLE_RADIUS, imageRect.getHeight() * WATERCOLOR_SPREAD_FACTOR));
      if (sampleImage instanceof _CPGreyBmp.default) {
        // Mask editing
        if (this._previousSamples == null) {
          // Seed the previousSamples list to capacity with a bunch of copies of one sample to get us started
          this._previousSamples = new Array(WATERCOLOR_NUM_SAMPLES);
          this._previousSamples.fill(CPBrushToolWatercolor._sampleGrey(sampleImage, sampleX, sampleY, dx, dy));
        }
        var wcColor = average(this._previousSamples),
          newColor;

        // resaturation
        wcColor = lerp(wcColor, color & 0xFF, brushConfig.resat * brushConfig.resat);
        newColor = wcColor;

        // bleed
        wcColor = lerp(wcColor, CPBrushToolWatercolor._sampleGrey(sampleImage, sampleX, sampleY, dx, dy), brushConfig.bleed);
        this._previousSamples.push(wcColor);
        this._previousSamples.shift();
        this._paintToGreyscaleStrokeBuffer(brushRect, imageRect, dab.brush, dab.width, paintAlpha, Math.round(newColor));
      } else {
        if (this._previousSamples == null) {
          // Seed the previousSamples list to capacity with a bunch of copies of one sample to get us started
          this._previousSamples = new Array(WATERCOLOR_NUM_SAMPLES);
          this._previousSamples.fill(CPBrushToolWatercolor._sampleRGB(sampleImage, sampleX, sampleY, dx, dy));
        }
        var _wcColor = averageColorFloat(this._previousSamples);

        // resaturation - add the brush's color to the mixture
        _wcColor.mixWith(_CPColorFloat.default.createFromInt(color), brushConfig.resat * brushConfig.resat);
        var _newColor = _wcColor.toInt();

        // bleed
        _wcColor.mixWith(CPBrushToolWatercolor._sampleRGB(sampleImage, sampleX, sampleY, dx, dy), brushConfig.bleed);
        this._previousSamples.push(_wcColor);
        this._previousSamples.shift();
        this._paintToColorStrokeBuffer(brushRect, imageRect, dab.brush, dab.width, paintAlpha, _newColor);
      }
    }
  }], [{
    key: "_sampleGrey",
    value: function _sampleGrey(mask, x, y, dx, dy) {
      x = x | 0;
      y = y | 0;
      var samples = [{
        x: x,
        y: y
      }];
      for (var r = 0.25; r < 1.001; r += .25) {
        Array.prototype.push.apply(samples, [{
          x: ~~(x + r * dx),
          y: y
        }, {
          x: ~~(x - r * dx),
          y: y
        }, {
          x: x,
          y: ~~(y + r * dy)
        }, {
          x: x,
          y: ~~(y - r * dy)
        }, {
          x: ~~(x + r * 0.7 * dx),
          y: ~~(y + r * 0.7 * dy)
        }, {
          x: ~~(x + r * 0.7 * dx),
          y: ~~(y - r * 0.7 * dy)
        }, {
          x: ~~(x - r * 0.7 * dx),
          y: ~~(y + r * 0.7 * dy)
        }, {
          x: ~~(x - r * 0.7 * dx),
          y: ~~(y - r * 0.7 * dy)
        }]);
      }
      return average(samples.map(function (coord) {
        return mask.getPixel(coord.x, coord.y);
      }));
    }

    /**
     * Average out a bunch of samples from around the given pixel.
     *
     * @param {CPColorBmp} image
     * @param {number} x - Center of sample
     * @param {number} y
     * @param {number} dx - Spread of samples from center
     * @param {number} dy
     *
     * @returns {CPColorFloat}
     */
  }, {
    key: "_sampleRGB",
    value: function _sampleRGB(image, x, y, dx, dy) {
      x = x | 0;
      y = y | 0;
      var samples = [{
        x: x,
        y: y
      }];
      for (var r = 0.25; r < 1.001; r += .25) {
        Array.prototype.push.apply(samples, [{
          x: ~~(x + r * dx),
          y: y
        }, {
          x: ~~(x - r * dx),
          y: y
        }, {
          x: x,
          y: ~~(y + r * dy)
        }, {
          x: x,
          y: ~~(y - r * dy)
        }, {
          x: ~~(x + r * 0.7 * dx),
          y: ~~(y + r * 0.7 * dy)
        }, {
          x: ~~(x + r * 0.7 * dx),
          y: ~~(y - r * 0.7 * dy)
        }, {
          x: ~~(x - r * 0.7 * dx),
          y: ~~(y + r * 0.7 * dy)
        }, {
          x: ~~(x - r * 0.7 * dx),
          y: ~~(y - r * 0.7 * dy)
        }]);
      }
      return averageColorFloat(samples.map(function (coord) {
        return _CPColorFloat.default.createFromInt(image.getPixel(coord.x, coord.y));
      }));
    }
  }]);
  return CPBrushToolWatercolor;
}(CPBrushToolDirectBrush);
var CPBrushToolOil = exports.CPBrushToolOil = /*#__PURE__*/function (_CPBrushToolDirectBru2) {
  _inherits(CPBrushToolOil, _CPBrushToolDirectBru2);
  var _super7 = _createSuper(CPBrushToolOil);
  function CPBrushToolOil(strokeBuffer, strokedRegion) {
    var _this2;
    _classCallCheck(this, CPBrushToolOil);
    _this2 = _super7.call(this, strokeBuffer, strokedRegion);
    _this2.wantsOutputAsInput = true;
    return _this2;
  }

  /**
   * Sample intensities from the image and mix them into the brush.
   *
   * @param {CPColorBmp} maskToSample
   * @param {CPRect} brushRect
   * @param {CPRect} imageRect
   * @param {int} alpha1 - 0-255 controls how much paint is picked up from the image
   */
  _createClass(CPBrushToolOil, [{
    key: "_accumulatePaintFromMask",
    value: function _accumulatePaintFromMask(maskToSample, brushRect, imageRect, alpha1) {
      var brushData = this._brushBuffer.data,
        sampleData = maskToSample.data,
        width = imageRect.getWidth(),
        height = imageRect.getHeight(),
        srcOffset = brushRect.left + brushRect.top * this._brushBuffer.width,
        dstOffset = maskToSample.offsetOfPixel(imageRect.left, imageRect.top),
        srcYSkip = this._brushBuffer.width - width,
        dstYSkip = maskToSample.width - width;
      if (alpha1 <= 0) {
        return;
      }
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var grey1 = sampleData[dstOffset],
            grey2 = brushData[srcOffset],
            alpha2 = grey2 >> 8,
            newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
            realAlpha = alpha1 * 255 / newAlpha | 0,
            invAlpha = 255 - realAlpha;
          brushData[srcOffset] = newAlpha << 8 | grey1 + ((grey2 & 0xff) * invAlpha - grey1 * invAlpha) / 255;
        }
      }
    }

    /**
     * Add some of the given grey value back into the brush.
     *
     * @param {CPRect} brushRect
     * @param {int} alpha1 - Strength of resaturation (0-255)
     * @param {int} grey1 - Intensity to resaturate brush tip with
     */
  }, {
    key: "_resaturateBrushWithGrey",
    value: function _resaturateBrushWithGrey(brushRect, alpha1, grey1) {
      if (alpha1 <= 0) {
        return;
      }
      var brushData = this._brushBuffer.data,
        width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        brushOffset = brushRect.left + brushRect.top * this._brushBuffer.width,
        brushYSkip = this._brushBuffer.width - width;
      for (var y = 0; y < height; y++, brushOffset += brushYSkip) {
        for (var x = 0; x < width; x++, brushOffset++) {
          var grey2 = brushData[brushOffset],
            alpha2 = grey2 >> 8,
            newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
            realAlpha = alpha1 * 255 / newAlpha | 0,
            invAlpha = 255 - realAlpha;
          brushData[brushOffset] = newAlpha << 8 | grey1 + ((grey2 & 0xff) * invAlpha - grey1 * invAlpha) / 255;
        }
      }
    }

    /**
     * Mixes the paint on the current brush with the pixels of the layer, and writes the result into the
     * AG strokeBuffer.
     *
     * @param {CPGreyBmp} destImage - Image that is being drawn onto
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape - Brush opacity map which defines its shape, of the same width as brushBuffer
     * @param {int} alpha 0-255 brush alpha
     */
  }, {
    key: "_paintToGreyscaleStrokeBuffer",
    value: function _paintToGreyscaleStrokeBuffer(destImage, brushRect, imageRect, brushShape, alpha) {
      var strokeData = this._strokeBuffer.data,
        brushData = this._brushBuffer.data,
        destImageData = destImage.data;
      this._strokedRegion.union(imageRect);
      for (var y = imageRect.top, brushY = brushRect.top; y < imageRect.bottom; y++, brushY++) {
        var bufferOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushY),
          strokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, y),
          layerOffset = destImage.offsetOfPixel(imageRect.left, y);
        for (var x = imageRect.left; x < imageRect.right; x++, bufferOffset++, layerOffset++, strokeOffset++) {
          var grey1 = brushData[bufferOffset],
            alpha1 = (grey1 >> 8) * brushShape[bufferOffset] * alpha / (255 * 255) | 0;
          if (alpha1 > 0) {
            var grey2 = destImageData[layerOffset],
              invAlpha = 255 - alpha1;
            strokeData[strokeOffset] = 255 << 8 | (grey1 & 0xff) + (grey2 * invAlpha - (grey1 & 0xff) * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * Sample colors from the image and mix them into the brush.
     *
     * @param {CPColorBmp} imageToSample
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {int} alpha - 0-255 controls how much paint is picked up from the image
     */
  }, {
    key: "_accumulatePaintFromImage",
    value: function _accumulatePaintFromImage(imageToSample, brushRect, imageRect, alpha) {
      var brushData = this._brushBuffer.data,
        sampleData = imageToSample.data,
        width = imageRect.getWidth(),
        height = imageRect.getHeight(),
        srcOffset = brushRect.left + brushRect.top * this._brushBuffer.width,
        dstOffset = imageToSample.offsetOfPixel(imageRect.left, imageRect.top),
        srcYSkip = this._brushBuffer.width - width,
        dstYSkip = (imageToSample.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL;
      for (var y = 0; y < height; y++, srcOffset += srcYSkip, dstOffset += dstYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var alpha1 = sampleData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET] * alpha / 255 | 0;
          if (alpha1 > 0) {
            var color2 = brushData[srcOffset],
              alpha2 = color2 >>> 24,
              newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
              realAlpha = alpha1 * 255 / newAlpha | 0,
              invAlpha = 255 - realAlpha,
              color1Red = sampleData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET],
              color1Green = sampleData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET],
              color1Blue = sampleData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET];
            brushData[srcOffset] = newAlpha << 24 | color1Red + ((color2 >> 16 & 0xff) * invAlpha - color1Red * invAlpha) / 255 << 16 | color1Green + ((color2 >> 8 & 0xff) * invAlpha - color1Green * invAlpha) / 255 << 8 | color1Blue + ((color2 & 0xff) * invAlpha - color1Blue * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * Add some of the given color back into the brush.
     *
     * @param {CPRect} brushRect
     * @param {int} alpha1 - Strength of resaturation (0-255)
     * @param {int} color1 - RGB color to resaturate brush tip with
     */
  }, {
    key: "_resaturateBrushWithColor",
    value: function _resaturateBrushWithColor(brushRect, alpha1, color1) {
      if (alpha1 <= 0) {
        return;
      }
      var brushData = this._brushBuffer.data,
        width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        brushOffset = brushRect.left + brushRect.top * this._brushBuffer.width,
        brushYSkip = this._brushBuffer.width - width;
      for (var y = 0; y < height; y++, brushOffset += brushYSkip) {
        for (var x = 0; x < width; x++, brushOffset++) {
          var color2 = brushData[brushOffset],
            alpha2 = color2 >>> 24,
            newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
            realAlpha = alpha1 * 255 / newAlpha | 0,
            invAlpha = 255 - realAlpha;
          brushData[brushOffset] = newAlpha << 24 | (color1 >>> 16 & 0xff) + ((color2 >>> 16 & 0xff) * invAlpha - (color1 >>> 16 & 0xff) * invAlpha) / 255 << 16 | (color1 >>> 8 & 0xff) + ((color2 >>> 8 & 0xff) * invAlpha - (color1 >>> 8 & 0xff) * invAlpha) / 255 << 8 | (color1 & 0xff) + ((color2 & 0xff) * invAlpha - (color1 & 0xff) * invAlpha) / 255;
        }
      }
    }

    /**
     * Mixes the paint on the current brush with the pixels of the layer, and writes the result into the
     * strokeBuffer.
     *
     * @param {CPColorBmp} destImage - Image that is being drawn onto
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape - Brush opacity map which defines its shape, of the same width as brushBuffer
     * @param {int} alpha 0-255 brush alpha
     */
  }, {
    key: "_paintToColorStrokeBuffer",
    value: function _paintToColorStrokeBuffer(destImage, brushRect, imageRect, brushShape, alpha) {
      var strokeData = this._strokeBuffer.data,
        brushData = this._brushBuffer.data,
        destImageData = destImage.data;
      this._strokedRegion.union(imageRect);
      for (var y = imageRect.top, brushY = brushRect.top; y < imageRect.bottom; y++, brushY++) {
        var bufferOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushY),
          strokeOffset = this._strokeBuffer.offsetOfPixel(imageRect.left, y),
          layerOffset = destImage.offsetOfPixel(imageRect.left, y);
        for (var x = imageRect.left; x < imageRect.right; x++, bufferOffset++, layerOffset += _CPColorBmp.default.BYTES_PER_PIXEL, strokeOffset++) {
          var color1 = brushData[bufferOffset],
            alpha1 = (color1 >>> 24) * brushShape[bufferOffset] * alpha / (255 * 255) | 0;
          if (alpha1 > 0) {
            var alpha2 = destImageData[layerOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET],
              newAlpha = alpha1 + alpha2 - alpha1 * alpha2 / 255 | 0,
              color2Red = destImageData[layerOffset + _CPColorBmp.default.RED_BYTE_OFFSET],
              color2Green = destImageData[layerOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET],
              color2Blue = destImageData[layerOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET],
              realAlpha = alpha1 * 255 / newAlpha | 0,
              invAlpha = 255 - realAlpha;
            strokeData[strokeOffset] = newAlpha << 24 | (color1 >> 16 & 0xff) + (color2Red * invAlpha - (color1 >> 16 & 0xff) * invAlpha) / 255 << 16 | (color1 >> 8 & 0xff) + (color2Green * invAlpha - (color1 >> 8 & 0xff) * invAlpha) / 255 << 8 | (color1 & 0xff) + (color2Blue * invAlpha - (color1 & 0xff) * invAlpha) / 255;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "paintDab",
    value: function paintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {
      if (destImage instanceof _CPColorBmp.default) {
        if (this._brushBuffer == null) {
          // TODO this means we can't have pressure sensitive tip sizes for Oil (see CPBrushInfo.applyPressure)
          this._brushBuffer = new _CPGreyBmp.default(dab.width, dab.height, 32); // Initialized to 0 for us by the browser

          this._accumulatePaintFromImage(sampleImage, brushRect, imageRect, 255);
        } else {
          this._resaturateBrushWithColor(brushRect, ~~(brushConfig.resat <= 0.0 ? 0 : Math.max(1, brushConfig.resat * brushConfig.resat * 255)), color & 0xFFFFFF);
          this._paintToColorStrokeBuffer(destImage, brushRect, imageRect, dab.brush, dab.alpha);
          this._accumulatePaintFromImage(sampleImage, brushRect, imageRect, ~~(brushConfig.bleed * 255));
        }
      } else {
        if (this._brushBuffer == null) {
          this._brushBuffer = new _CPGreyBmp.default(dab.width, dab.height, 16); // Initialized to 0 for us by the browser

          this._accumulatePaintFromMask(sampleImage, brushRect, imageRect, 255);
        } else {
          this._resaturateBrushWithGrey(brushRect, ~~(brushConfig.resat <= 0.0 ? 0 : Math.max(1, brushConfig.resat * brushConfig.resat * 255)), color & 0xFF);
          this._paintToGreyscaleStrokeBuffer(destImage, brushRect, imageRect, dab.brush, dab.alpha);
          this._accumulatePaintFromMask(sampleImage, brushRect, imageRect, ~~(brushConfig.bleed * 255));
        }
      }
    }
  }, {
    key: "endStroke",
    value: function endStroke() {
      this._brushBuffer = null;
    }
  }]);
  return CPBrushToolOil;
}(CPBrushToolDirectBrush);
/**
 * Spread the image pixels within the given rectangle outwards to fill the image with pixels.
 *
 * @param {CPGreyBmp} image
 * @param {CPRect} rect
 */
function stretchRectToFillBuffer(image, rect) {
  var imageData = image.data;

  // First stretch the source rect pixels out horizontally to fill W and E areas
  if (rect.left > 0) {
    for (var y = rect.top; y < rect.bottom; y++) {
      var rowStartOffset = y * image.width,
        _dstOffset = rowStartOffset,
        fillColor = imageData[rowStartOffset + rect.left];
      for (var x = 0; x < rect.left; x++, _dstOffset++) {
        imageData[_dstOffset] = fillColor;
      }
    }
  }
  if (rect.right < image.width) {
    for (var _y = rect.top; _y < rect.bottom; _y++) {
      var _rowStartOffset = _y * image.width,
        _dstOffset2 = _rowStartOffset + rect.right,
        _fillColor = imageData[_dstOffset2 - 1];
      for (var _x = rect.right; _x < image.width; _x++, _dstOffset2++) {
        imageData[_dstOffset2] = _fillColor;
      }
    }
  }

  // Then stretch those rows upwards and downwards (to fill NW, N, NE, SW, S, SE areas)
  var dstOffset = 0;
  for (var _y2 = 0; _y2 < rect.top; _y2++) {
    var srcOffset = rect.top * image.width;
    for (var _x2 = 0; _x2 < image.width; _x2++, srcOffset++, dstOffset++) {
      imageData[dstOffset] = imageData[srcOffset];
    }
  }
  dstOffset = rect.bottom * image.width;
  for (var _y3 = rect.bottom; _y3 < image.width; _y3++) {
    var _srcOffset = (rect.bottom - 1) * image.width;
    for (var _x3 = 0; _x3 < image.width; _x3++, _srcOffset++, dstOffset++) {
      imageData[dstOffset] = imageData[_srcOffset];
    }
  }
}
var CPBrushToolSmudge = exports.CPBrushToolSmudge = /*#__PURE__*/function (_CPBrushToolDirectBru3) {
  _inherits(CPBrushToolSmudge, _CPBrushToolDirectBru3);
  var _super8 = _createSuper(CPBrushToolSmudge);
  function CPBrushToolSmudge(strokeBuffer, strokedRegion) {
    var _this3;
    _classCallCheck(this, CPBrushToolSmudge);
    _this3 = _super8.call(this, strokeBuffer, strokedRegion);
    _this3._brushBuffer = null;
    _this3.wantsOutputAsInput = true;
    _this3.noMergePhase = true;
    return _this3;
  }

  /**
   * Pick up paint from the given image and store into the AG brush buffer.
   *
   * @param {CPGreyBmp} sampleMask - Mask to sample from
   * @param {CPRect} maskRect - Rectangle of the canvas that our brush covers
   * @param {CPRect} brushRect - The corresponding rectangle within the brush buffer
   * @param {int} alpha - Alpha of brush (0-255)
   */
  _createClass(CPBrushToolSmudge, [{
    key: "_sampleFromMask",
    value: function _sampleFromMask(sampleMask, brushRect, maskRect, alpha) {
      var brushData = this._brushBuffer.data,
        width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        brushOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),
        maskOffset = sampleMask.offsetOfPixel(maskRect.left, maskRect.top),
        brushYSkip = this._brushBuffer.width - width,
        maskYSkip = sampleMask.width - width,
        invAlpha = 255 - alpha;
      if (alpha == 255) {
        // Brush doesn't sample from the image
        return;
      }

      // Blend pixels (in the area where the brush overlaps the canvas) into the brush buffer
      for (var y = 0; y < height; y++, brushOffset += brushYSkip, maskOffset += maskYSkip) {
        for (var x = 0; x < width; x++, brushOffset++, maskOffset++) {
          var sampleGrey = sampleMask.data[maskOffset],
            oldBrushColor = brushData[brushOffset],
            newBrushGrey = (sampleGrey * invAlpha + (oldBrushColor & 0xff) * alpha) / 255,
            newBrushColor = (255 * invAlpha + (oldBrushColor >> 8) * alpha) / 255 << 8 | newBrushGrey;

          /* If low-alpha rounding caused us to not even update the brush color, take a 1-unit step
           * in the direction of the sample color.
           */
          if (newBrushColor == oldBrushColor) {
            if (sampleGrey > newBrushGrey) {
              newBrushColor++;
            } else if (sampleGrey < newBrushGrey) {
              newBrushColor--;
            }
          }
          brushData[brushOffset] = newBrushColor;
        }
      }

      /*
       * The areas of the brush buffer that lay outside the canvas haven't been filled yet. Stretch the pixels
       * around the edge of the area we did sample to fill in the gaps.
       */
      stretchRectToFillBuffer(this._brushBuffer, brushRect);
    }

    /**
     * Replace the destination mask with the smudge buffer within the shape of the brush tip.
     *
     * @param {CPGreyBmp} destMask
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape - Of the same width as this._brushBuffer
     */
  }, {
    key: "_paintToMask",
    value: function _paintToMask(destMask, brushRect, imageRect, brushShape) {
      var width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        srcOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),
        dstOffset = destMask.offsetOfPixel(imageRect.left, imageRect.top),
        srcYSkip = this._brushBuffer.width - width,
        dstYSkip = destMask.width - width,
        destMaskData = destMask.data,
        brushPaintData = this._brushBuffer.data;
      for (var y = 0; y < height; y++, dstOffset += dstYSkip, srcOffset += srcYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset++) {
          var paintValue = brushPaintData[srcOffset],
            strokeAlpha = (paintValue >> 8) * brushShape[srcOffset] / 255 | 0,
            strokeColor = paintValue & 0xff;
          if (strokeAlpha > 0) {
            destMaskData[dstOffset] = strokeColor;
          }
        }
      }
    }

    /**
     * Pick up paint from the given image and store into the brush buffer.
     *
     * @param {CPColorBmp} sampleImage - Image to sample from
     * @param {CPRect} imageRect - Rectangle of the canvas that our brush covers
     * @param {CPRect} brushRect - The corresponding rectangle within the brush buffer
     * @param {int} alpha - Alpha of brush (0-255)
     */
  }, {
    key: "_sampleFromImage",
    value: function _sampleFromImage(sampleImage, brushRect, imageRect, alpha) {
      var brushData = this._brushBuffer.data,
        width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        brushOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),
        imageOffset = sampleImage.offsetOfPixel(imageRect.left, imageRect.top),
        brushYSkip = this._brushBuffer.width - width,
        imageYSkip = (sampleImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL,
        invAlpha = 255 - alpha;
      if (alpha == 255) {
        // Brush doesn't sample from the image
        return;
      }

      // Blend pixels (in the area where the brush overlaps the canvas) into the brush buffer
      for (var y = 0; y < height; y++, brushOffset += brushYSkip, imageOffset += imageYSkip) {
        for (var x = 0; x < width; x++, brushOffset++, imageOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var sampleRed = sampleImage.data[imageOffset + _CPColorBmp.default.RED_BYTE_OFFSET],
            sampleGreen = sampleImage.data[imageOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET],
            sampleBlue = sampleImage.data[imageOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET],
            sampleAlpha = sampleImage.data[imageOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET],
            oldBrushColor = brushData[brushOffset],
            newBrushColor = (sampleAlpha * invAlpha + (oldBrushColor >> 24 & 0xff) * alpha) / 255 << 24 & 0xff000000 | (sampleRed * invAlpha + (oldBrushColor >> 16 & 0xff) * alpha) / 255 << 16 & 0xff0000 | (sampleGreen * invAlpha + (oldBrushColor >> 8 & 0xff) * alpha) / 255 << 8 & 0xff00 | (sampleBlue * invAlpha + (oldBrushColor & 0xff) * alpha) / 255 & 0xff;

          /* If low-alpha rounding caused us to not even update the brush color, take a 1-unit step
           * in the direction of the sample color.
           */
          if (newBrushColor == oldBrushColor) {
            var newBrushRed = (newBrushColor & 0xff0000) >> 16,
              newBrushGreen = (newBrushColor & 0x00ff00) >> 8,
              newBrushBlue = newBrushColor & 0x0000ff;
            if (sampleRed > newBrushRed) {
              newBrushColor += 1 << 16;
            } else if (sampleRed < newBrushRed) {
              newBrushColor -= 1 << 16;
            }
            if (sampleGreen > newBrushGreen) {
              newBrushColor += 1 << 8;
            } else if (sampleGreen < newBrushGreen) {
              newBrushColor -= 1 << 8;
            }
            if (sampleBlue > newBrushBlue) {
              newBrushColor += 1;
            } else if (sampleBlue < newBrushBlue) {
              newBrushColor -= 1;
            }
          }
          brushData[brushOffset] = newBrushColor;
        }
      }

      /*
       * The areas of the brush buffer that lay outside the canvas haven't been filled yet. Stretch the pixels
       * around the edge of the area we did sample to fill in the gaps.
       */
      stretchRectToFillBuffer(this._brushBuffer, brushRect);
    }

    /**
     * Replace the layer's image with the smudge buffer within the shape of the brush tip.
     *
     * @param {CPColorBmp} destImage
     * @param {CPRect} brushRect
     * @param {CPRect} imageRect
     * @param {Uint8Array} brushShape - Of the same width as this._brushBuffer
     */
  }, {
    key: "_paintToImage",
    value: function _paintToImage(destImage, brushRect, imageRect, brushShape) {
      var width = brushRect.getWidth(),
        height = brushRect.getHeight(),
        srcOffset = this._brushBuffer.offsetOfPixel(brushRect.left, brushRect.top),
        dstOffset = destImage.offsetOfPixel(imageRect.left, imageRect.top),
        srcYSkip = this._brushBuffer.width - width,
        dstYSkip = (destImage.width - width) * _CPColorBmp.default.BYTES_PER_PIXEL,
        destImageData = destImage.data,
        brushPaintData = this._brushBuffer.data;
      for (var y = 0; y < height; y++, dstOffset += dstYSkip, srcOffset += srcYSkip) {
        for (var x = 0; x < width; x++, srcOffset++, dstOffset += _CPColorBmp.default.BYTES_PER_PIXEL) {
          var paintColor = brushPaintData[srcOffset],
            strokeAlpha = (paintColor >>> 24) * brushShape[srcOffset] / 255 | 0;
          if (strokeAlpha > 0) {
            destImageData[dstOffset + _CPColorBmp.default.RED_BYTE_OFFSET] = paintColor >> 16 & 0xff;
            destImageData[dstOffset + _CPColorBmp.default.GREEN_BYTE_OFFSET] = paintColor >> 8 & 0xff;
            destImageData[dstOffset + _CPColorBmp.default.BLUE_BYTE_OFFSET] = paintColor & 0xff;
            destImageData[dstOffset + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = paintColor >> 24 & 0xff;
          }
        }
      }
    }

    /**
     * @override
     */
  }, {
    key: "paintDab",
    value: function paintDab(destImage, imageRect, sampleImage, brushConfig, brushRect, dab, color) {
      if (destImage instanceof _CPColorBmp.default) {
        if (this._brushBuffer == null) {
          this._brushBuffer = new _CPGreyBmp.default(dab.width, dab.height, 32);
          this._sampleFromImage(sampleImage, brushRect, imageRect, 0);
        } else {
          this._sampleFromImage(sampleImage, brushRect, imageRect, dab.alpha);
          this._paintToImage(destImage, brushRect, imageRect, dab.brush);
        }
      } else {
        if (this._brushBuffer == null) {
          this._brushBuffer = new _CPGreyBmp.default(dab.width, dab.height, 16);
          this._sampleFromMask(sampleImage, brushRect, imageRect, 0);
        } else {
          this._sampleFromMask(sampleImage, brushRect, imageRect, dab.alpha);
          this._paintToMask(destImage, brushRect, imageRect, dab.brush);
        }
      }
    }

    /**
     * A no-op since our paint implementation paints directly to the underlying image during the stroke.
     *
     * @override
     */
  }, {
    key: "mergeOntoImage",
    value: function mergeOntoImage(destImage, undoImage, color) {}
  }, {
    key: "mergeOntoMask",
    value: function mergeOntoMask(destMask, undoMask, color) {}

    /**
     * @override
     */
  }, {
    key: "beginStroke",
    value: function beginStroke() {
      this._brushBuffer = null;
    }

    /**
     * @override
     */
  }, {
    key: "endStroke",
    value: function endStroke() {
      this._brushBuffer = null;
    }
  }]);
  return CPBrushToolSmudge;
}(CPBrushToolDirectBrush);

},{"../util/CPColorFloat.js":59,"./CPBrushInfo.js":8,"./CPColorBmp.js":13,"./CPGreyBmp.js":14}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = load;
exports.save = save;
var _CPArtwork = _interopRequireDefault(require("./CPArtwork.js"));
var _CPImageLayer = _interopRequireDefault(require("./CPImageLayer.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _ArrayDataStream = _interopRequireDefault(require("../util/ArrayDataStream.js"));
var _CPLayerGroup = _interopRequireDefault(require("./CPLayerGroup.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _CPBlend = _interopRequireDefault(require("./CPBlend.js"));
var _pako = _interopRequireDefault(require("pako"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                                                                                                                                                                                                  by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                  it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                  the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                  (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                  GNU General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                  along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                              */
/**
 * Concat two Uint8Arrays to make a new one and return it.
 *
 * Either one may be set to null. If either one is null, the other is returned. If both are null, null is
 * returned.
 */
function concatBuffers(one, two) {
  if (one === null || one.length === 0) {
    return two;
  }
  if (two === null || two.length === 0) {
    return one;
  }
  var result = new Uint8Array(one.length + two.length);
  result.set(one, 0);
  result.set(two, one.length);
  return result;
}
var OUR_MAJOR_VERSION = 0,
  OUR_MINOR_VERSION = 10,
  MAX_SUPPORTED_MAJOR_VERSION = OUR_MAJOR_VERSION,
  CHI_MAGIC = "CHIBIOEK",
  CHUNK_TAG_HEAD = "HEAD",
  CHUNK_TAG_LAYER = "LAYR",
  CHUNK_TAG_GROUP = "GRUP",
  CHUNK_TAG_END = "ZEND";
function CPChibiFileHeader(stream) {
  this.version = stream.readU32BE();
  this.width = stream.readU32BE();
  this.height = stream.readU32BE();
  this.layersNb = stream.readU32BE();
}
CPChibiFileHeader.FIXED_HEADER_LENGTH = 4 * 4;
function ChibiChunkHeader(stream) {
  var chunkType = new Array(4);
  for (var i = 0; i < chunkType.length; i++) {
    chunkType[i] = String.fromCharCode(stream.readByte());
  }
  this.chunkType = chunkType.join("");
  this.chunkSize = stream.readU32BE();
  if (stream.eof) {
    throw "Truncated chunk";
  }
}
ChibiChunkHeader.HEADER_LENGTH = 8;
var LAYER_FLAG_VISIBLE = 1,
  LAYER_FLAG_CLIP = 2,
  LAYER_FLAG_HAS_MASK = 4,
  LAYER_FLAG_MASK_LINKED = 8,
  LAYER_FLAG_MASK_VISIBLE = 16,
  LAYER_FLAG_EXPANDED = 32,
  LAYER_FLAG_ALPHA_LOCKED = 64,
  // Set if the LM_MULTIPLY2 blend mode should be used instead of the LM_MULTIPLY noted in the layer's blend mode
  LAYER_FLAG_MULTIPLY2 = 128,
  LAYER_DECODE_STATE_FIXED_HEADER = 0,
  LAYER_DECODE_STATE_VARIABLE_HEADER = 1,
  LAYER_DECODE_STATE_IMAGE_DATA = 3,
  LAYER_DECODE_STATE_MASK_DATA = 4,
  LAYER_DECODE_STATE_SKIP_TRAILING = 5,
  LAYER_DECODE_STATE_COMPLETE = 6;
var ChibiLayerDecoder = /*#__PURE__*/function () {
  /**
   * @param {ChibiChunkHeader} chunkHeader - The header for the layer chunk to decode
   * @param {int} width - The width of the document
   * @param {int} height - The height of the document
   */
  function ChibiLayerDecoder(chunkHeader, width, height) {
    _classCallCheck(this, ChibiLayerDecoder);
    this.chunkHeader = chunkHeader;
    this.width = width;
    this.height = height;
    this.state = LAYER_DECODE_STATE_FIXED_HEADER;
    this.payloadOffset = 0;
    this.skipBytes = 0;
    this.nameLength = 0;
    this.done = false;
    this.colorDecoder = null;
    this.maskDecoder = null;
  }
  _createClass(ChibiLayerDecoder, [{
    key: "readFixedHeader",
    value: function readFixedHeader(stream) {
      this.payloadOffset = stream.readU32BE();
      this.blendMode = stream.readU32BE();
      this.alpha = stream.readU32BE();
      var layerFlags = stream.readU32BE();
      this.visible = (layerFlags & LAYER_FLAG_VISIBLE) != 0;
      this.clip = (layerFlags & LAYER_FLAG_CLIP) != 0;
      this.hasMask = (layerFlags & LAYER_FLAG_HAS_MASK) != 0;
      this.maskLinked = (layerFlags & LAYER_FLAG_MASK_LINKED) != 0;
      this.maskVisible = (layerFlags & LAYER_FLAG_MASK_VISIBLE) != 0;
      this.expanded = (layerFlags & LAYER_FLAG_EXPANDED) != 0;
      this.lockAlpha = (layerFlags & LAYER_FLAG_ALPHA_LOCKED) != 0;
      if (this.blendMode === _CPBlend.default.LM_MULTIPLY && (layerFlags & LAYER_FLAG_MULTIPLY2) !== 0) {
        this.blendMode = _CPBlend.default.LM_MULTIPLY2;
      }
      this.nameLength = stream.readU32BE();
    }
  }, {
    key: "getFixedHeaderLen",
    value: function getFixedHeaderLen() {
      return 5 * 4;
    }
  }, {
    key: "getVariableHeaderLen",
    value: function getVariableHeaderLen() {
      return this.nameLength;
    }
  }, {
    key: "readVariableSizeHeader",
    value: function readVariableSizeHeader(stream) {
      this.name = stream.readString(this.nameLength);
    }

    /**
     * Decode some layer data from the beginning of the given block. Returns any non-layer data
     * that was left over from that block, or null if the block was read completely.
     *
     * Keep calling with more data until the .done property is set to true.
     *
     * @param {Uint8Array} block
     * @returns {?Uint8Array}
     */
  }, {
    key: "decode",
    value: function decode(block) {
      var stream;

      // Dummy loop so we can re-enter the switch statement with "continue"
      while (true) {
        if (this.skipBytes > 0) {
          if (this.skipBytes >= block.length) {
            this.skipBytes -= block.length;
            return null;
          } else {
            block = block.subarray(this.skipBytes);
            this.skipBytes = 0;
          }
        }
        switch (this.state) {
          case LAYER_DECODE_STATE_FIXED_HEADER:
            // Wait for first part of header to arrive
            if (block.length < this.getFixedHeaderLen()) {
              break;
            }
            stream = new _ArrayDataStream.default(block);
            this.readFixedHeader(stream);
            block = block.subarray(stream.pos);
            this.state = LAYER_DECODE_STATE_VARIABLE_HEADER;
            continue;
          case LAYER_DECODE_STATE_VARIABLE_HEADER:
            // Wait for variable part of header to arrive
            if (block.length < this.getVariableHeaderLen()) {
              break;
            }
            stream = new _ArrayDataStream.default(block);
            this.readVariableSizeHeader(stream);
            this.layer = this.createLayer();
            if (this.hasMask) {
              this.layer.setMask(new _CPGreyBmp.default(this.width, this.height, 8));
              this.maskDecoder = new CPMaskDecoder(this.layer.mask);
            }
            if (this.layer instanceof _CPImageLayer.default) {
              this.colorDecoder = new CPColorPixelsDecoder(this.layer.image);
            }
            this.skipBytes = this.payloadOffset - this.getFixedHeaderLen();
            if (this.colorDecoder) {
              this.state = LAYER_DECODE_STATE_IMAGE_DATA;
            } else if (this.maskDecoder) {
              this.state = LAYER_DECODE_STATE_MASK_DATA;
            } else {
              this.state = LAYER_DECODE_STATE_SKIP_TRAILING;
            }
            continue;
          case LAYER_DECODE_STATE_IMAGE_DATA:
            block = this.colorDecoder.decode(block);
            if (this.colorDecoder.done) {
              if (this.maskDecoder) {
                this.state = LAYER_DECODE_STATE_MASK_DATA;
              } else {
                this.state = LAYER_DECODE_STATE_SKIP_TRAILING;
              }
              continue;
            }
            break;
          case LAYER_DECODE_STATE_MASK_DATA:
            block = this.maskDecoder.decode(block);
            if (this.maskDecoder.done) {
              this.state = LAYER_DECODE_STATE_SKIP_TRAILING;
              continue;
            }
            break;
          case LAYER_DECODE_STATE_SKIP_TRAILING:
            var bytesRead = this.payloadOffset;
            if (this.colorDecoder) {
              bytesRead += this.colorDecoder.bytesTotal;
            }
            if (this.maskDecoder) {
              bytesRead += this.maskDecoder.bytesTotal;
            }
            this.state = LAYER_DECODE_STATE_COMPLETE;
            this.skipBytes = this.chunkHeader.chunkSize - bytesRead;
            continue;
          case LAYER_DECODE_STATE_COMPLETE:
            this.done = true;
        }
        break;
      }
      return block;
    }
  }]);
  return ChibiLayerDecoder;
}();
var ChibiImageLayerDecoder = /*#__PURE__*/function (_ChibiLayerDecoder) {
  _inherits(ChibiImageLayerDecoder, _ChibiLayerDecoder);
  var _super = _createSuper(ChibiImageLayerDecoder);
  function ChibiImageLayerDecoder() {
    _classCallCheck(this, ChibiImageLayerDecoder);
    return _super.apply(this, arguments);
  }
  _createClass(ChibiImageLayerDecoder, [{
    key: "createLayer",
    value:
    /**
     * Create a layer using the properties previously read into this decoder.
     *
     * @returns {CPImageLayer}
     */
    function createLayer() {
      var layer = new _CPImageLayer.default(this.width, this.height, this.name);
      layer.setBlendMode(this.blendMode);
      layer.setAlpha(this.alpha);
      layer.setVisible(this.visible);
      layer.setClip(this.clip);
      layer.setMaskLinked(this.maskLinked);
      layer.setMaskVisible(this.maskVisible);
      layer.setLockAlpha(this.lockAlpha);
      return layer;
    }
  }]);
  return ChibiImageLayerDecoder;
}(ChibiLayerDecoder);
var ChibiLayerGroupDecoder = /*#__PURE__*/function (_ChibiLayerDecoder2) {
  _inherits(ChibiLayerGroupDecoder, _ChibiLayerDecoder2);
  var _super2 = _createSuper(ChibiLayerGroupDecoder);
  function ChibiLayerGroupDecoder(chunkHeader, width, height) {
    var _this;
    _classCallCheck(this, ChibiLayerGroupDecoder);
    _this = _super2.call(this, chunkHeader, width, height);
    _this.childLayers = 0;
    return _this;
  }
  _createClass(ChibiLayerGroupDecoder, [{
    key: "readFixedHeader",
    value: function readFixedHeader(stream) {
      _get(_getPrototypeOf(ChibiLayerGroupDecoder.prototype), "readFixedHeader", this).call(this, stream);
      this.childLayers = stream.readU32BE();
    }
  }, {
    key: "getFixedHeaderLen",
    value: function getFixedHeaderLen() {
      return _get(_getPrototypeOf(ChibiLayerGroupDecoder.prototype), "getFixedHeaderLen", this).call(this) + 4;
    }

    /**
     * Create a group using the properties previously read into this decoder.
     *
     * @returns {CPLayerGroup}
     */
  }, {
    key: "createLayer",
    value: function createLayer() {
      var group = new _CPLayerGroup.default(this.name, this.blendMode);
      group.setAlpha(this.alpha);
      group.setVisible(this.visible);
      group.setExpanded(this.expanded);
      group.setMaskLinked(this.maskLinked);
      group.setMaskVisible(this.maskVisible);
      return group;
    }
  }]);
  return ChibiLayerGroupDecoder;
}(ChibiLayerDecoder);
/**
 * Write the RGBA pixels of the given bitmap to the stream in ARGB order to match the Chibi specs.
 *
 * @param {ArrayDataStream} stream
 * @param {CPColorBmp} bitmap
 */
function writeColorBitmapToStream(stream, bitmap) {
  var pos = stream.pos,
    buffer = stream.data,
    bitmapData = bitmap.data;
  for (var i = 0; i < bitmapData.length; i += _CPColorBmp.default.BYTES_PER_PIXEL) {
    buffer[pos++] = bitmapData[i + _CPColorBmp.default.ALPHA_BYTE_OFFSET];
    buffer[pos++] = bitmapData[i + _CPColorBmp.default.RED_BYTE_OFFSET];
    buffer[pos++] = bitmapData[i + _CPColorBmp.default.GREEN_BYTE_OFFSET];
    buffer[pos++] = bitmapData[i + _CPColorBmp.default.BLUE_BYTE_OFFSET];
  }
  stream.pos = pos;
}

/**
 * Write the 8-bit greyscale pixels of the given bitmap to the stream.
 *
 * @param {ArrayDataStream} stream
 * @param {CPGreyBmp} bitmap
 */
function writeMaskToStream(stream, bitmap) {
  stream.data.set(bitmap.data, stream.pos);
  stream.pos += bitmap.data.length;
}
var CPColorPixelsDecoder = /*#__PURE__*/function () {
  /**
   * @param {CPColorBmp} destImage - Image to decode into.
   */
  function CPColorPixelsDecoder(destImage) {
    _classCallCheck(this, CPColorPixelsDecoder);
    this.bytesRead = 0;
    this.bytesTotal = destImage.width * destImage.height * _CPColorBmp.default.BYTES_PER_PIXEL;
    this.output = destImage.data;
    this.done = false;
  }

  /**
   * Decode A,R,G,B pixels from the given buffer into the R,G,B,A destination image.
   *
   * Returns the buffer with the read bytes removed from the front, or null if the buffer was read in its entirety.
   *
   * @param {Uint8Array} buffer
   */
  _createClass(CPColorPixelsDecoder, [{
    key: "decode",
    value: function decode(buffer) {
      if (buffer == null) {
        return null;
      }
      var subpixel = this.bytesRead % _CPColorBmp.default.BYTES_PER_PIXEL,
        dstPixelStartOffset = this.bytesRead - subpixel,
        bufferPos = 0,
        // Map from source channel order to CPLayer's dest order
        channelMap = [_CPColorBmp.default.ALPHA_BYTE_OFFSET, _CPColorBmp.default.RED_BYTE_OFFSET, _CPColorBmp.default.GREEN_BYTE_OFFSET, _CPColorBmp.default.BLUE_BYTE_OFFSET];

      // The first pixel might be a partial one, since we might be continuing a pixel split over buffers
      for (; subpixel < _CPColorBmp.default.BYTES_PER_PIXEL && bufferPos < buffer.length; subpixel++) {
        this.output[dstPixelStartOffset + channelMap[subpixel]] = buffer[bufferPos];
        bufferPos++;
      }
      this.bytesRead += bufferPos;

      // How many more pixels are we to read in this buffer?
      var bytesRemain = Math.min(buffer.length - bufferPos, this.bytesTotal - this.bytesRead) | 0,
        fullPixelsRemain = bytesRemain / _CPColorBmp.default.BYTES_PER_PIXEL | 0,
        subpixelsRemain = bytesRemain % _CPColorBmp.default.BYTES_PER_PIXEL;
      for (var i = 0; i < fullPixelsRemain; i++) {
        this.output[this.bytesRead + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = buffer[bufferPos];
        this.output[this.bytesRead + _CPColorBmp.default.RED_BYTE_OFFSET] = buffer[bufferPos + 1];
        this.output[this.bytesRead + _CPColorBmp.default.GREEN_BYTE_OFFSET] = buffer[bufferPos + 2];
        this.output[this.bytesRead + _CPColorBmp.default.BLUE_BYTE_OFFSET] = buffer[bufferPos + 3];
        this.bytesRead += _CPColorBmp.default.BYTES_PER_PIXEL;
        bufferPos += _CPColorBmp.default.BYTES_PER_PIXEL;
      }

      // Read a fractional pixel at the end of the buffer
      dstPixelStartOffset = this.bytesRead;
      for (subpixel = 0; subpixel < subpixelsRemain; subpixel++) {
        this.output[dstPixelStartOffset + channelMap[subpixel]] = buffer[bufferPos];
        bufferPos++;
      }
      this.bytesRead += subpixelsRemain;
      if (this.bytesRead >= this.bytesTotal) {
        this.done = true;
      }
      if (bufferPos < buffer.length) {
        // Layer was completed before the end of the buffer, there is buffer left over for someone else to use
        return buffer.subarray(bufferPos);
      } else {
        // Buffer exhausted
        return null;
      }
    }
  }]);
  return CPColorPixelsDecoder;
}();
var CPMaskDecoder = /*#__PURE__*/function () {
  /**
   *
   * @param {CPGreyBmp} mask - The destination to decode pixels into, must already be the correct size.
   */
  function CPMaskDecoder(mask) {
    _classCallCheck(this, CPMaskDecoder);
    this.bytesRead = 0;
    this.bytesTotal = mask.width * mask.height;
    this.output = mask.data;
    this.done = false;
  }

  /**
   * Read 8-bit greyscale pixels from the given buffer into destination pixel array.
   *
   * Returns the buffer with the read bytes removed from the front, or null if the buffer was read in its entirety.
   *
   * @param {Uint8Array} buffer
   */
  _createClass(CPMaskDecoder, [{
    key: "decode",
    value: function decode(buffer) {
      if (buffer == null) {
        return null;
      }
      var
        // How many more pixels are we to read from this buffer?
        bytesRemain = Math.min(buffer.length, this.bytesTotal - this.bytesRead) | 0,
        dstIndex = this.bytesRead,
        srcIndex;
      for (srcIndex = 0; srcIndex < bytesRemain; srcIndex++, dstIndex++) {
        this.output[dstIndex] = buffer[srcIndex];
      }
      this.bytesRead = dstIndex;
      if (this.bytesRead >= this.bytesTotal) {
        this.done = true;
      }
      if (srcIndex < buffer.length) {
        // Layer was completed before the end of the buffer, there is buffer left over for someone else to use
        return buffer.subarray(srcIndex);
      } else {
        // Buffer exhausted
        return null;
      }
    }
  }]);
  return CPMaskDecoder;
}();
/**
 * Make a 32-bit Chibi file-version value for storing in the file header.
 *
 * @param {int} major
 * @param {int} minor
 * @returns {int}
 */
function makeChibiVersion(major, minor) {
  return major << 16 | minor;
}
function decomposeChibiVersion(version) {
  return {
    major: version >> 16 & 0xFFFF,
    minor: version & 0xFFFF
  };
}
function chibiVersionToString(version) {
  var decomposed = decomposeChibiVersion(version);
  if (decomposed.major === 0 && decomposed.minor === 0) {
    return "ChibiPaint v0.0";
  } else {
    return "ChickenPaint v" + decomposed.major + "." + decomposed.minor;
  }
}

/**
 * Decides which Chibi file version will be required to support the features used by the given artwork, and returns
 * the corresponding version number header.
 *
 * @param {CPArtwork} artwork
 * @returns {int}
 */
function minimumVersionForArtwork(artwork) {
  var _iterator = _createForOfIteratorHelper(artwork.getLayersRoot().getLinearizedLayerList(false)),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var layer = _step.value;
      if (layer instanceof _CPLayerGroup.default || layer.mask || layer.clip || layer.blendMode > _CPBlend.default.LM_LAST_CHIBIPAINT || layer.blendMode === _CPBlend.default.LM_MULTIPLY) {
        /*
         * We'll claim to be compatible with ChibiPaint (by not incrementing the major version number), since
         * ChibiPaint will at least be able to open the file, even though it'll lose information in doing so.
         */
        return makeChibiVersion(OUR_MAJOR_VERSION, OUR_MINOR_VERSION);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return makeChibiVersion(0, 0); // The version used by the original ChibiPaint
}

function writeChunkHeader(stream, tag, chunkSize) {
  stream.writeString(tag);
  stream.writeU32BE(chunkSize);
}

/**
 * Allocate a fixed-size buffer to represent the chunk with the given tag and size, and return a stream which
 * points to the body of the chunk (with the chunk header already written).
 *
 * @param {string} chunkTag
 * @param {int} chunkBodySize
 * @returns {ArrayDataStream}
 */
function allocateChunkStream(chunkTag, chunkBodySize) {
  var buffer = new Uint8Array(ChibiChunkHeader.HEADER_LENGTH + chunkBodySize),
    stream = new _ArrayDataStream.default(buffer);
  writeChunkHeader(stream, chunkTag, chunkBodySize);
  return stream;
}

/**
 * @param {CPArtwork} artwork
 * @param {int} version
 * @param {int} numLayers
 *
 * @returns Uint8Array
 */
function serializeFileHeaderChunk(artwork, version, numLayers) {
  var stream = allocateChunkStream(CHUNK_TAG_HEAD, CPChibiFileHeader.FIXED_HEADER_LENGTH);
  stream.writeU32BE(version);
  stream.writeU32BE(artwork.width);
  stream.writeU32BE(artwork.height);
  stream.writeU32BE(numLayers);
  return stream.getAsDataArray();
}

/**
 * @returns {Uint8Array}
 */
function serializeEndChunk() {
  return allocateChunkStream(CHUNK_TAG_END, 0).getAsDataArray();
}

/**
 * Serialize an layer's header and image data into a byte array buffer, and return it.
 *
 * @param {CPImageLayer|CPLayerGroup} layer
 */
function serializeLayerChunk(layer) {
  var isImageLayer = layer instanceof _CPImageLayer.default,
    FIXED_HEADER_LENGTH = 4 * (isImageLayer ? 5 : 6),
    VARIABLE_HEADER_LENGTH = layer.name.length,
    COMBINED_HEADER_LENGTH = FIXED_HEADER_LENGTH + VARIABLE_HEADER_LENGTH,
    PAYLOAD_LENGTH = (isImageLayer ? layer.image.data.length : 0) + (layer.mask ? layer.mask.data.length : 0),
    stream = allocateChunkStream(isImageLayer ? CHUNK_TAG_LAYER : CHUNK_TAG_GROUP, FIXED_HEADER_LENGTH + VARIABLE_HEADER_LENGTH + PAYLOAD_LENGTH);
  var layerFlags = 0,
    blendMode;
  if (layer.visible) {
    layerFlags |= LAYER_FLAG_VISIBLE;
  }
  if (isImageLayer && layer.clip) {
    layerFlags |= LAYER_FLAG_CLIP;
  }
  if (layer.mask) {
    layerFlags |= LAYER_FLAG_HAS_MASK;
  }
  if (layer.maskLinked) {
    layerFlags |= LAYER_FLAG_MASK_LINKED;
  }
  if (layer.maskVisible) {
    layerFlags |= LAYER_FLAG_MASK_VISIBLE;
  }
  if (layer.lockAlpha) {
    layerFlags |= LAYER_FLAG_ALPHA_LOCKED;
  }
  if (!isImageLayer && layer.expanded) {
    layerFlags |= LAYER_FLAG_EXPANDED;
  }
  if (layer.blendMode === _CPBlend.default.LM_MULTIPLY2) {
    /* So that ChibiPaint can still open files that use our new blending routine, re-label it as the original
     * multiply mode, but add a flag so that we know it's supposed to use the new version.
     */
    blendMode = _CPBlend.default.LM_MULTIPLY;
    layerFlags |= LAYER_FLAG_MULTIPLY2;
  } else {
    blendMode = layer.blendMode;
  }

  // Fixed length header portion
  stream.writeU32BE(COMBINED_HEADER_LENGTH); // Offset to layer data from start of header

  stream.writeU32BE(blendMode);
  stream.writeU32BE(layer.alpha);
  stream.writeU32BE(layerFlags);
  stream.writeU32BE(layer.name.length);
  if (!isImageLayer) {
    stream.writeU32BE(layer.layers.length);
  }

  // Variable length header portion
  stream.writeString(layer.name);

  // Payload:
  if (isImageLayer) {
    writeColorBitmapToStream(stream, layer.image);
  }
  if (layer.mask) {
    writeMaskToStream(stream, layer.mask);
  }
  return stream.getAsDataArray();
}

/**
 *
 * @param {Uint8Array} array
 * @returns {boolean}
 */
function hasChibiMagicMarker(array) {
  for (var i = 0; i < CHI_MAGIC.length; i++) {
    if (array[i] != CHI_MAGIC.charCodeAt(i)) {
      return false;
    }
  }
  return true;
}

/**
 * @typedef {Object} SerializeResult
 * @property {(Blob|Uint8Array)} SerializeResult.bytes - A Blob when called in the browser, or a Uint8Array in Node.
 * @property {String} SerializeResult.version - Version string of created artwork, "ChibiPaint v0.0" or "ChickenPaint v0.10"
 */

/**
 * Serialize the given artwork to Chibifile format.
 *
 * @param {CPArtwork} artwork
 * @param {?Object} options
 * @param {boolean} options.forceOldVersion - Mark this as a version 0.0 (ChibiPaint) drawing even if it uses new features
 *
 * @returns {Promise.<SerializeResult>}
 */
function save(artwork, options) {
  options = options || {};
  return Promise.resolve().then(function () {
    var deflator = new _pako.default.Deflate({
        level: 7
      }),
      /**
       * The fragments that make up the completed .chi file:
       * @type {Uint8Array[]}
       */
      blobParts = [],
      magic = new Uint8Array(CHI_MAGIC.length),
      layers = artwork.getLayersRoot().getLinearizedLayerList(false),
      version = options.forceOldVersion ? makeChibiVersion(0, 0) : minimumVersionForArtwork(artwork),
      versionString = chibiVersionToString(version);
    var layerWritePromise = Promise.resolve();
    deflator.onData = function (chunk) {
      blobParts.push(chunk);
    };

    // The magic file signature is not ZLIB compressed:
    for (var i = 0; i < CHI_MAGIC.length; i++) {
      magic[i] = CHI_MAGIC.charCodeAt(i);
    }
    blobParts.push(magic);

    // The rest gets compressed
    deflator.push(serializeFileHeaderChunk(artwork, version, layers.length), false);
    var _iterator2 = _createForOfIteratorHelper(layers),
      _step2;
    try {
      var _loop = function _loop() {
        var layer = _step2.value;
        layerWritePromise = layerWritePromise.then(function () {
          return new Promise(function (resolve) {
            deflator.push(serializeLayerChunk(layer), false);

            // Insert a setTimeout between each serialized layer, so we can maintain browser responsiveness
            setTimeout(resolve, 10);
          });
        });
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return layerWritePromise.then(function () {
      return new Promise(function (resolve, reject) {
        deflator.onEnd = function (status) {
          if (status === 0) {
            if (typeof Blob !== "undefined") {
              // In the browser
              resolve({
                bytes: new Blob(blobParts, {
                  type: "application/octet-stream"
                }),
                version: versionString
              });
            } else {
              // In Node.js
              var totalSize = blobParts.map(function (part) {
                  return part.byteLength;
                }).reduce(function (total, size) {
                  return total + size;
                }, 0),
                buffer = new Uint8Array(totalSize),
                offset = 0;
              for (var _i = 0, _blobParts = blobParts; _i < _blobParts.length; _i++) {
                var part = _blobParts[_i];
                buffer.set(part, offset);
                offset += part.byteLength;
              }
              resolve({
                bytes: buffer,
                version: versionString
              });
            }
          } else {
            reject(status);
          }
        };
        deflator.push(serializeEndChunk(), true);
      });
    });
  });
}

/**
 * Attempt to load a chibifile from the given source.
 *
 * @param {ArrayBuffer|Blob} source
 * @param {?Object}        options
 * @param {boolean|string} options.upgradeMultiplyLayers - false to leave all multiply layers alone, "bake" to modify
 *                                                         pixel values to use LM_MULTIPLY2 blending. Anything else to
 *                                                         set blendMode to LM_MULTIPLY or LM_MULTIPLY2 as needed.
 *
 * @returns {Promise.<CPArtwork>}
 */
function load(source, options) {
  options = options || {};
  var STATE_WAIT_FOR_CHUNK = 0,
    STATE_DECODE_FILE_HEADER = 1,
    STATE_DECODE_LAYER = 2,
    STATE_DECODE_GROUP = 3,
    STATE_SUCCESS = 45,
    STATE_FATAL = 5;
  var inflator = new _pako.default.Inflate({}),
    state = STATE_WAIT_FOR_CHUNK,
    /**
     * Destination artwork
     *
     * @type {CPArtwork}
     */
    artwork = null,
    /**
     * Group we're currently loading layers into
     *
     * @type {CPLayerGroup}
     */
    destGroup = null,
    /**
     * Decoder we're currently using to read a layer.
     *
     * @type {ChibiLayerDecoder}
     */
    layerDecoder,
    /**
     * Number of bytes we should skip in the stream before resuming decoding.
     *
     * @type {int}
     */
    skipCount = 0,
    /**
     * The overall file descriptor
     *
     * @type {CPChibiFileHeader}
     */
    fileHeader = null,
    /**
     *
     * @type {ChibiChunkHeader}
     */
    curChunkHeader = null,
    /**
     * Here we store data that we weren't able to process in previous iterations due to not enough
     * data being available at once.
     *
     * @type {Uint8Array}
     */
    accumulator = null;

  /**
   * Called by the Pako Zlib decompressor each time a block of data is ready for processing.
   *
   * @param {Uint8Array} block
   */
  function processBlock(block) {
    var stream;
    accumulator = concatBuffers(accumulator, block);
    block = null;

    // Add a loop here so we can re-enter the switch with 'continue'
    while (true) {
      if (accumulator) {
        if (skipCount < accumulator.length) {
          accumulator = accumulator.subarray(skipCount);
          skipCount = 0;
        } else {
          skipCount -= accumulator.length;
          accumulator = null;
          break;
        }
      } else {
        break;
      }

      // Decode some data from the accumulator
      switch (state) {
        case STATE_WAIT_FOR_CHUNK:
          // Wait for whole chunk header to become available
          if (accumulator.length < ChibiChunkHeader.HEADER_LENGTH) {
            break;
          }

          // Decode chunk header
          stream = new _ArrayDataStream.default(accumulator);
          curChunkHeader = new ChibiChunkHeader(stream);

          // Remove the chunk header from the start of the accumulator
          accumulator = accumulator.subarray(stream.pos);
          if (fileHeader) {
            if (curChunkHeader.chunkType == CHUNK_TAG_END) {
              state = STATE_SUCCESS;
            } else if (curChunkHeader.chunkType == CHUNK_TAG_LAYER) {
              state = STATE_DECODE_LAYER;
              layerDecoder = new ChibiImageLayerDecoder(curChunkHeader, fileHeader.width, fileHeader.height);
              continue;
            } else if (curChunkHeader.chunkType == CHUNK_TAG_GROUP) {
              state = STATE_DECODE_GROUP;
              layerDecoder = new ChibiLayerGroupDecoder(curChunkHeader, fileHeader.width, fileHeader.height);
              continue;
            } else {
              console.log("Unknown chunk type '" + curChunkHeader.chunkType + "', attempting to skip...");
              skipCount = curChunkHeader.chunkSize;
              continue;
            }
          } else if (curChunkHeader.chunkType == CHUNK_TAG_HEAD) {
            state = STATE_DECODE_FILE_HEADER;
            continue;
          } else {
            // File didn't start with image header chunk
            state = STATE_FATAL;
          }
          break;
        case STATE_DECODE_FILE_HEADER:
          // Wait for whole chunk to be available
          if (accumulator.length < curChunkHeader.chunkSize) {
            break;
          }
          stream = new _ArrayDataStream.default(accumulator);
          fileHeader = new CPChibiFileHeader(stream);
          if (decomposeChibiVersion(fileHeader.version).major > MAX_SUPPORTED_MAJOR_VERSION) {
            state = STATE_FATAL; // the file version is higher than what we can deal with, bail out
            break;
          }
          artwork = new _CPArtwork.default(fileHeader.width, fileHeader.height);
          destGroup = artwork.getLayersRoot();

          // Skip the header chunk along with any trailing bytes
          skipCount = curChunkHeader.chunkSize;
          state = STATE_WAIT_FOR_CHUNK;
          continue;
        case STATE_DECODE_LAYER:
          accumulator = layerDecoder.decode(accumulator);
          if (layerDecoder.done) {
            artwork.addLayerObject(destGroup, layerDecoder.layer);
            state = STATE_WAIT_FOR_CHUNK;
            continue;
          }
          break;
        case STATE_DECODE_GROUP:
          accumulator = layerDecoder.decode(accumulator);
          if (layerDecoder.done) {
            artwork.addLayerGroupObject(destGroup, layerDecoder.layer, layerDecoder.childLayers);
            state = STATE_WAIT_FOR_CHUNK;
            continue;
          }
          break;
      }
      break;
    }
  }
  return new Promise(function (resolve) {
    if (source instanceof ArrayBuffer) {
      resolve(source);
    } else {
      // Assume source is a Blob
      var reader = new FileReader();
      reader.onload = function () {
        resolve(this.result);
      };
      reader.readAsArrayBuffer(source);
    }
  }).then(function (arrayBuffer) {
    return new Promise(function (resolve, reject) {
      var byteArray = new Uint8Array(arrayBuffer);
      if (!hasChibiMagicMarker(byteArray)) {
        reject("This doesn't appear to be a ChibiPaint layers file, is it damaged?");
        return;
      }

      // Remove the magic header
      byteArray = byteArray.subarray(CHI_MAGIC.length);
      inflator.onData = processBlock;
      inflator.onEnd = function (status) {
        if (status === 0 && state == STATE_SUCCESS) {
          if (options.upgradeMultiplyLayers !== false && fileHeader.version < makeChibiVersion(OUR_MAJOR_VERSION, OUR_MINOR_VERSION)) {
            artwork.upgradeMultiplyLayers(options.upgradeMultiplyLayers);
          }
          artwork.selectTopmostVisibleLayer();
          resolve(artwork);
        } else {
          reject("Fatal error decoding ChibiFile: " + status);
        }
      };

      // Begin decompression/decoding
      inflator.push(byteArray, true);
    });
  });
}

},{"../util/ArrayDataStream.js":56,"./CPArtwork.js":3,"./CPBlend.js":5,"./CPColorBmp.js":13,"./CPGreyBmp.js":14,"./CPImageLayer.js":15,"./CPLayerGroup.js":17,"pako":297}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPClip;
/*
    ChickenPaint

    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.

    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * @param {(CPColorBmp|CPGreyBmp)} bmp
 * @param int x - Position of the clipboard bmp within the document
 * @param int y
 * @constructor
 */
function CPClip(bmp, x, y) {
  this.bmp = bmp;
  this.x = x;
  this.y = y;
}
;
module.exports = exports.default;

},{}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPColorBmp;
exports.getRotatedCanvas = getRotatedCanvas;
var _CPBitmap = _interopRequireDefault(require("./CPBitmap.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _Canvas = require("../util/Canvas.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * A 32bpp bitmap class (one byte per channel in RGBA order)
 *
 * @param {(ImageData|int)} width - The width of the bitmap, or the ImageData object to use by reference
 * @param {?int} height - The height of the bitmap
 *
 * @constructor
 *
 * @property {int} width
 * @property {int} height
 * @property {CanvasPixelArray} data - The bitmap data array (one byte per channel in RGBA order). We'd prefer this to
 *                                     be Uint8ClampedArray, but IE 10 doesn't support it
 * @property {ImageData} imageData
 */
function CPColorBmp(width, height) {
  if (typeof width == "number") {
    _CPBitmap.default.call(this, width, height);
    this.imageData = (0, _Canvas.createImageData)(this.width, this.height);
  } else {
    var imageData = width;
    _CPBitmap.default.call(this, imageData.width, imageData.height);
    this.imageData = imageData;
  }
  this.data = this.imageData.data;
}
CPColorBmp.prototype = Object.create(_CPBitmap.default.prototype);
CPColorBmp.prototype.constructor = CPColorBmp;
CPColorBmp.BYTES_PER_PIXEL = 4;
CPColorBmp.RED_BYTE_OFFSET = 0;
CPColorBmp.GREEN_BYTE_OFFSET = 1;
CPColorBmp.BLUE_BYTE_OFFSET = 2;
CPColorBmp.ALPHA_BYTE_OFFSET = 3;

/**
 * Create an independent copy of this bitmap.
 *
 * @returns {CPColorBmp}
 */
CPColorBmp.prototype.clone = function () {
  return this.cloneRect(this.getBounds());
};

/**
 * Creates a CPColorBmp from a portion of this bitmap
 *
 * @param {CPRect} rect
 * @returns {CPColorBmp}
 */
CPColorBmp.prototype.cloneRect = function (rect) {
  var result = new CPColorBmp(rect.getWidth(), rect.getHeight());
  result.copyBitmapRect(this, 0, 0, rect);
  return result;
};

/**
 * Pixel access with friendly clipping.
 *
 * @returns {int} 32-bit integer in ARGB format
 */
CPColorBmp.prototype.getPixel = function (x, y) {
  x = Math.max(0, Math.min(this.width - 1, x));
  y = Math.max(0, Math.min(this.height - 1, y));
  var pixIndex = this.offsetOfPixel(x, y);
  return this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] << 24 | this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] << 16 | this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] << 8 | this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET];
};

/**
 * Get an r,g,b,a array of the xor of this bitmap and the given one, within the given rectangle
 *
 * @param {CPColorBmp} bmp
 * @param {CPRect} rect
 *
 * @returns {Uint8Array}
 */
CPColorBmp.prototype.copyRectXOR = function (bmp, rect) {
  rect = this.getBounds().clipTo(rect);
  var w = rect.getWidth(),
    h = rect.getHeight(),
    buffer = new Uint8Array(w * h * CPColorBmp.BYTES_PER_PIXEL),
    outputIndex = 0,
    bmp1Index = this.offsetOfPixel(rect.left, rect.top),
    bmp2Index = bmp.offsetOfPixel(rect.left, rect.top),
    bmp1YSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,
    bmp2YSkip = (bmp.width - w) * CPColorBmp.BYTES_PER_PIXEL,
    widthBytes = w * CPColorBmp.BYTES_PER_PIXEL;
  for (var y = rect.top; y < rect.bottom; y++, bmp1Index += bmp1YSkip, bmp2Index += bmp2YSkip) {
    for (var x = 0; x < widthBytes; x++, outputIndex++, bmp1Index++, bmp2Index++) {
      buffer[outputIndex] = this.data[bmp1Index] ^ bmp.data[bmp2Index];
    }
  }
  return buffer;
};
CPColorBmp.prototype.setRectXOR = function (buffer, rect) {
  rect = this.getBounds().clipTo(rect);
  var w = rect.getWidth(),
    h = rect.getHeight(),
    bmp1Index = this.offsetOfPixel(rect.left, rect.top),
    bufferIndex = 0,
    bmp1YSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,
    widthBytes = w * CPColorBmp.BYTES_PER_PIXEL;
  for (var y = 0; y < h; y++) {
    for (var x = 0; x < widthBytes; x++) {
      this.data[bmp1Index++] ^= buffer[bufferIndex++];
    }
    bmp1Index += bmp1YSkip;
  }
};

/** 
 * Copy the rectangle at srcRect from bmp onto this image at (dstX, dstY).
 *
 * @param {CPColorBmp} bmp
 * @param {int} dstX
 * @param {int} dstY
 * @param {CPRect} srcRect
 */
CPColorBmp.prototype.copyBitmapRect = function (bmp, dstX, dstY, srcRect) {
  var dstRect = new _CPRect.default(dstX, dstY, 0, 0);
  srcRect = srcRect.clone();
  this.getBounds().clipSourceDest(srcRect, dstRect);
  var w = dstRect.getWidth() | 0,
    h = dstRect.getHeight() | 0;

  // Are we just trying to duplicate the bitmap?
  if (dstRect.left == 0 && dstRect.top == 0 && w == this.width && h == this.height && w == bmp.width && h == bmp.height) {
    this.copyPixelsFrom(bmp);
  } else {
    var dstIndex = this.offsetOfPixel(dstRect.left, dstRect.top),
      dstYSkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL,
      srcIndex = bmp.offsetOfPixel(srcRect.left, srcRect.top),
      srcYSkip = (bmp.width - w) * CPColorBmp.BYTES_PER_PIXEL;
    for (var y = 0; y < h; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {
      for (var x = 0; x < w; x++, srcIndex += CPColorBmp.BYTES_PER_PIXEL, dstIndex += CPColorBmp.BYTES_PER_PIXEL) {
        this.data[dstIndex] = bmp.data[srcIndex];
        this.data[dstIndex + 1] = bmp.data[srcIndex + 1];
        this.data[dstIndex + 2] = bmp.data[srcIndex + 2];
        this.data[dstIndex + 3] = bmp.data[srcIndex + 3];
      }
    }
  }
};

//
// Copies the Alpha channel from another bitmap. Assumes both bitmaps are the same width.
//
CPColorBmp.prototype.copyAlphaFrom = function (bmp, rect) {
  rect = this.getBounds().clipTo(rect);
  var w = rect.getWidth() | 0,
    h = rect.getHeight() | 0,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) + CPColorBmp.ALPHA_BYTE_OFFSET | 0 /* Apply offset here so we don't have to do it per-pixel*/,
    ySkip = (this.width - w) * CPColorBmp.BYTES_PER_PIXEL | 0;
  for (var y = 0; y < h; y++, pixIndex += ySkip) {
    for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex] = bmp.data[pixIndex];
    }
  }
};

/**
 * Resize this bitmap to be the same size as that one
 *
 * @param {CPBitmap} bmp
 */
CPColorBmp.prototype.setToSize = function (bmp) {
  if (bmp.width != this.width || bmp.height != this.height) {
    this.width = bmp.width;
    this.height = bmp.height;
    this.imageData = (0, _Canvas.createImageData)(this.width, this.height);
    this.data = this.imageData.data;
  }
};

/**
 *
 * @param {CPColorBmp} bmp
 */
CPColorBmp.prototype.copyPixelsFrom = function (bmp) {
  this.setToSize(bmp);
  if ("set" in this.data) {
    this.data.set(bmp.data);
  } else {
    // IE doesn't use Uint8ClampedArray for ImageData, so set() isn't available
    for (var i = 0; i < this.data.length; i++) {
      this.data[i] = bmp.data[i];
    }
  }
};
CPColorBmp.prototype.copyPixelsFromGreyscale = function (bmp) {
  var srcIndex,
    dstIndex = 0,
    pixels = bmp.width * bmp.height;
  this.setToSize(bmp);
  for (srcIndex = 0; srcIndex < pixels; srcIndex++, dstIndex += CPColorBmp.BYTES_PER_PIXEL) {
    this.data[dstIndex + CPColorBmp.RED_BYTE_OFFSET] = bmp.data[srcIndex];
    this.data[dstIndex + CPColorBmp.GREEN_BYTE_OFFSET] = bmp.data[srcIndex];
    this.data[dstIndex + CPColorBmp.BLUE_BYTE_OFFSET] = bmp.data[srcIndex];
    this.data[dstIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;
  }
};

/**
 * Use nearest-neighbor (subsampling) to scale that bitmap to replace the pixels of this one.
 *
 * @param {CPColorBmp} that
 */
CPColorBmp.prototype.copyScaledNearestNeighbor = function (that) {
  var destPixIndex = 0,
    xSkip = that.width / this.width,
    ySkip = that.height / this.height,
    srcRowStart;
  for (var y = 0, srcRow = 0; y < this.height; y++, srcRow += ySkip) {
    srcRowStart = that.offsetOfPixel(0, Math.round(srcRow));
    for (var x = 0, srcCol = 0; x < this.width; x++, destPixIndex += CPColorBmp.BYTES_PER_PIXEL, srcCol += xSkip) {
      var srcPixIndex = srcRowStart + Math.round(srcCol) * CPColorBmp.BYTES_PER_PIXEL;
      this.data[destPixIndex] = that.data[srcPixIndex];
      this.data[destPixIndex + 1] = that.data[srcPixIndex + 1];
      this.data[destPixIndex + 2] = that.data[srcPixIndex + 2];
      this.data[destPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = that.data[srcPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];
    }
  }
};

/**
 * Replace the pixels in this image with a scaled down thumbnail of that image.
 *
 * The thumbnail will attempt to exaggerate the contribution of thin opaque strokes on a transparent background, in order
 * to make lineart layers more visible.
 *
 * @param {CPColorBmp} that
 */
CPColorBmp.prototype.createThumbnailFrom = function (that) {
  var MAX_SAMPLES_PER_OUTPUT_PIXEL = 3,
    numSamples = Math.min(Math.floor(that.width / this.width), MAX_SAMPLES_PER_OUTPUT_PIXEL);
  if (numSamples < 2) {
    // If we only take one sample per output pixel, there's no need for our filtering strategy
    this.copyScaledNearestNeighbor(that);
    return;
  }
  var
    // Uint16 means we can have up to 16 (since 16*16 ~= 65535/255) times scale reduction without overflow
    rowBuffer = new Uint16Array(this.width * 5 /* 4 bytes of RGBA plus one to record the max alpha of the samples */),
    srcRowByteLength = that.width * CPColorBmp.BYTES_PER_PIXEL,
    sourceBytesBetweenOutputCols = Math.floor(that.width / this.width) * CPColorBmp.BYTES_PER_PIXEL,
    intersampleXByteSpacing = Math.floor(that.width / this.width / numSamples) * CPColorBmp.BYTES_PER_PIXEL,
    /* Due to the floor() in intersampleXByteSkip, it's likely that the gap between the last sample for an output pixel
     * and the start of the sample for the next pixel will be higher than the intersample gap. So we'll add this between
     * pixels if needed.
     */
    interpixelXByteSkip = sourceBytesBetweenOutputCols - intersampleXByteSpacing * numSamples,
    // Now we do the same for rows...
    sourceRowsBetweenOutputRows = Math.floor(that.height / this.height),
    intersampleYRowsSpacing = Math.floor(that.height / this.height / numSamples),
    intersampleYByteSkip = intersampleYRowsSpacing * srcRowByteLength - sourceBytesBetweenOutputCols * this.width,
    interpixelYByteSkip = (sourceRowsBetweenOutputRows - intersampleYRowsSpacing * numSamples) * srcRowByteLength;
  var srcPixIndex = 0,
    dstPixIndex = 0;

  // For each output thumbnail row...
  for (var y = 0; y < this.height; y++, srcPixIndex += interpixelYByteSkip) {
    var bufferIndex = 0;
    rowBuffer.fill(0);

    // Sum the contributions of the input rows that correspond to this output row
    for (var y2 = 0; y2 < numSamples; y2++, srcPixIndex += intersampleYByteSkip) {
      bufferIndex = 0;
      for (var x = 0; x < this.width; x++, bufferIndex += 5, srcPixIndex += interpixelXByteSkip) {
        for (var x2 = 0; x2 < numSamples; x2++, srcPixIndex += intersampleXByteSpacing) {
          var sourceAlpha = that.data[srcPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET],
            sourceAlphaScale = sourceAlpha / 255;

          // Accumulate the pre-multiplied pixels in the sample area
          rowBuffer[bufferIndex] += that.data[srcPixIndex] * sourceAlphaScale;
          rowBuffer[bufferIndex + 1] += that.data[srcPixIndex + 1] * sourceAlphaScale;
          rowBuffer[bufferIndex + 2] += that.data[srcPixIndex + 2] * sourceAlphaScale;
          rowBuffer[bufferIndex + CPColorBmp.ALPHA_BYTE_OFFSET] += sourceAlpha;

          // And keep track of the highest alpha we see
          rowBuffer[bufferIndex + 4] = Math.max(rowBuffer[bufferIndex + 4], sourceAlpha);
        }
      }
    }

    // Now this thumbnail row is complete and we can write the buffer to the output
    bufferIndex = 0;
    for (var _x = 0; _x < this.width; _x++, bufferIndex += 5, dstPixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      var maxAlphaForSample = rowBuffer[bufferIndex + 4];
      if (maxAlphaForSample == 0) {
        this.data[dstPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0;
      } else {
        // Undo the premultiplication of the pixel data, scaling it to the max() alpha we want
        var sampleAlphaScale = maxAlphaForSample / rowBuffer[bufferIndex + CPColorBmp.ALPHA_BYTE_OFFSET];
        this.data[dstPixIndex] = rowBuffer[bufferIndex] * sampleAlphaScale;
        this.data[dstPixIndex + 1] = rowBuffer[bufferIndex + 1] * sampleAlphaScale;
        this.data[dstPixIndex + 2] = rowBuffer[bufferIndex + 2] * sampleAlphaScale;
        this.data[dstPixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = maxAlphaForSample;
      }
    }
  }
};

/**
 * Flood fill the given color starting from the given point
 * @param x int
 * @param y int
 * @param color int
 */
CPColorBmp.prototype.floodFill = function (x, y, color) {
  if (!this.isInside(x, y)) {
    return;
  }
  var oldColor = this.getPixel(x, y),
    oldAlpha = oldColor >> 24 & 0xFF,
    oldRed = oldColor >> 16 & 0xFF,
    oldGreen = oldColor >> 8 & 0xFF,
    oldBlue = oldColor & 0xFF,
    colorAlpha = color >> 24 & 0xFF,
    colorRed = color >> 16 & 0xFF,
    colorGreen = color >> 8 & 0xFF,
    colorBlue = color & 0xFF,
    stack = [],
    clip = this.getBounds(),
    data = this.data;

  // Change the left and right bounds from pixel indexes into byte indexes for easy clipping
  clip.left *= CPColorBmp.BYTES_PER_PIXEL;
  clip.right *= CPColorBmp.BYTES_PER_PIXEL;
  stack.push({
    x1: x * CPColorBmp.BYTES_PER_PIXEL,
    x2: x * CPColorBmp.BYTES_PER_PIXEL,
    y: y,
    dy: -1
  });
  stack.push({
    x1: x * CPColorBmp.BYTES_PER_PIXEL,
    x2: x * CPColorBmp.BYTES_PER_PIXEL,
    y: y + 1,
    dy: 1
  });

  /* 
   * If we are filling 100% transparent areas then we need to ignore the residual color information
   * (it would also be possible to clear it when erasing, but then the performance impact would be on the eraser 
   * rather than on this low importance flood fill)
   */
  if (oldAlpha == 0) {
    if (colorAlpha == 0) {
      return;
    }
    while (stack.length > 0) {
      var line = stack.pop();
      if (line.y < clip.top || line.y >= clip.bottom) {
        continue;
      }
      var lineOffset = this.offsetOfPixel(0, line.y),
        left = line.x1,
        next = void 0;
      while (left >= clip.left && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == 0) {
        data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
        data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
        data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
        data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
        left -= CPColorBmp.BYTES_PER_PIXEL;
      }
      if (left >= line.x1) {
        while (left <= line.x2 && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != oldAlpha) {
          left += CPColorBmp.BYTES_PER_PIXEL;
        }
        next = left + CPColorBmp.BYTES_PER_PIXEL;
        if (left > line.x2) {
          continue;
        }
      } else {
        left += CPColorBmp.BYTES_PER_PIXEL;
        if (left < line.x1) {
          stack.push({
            x1: left,
            x2: line.x1 - CPColorBmp.BYTES_PER_PIXEL,
            y: line.y - line.dy,
            dy: -line.dy
          });
        }
        next = line.x1 + CPColorBmp.BYTES_PER_PIXEL;
      }
      do {
        data[left + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
        data[left + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
        data[left + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
        data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
        while (next < clip.right && data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha) {
          data[next + lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
          data[next + lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
          data[next + lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
          data[next + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
          next += CPColorBmp.BYTES_PER_PIXEL;
        }
        stack.push({
          x1: left,
          x2: next - CPColorBmp.BYTES_PER_PIXEL,
          y: line.y + line.dy,
          dy: line.dy
        });
        if (next - CPColorBmp.BYTES_PER_PIXEL > line.x2) {
          stack.push({
            x1: line.x2 + CPColorBmp.BYTES_PER_PIXEL,
            x2: next - CPColorBmp.BYTES_PER_PIXEL,
            y: line.y - line.dy,
            dy: -line.dy
          });
        }
        left = next + CPColorBmp.BYTES_PER_PIXEL;
        while (left <= line.x2 && data[left + lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] != oldAlpha) {
          left += CPColorBmp.BYTES_PER_PIXEL;
        }
        next = left + CPColorBmp.BYTES_PER_PIXEL;
      } while (left <= line.x2);
    }
  } else {
    if (color == oldColor) {
      return;
    }
    while (stack.length > 0) {
      var _line = stack.pop();
      if (_line.y < clip.top || _line.y >= clip.bottom) {
        continue;
      }
      var _lineOffset = this.offsetOfPixel(0, _line.y),
        _left = _line.x1,
        _next = void 0;
      while (_left >= clip.left && data[_left + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed && data[_left + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen && data[_left + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue && data[_left + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha) {
        data[_left + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
        data[_left + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
        data[_left + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
        data[_left + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
        _left -= CPColorBmp.BYTES_PER_PIXEL;
      }
      if (_left >= _line.x1) {
        while (_left <= _line.x2 && !(data[_left + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed && data[_left + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen && data[_left + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue && data[_left + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha)) {
          _left += CPColorBmp.BYTES_PER_PIXEL;
        }
        _next = _left + CPColorBmp.BYTES_PER_PIXEL;
        if (_left > _line.x2) {
          continue;
        }
      } else {
        _left += CPColorBmp.BYTES_PER_PIXEL;
        if (_left < _line.x1) {
          stack.push({
            x1: _left,
            x2: _line.x1 - CPColorBmp.BYTES_PER_PIXEL,
            y: _line.y - _line.dy,
            dy: -_line.dy
          });
        }
        _next = _line.x1 + CPColorBmp.BYTES_PER_PIXEL;
      }
      do {
        data[_left + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
        data[_left + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
        data[_left + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
        data[_left + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
        while (_next < clip.right && data[_next + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed && data[_next + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen && data[_next + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue && data[_next + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha) {
          data[_next + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] = colorRed;
          data[_next + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] = colorGreen;
          data[_next + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] = colorBlue;
          data[_next + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] = colorAlpha;
          _next += CPColorBmp.BYTES_PER_PIXEL;
        }
        stack.push({
          x1: _left,
          x2: _next - CPColorBmp.BYTES_PER_PIXEL,
          y: _line.y + _line.dy,
          dy: _line.dy
        });
        if (_next - CPColorBmp.BYTES_PER_PIXEL > _line.x2) {
          stack.push({
            x1: _line.x2 + CPColorBmp.BYTES_PER_PIXEL,
            x2: _next - CPColorBmp.BYTES_PER_PIXEL,
            y: _line.y - _line.dy,
            dy: -_line.dy
          });
        }
        _left = _next + CPColorBmp.BYTES_PER_PIXEL;
        while (_left <= _line.x2 && !(data[_left + _lineOffset + CPColorBmp.RED_BYTE_OFFSET] == oldRed && data[_left + _lineOffset + CPColorBmp.GREEN_BYTE_OFFSET] == oldGreen && data[_left + _lineOffset + CPColorBmp.BLUE_BYTE_OFFSET] == oldBlue && data[_left + _lineOffset + CPColorBmp.ALPHA_BYTE_OFFSET] == oldAlpha)) {
          _left += CPColorBmp.BYTES_PER_PIXEL;
        }
        _next = _left + CPColorBmp.BYTES_PER_PIXEL;
      } while (_left <= _line.x2);
    }
  }
};

/**
 * Premultiply the RGB channels in the given R,G,B,A channel buffer with the alpha channel.
 * 
 * @param {Uint8Array} buffer - buffer R,G,B,A channel array
 * @param {int} len - Number of pixels in buffer to modify
 */
function multiplyAlpha(buffer, len) {
  var pixIndex = 0;
  for (var i = 0; i < len; i++) {
    var alpha = buffer[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];

    // Multiply the RGB channels by alpha
    for (var j = 0; j < 3; j++, pixIndex++) {
      buffer[pixIndex] = Math.round(buffer[pixIndex] * alpha / 255);
    }
    pixIndex++; // Don't modify alpha channel
  }
}

/**
 * Inverse of multiplyAlpha()
 */
function separateAlpha(buffer, len) {
  var pixIndex = 0;
  for (var i = 0; i < len; i++) {
    var alpha = buffer[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET];
    if (alpha != 0) {
      var invAlpha = 255 / alpha;
      for (var j = 0; j < 3; j++, pixIndex++) {
        buffer[pixIndex] = Math.min(Math.round(buffer[pixIndex] * invAlpha), 255);
      }
      // Don't modify alpha channel
      pixIndex++;
    } else {
      pixIndex += CPColorBmp.BYTES_PER_PIXEL;
    }
  }
}

/**
 * Blur the first `len` pixels in the src array by `radius` pixels, and store the result in the `dst` array.
 *
 * @param {Uint8Array} src
 * @param {Uint8Array} dst
 * @param {int} len
 * @param {int} radius - Number of pixels that will be averaged either side of a target pixel.
 */
function boxBlurLine(src, dst, len, radius) {
  var pixelCount = 0,
    channelSums = [0, 0, 0, 0],
    pixIndex,
    dstIndex;
  pixIndex = 0;
  for (var i = 0; i < radius && i < len; i++) {
    for (var j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {
      channelSums[j] += src[pixIndex++];
    }
    pixelCount++;
  }
  dstIndex = 0;
  for (var _i = 0; _i < len; _i++) {
    // New pixel joins the window at the right
    if (_i + radius < len) {
      pixIndex = (_i + radius) * CPColorBmp.BYTES_PER_PIXEL;
      for (var _j = 0; _j < CPColorBmp.BYTES_PER_PIXEL; _j++) {
        channelSums[_j] += src[pixIndex++];
      }
      pixelCount++;
    }
    for (var _j2 = 0; _j2 < CPColorBmp.BYTES_PER_PIXEL; _j2++) {
      dst[dstIndex++] = Math.round(channelSums[_j2] / pixelCount);
    }

    // Old pixel leaves the window at the left
    if (_i - radius >= 0) {
      pixIndex = (_i - radius) * CPColorBmp.BYTES_PER_PIXEL;
      for (var _j3 = 0; _j3 < CPColorBmp.BYTES_PER_PIXEL; _j3++) {
        channelSums[_j3] -= src[pixIndex++];
      }
      pixelCount--;
    }
  }
}

/**
 * Copy a column of pixels in the bitmap to the given R,G,B,A buffer.
 * 
 * @param {int} x X-coordinate of column
 * @param {int} y Y-coordinate of top of column to copy
 * @param {int} len Number of pixels to copy
 * @param {Uint8Array} buffer R,G,B,A array
 */
CPColorBmp.prototype.copyPixelColumnToArray = function (x, y, len, buffer) {
  var yJump = (this.width - 1) * CPColorBmp.BYTES_PER_PIXEL,
    dstOffset = 0,
    srcOffset = this.offsetOfPixel(x, y);
  for (var i = 0; i < len; i++) {
    for (var j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {
      buffer[dstOffset++] = this.data[srcOffset++];
    }
    srcOffset += yJump;
  }
};

/**
 * Copy the pixels from the given R,G,B,A buffer to a column of pixels in the bitmap.
 * 
 * @param {int} x X-coordinate of column
 * @param {int} y Y-coordinate of top of column to copy
 * @param {int} len Number of pixels to copy
 * @param {Uint8Array} buffer R,G,B,A array to copy from
 */
CPColorBmp.prototype.copyArrayToPixelColumn = function (x, y, len, buffer) {
  var yJump = (this.width - 1) * CPColorBmp.BYTES_PER_PIXEL,
    srcOffset = 0,
    dstOffset = this.offsetOfPixel(x, y);
  for (var i = 0; i < len; i++) {
    for (var j = 0; j < CPColorBmp.BYTES_PER_PIXEL; j++) {
      this.data[dstOffset++] = buffer[srcOffset++];
    }
    dstOffset += yJump;
  }
};
CPColorBmp.prototype.boxBlur = function (rect, radiusX, radiusY) {
  rect = this.getBounds().clipTo(rect);
  var rectWidth = rect.getWidth(),
    rectWidthBytes = rectWidth * CPColorBmp.BYTES_PER_PIXEL,
    rectHeight = rect.getHeight(),
    rectLength = Math.max(rectWidth, rectHeight),
    src = new Uint8Array(rectLength * CPColorBmp.BYTES_PER_PIXEL),
    dst = new Uint8Array(rectLength * CPColorBmp.BYTES_PER_PIXEL);
  for (var y = rect.top; y < rect.bottom; y++) {
    var pixOffset = this.offsetOfPixel(rect.left, y);
    for (var x = 0; x < rectWidthBytes; x++) {
      src[x] = this.data[pixOffset++];
    }
    multiplyAlpha(src, rectWidth);
    boxBlurLine(src, dst, rectWidth, radiusX);
    pixOffset = this.offsetOfPixel(rect.left, y);
    for (var _x2 = 0; _x2 < rectWidthBytes; _x2++) {
      this.data[pixOffset++] = dst[_x2];
    }
  }
  for (var _x3 = rect.left; _x3 < rect.right; _x3++) {
    this.copyPixelColumnToArray(_x3, rect.top, rectHeight, src);
    boxBlurLine(src, dst, rectHeight, radiusY);
    separateAlpha(dst, rectHeight);
    this.copyArrayToPixelColumn(_x3, rect.top, rectHeight, dst);
  }
};
CPColorBmp.prototype.offsetOfPixel = function (x, y) {
  return (y * this.width + x) * 4 | 0;
};
CPColorBmp.prototype.getMemorySize = function () {
  return this.data.length;
};
CPColorBmp.prototype.getImageData = function () {
  return this.imageData;
};

/**
 * Replace the image data with the provided ImageData object (i.e. use it by reference).
 *
 * @param imageData {ImageData}
 */
CPColorBmp.prototype.setImageData = function (imageData) {
  this.width = imageData.width;
  this.height = imageData.height;
  this.imageData = imageData;
  this.data = imageData.data;
};
CPColorBmp.prototype.clearAll = function (color) {
  if (color == 0 && "fill" in this.data) {
    this.data.fill(0);
  } else {
    var a = color >> 24 & 0xFF,
      r = color >> 16 & 0xFF,
      g = color >> 8 & 0xFF,
      b = color & 0xFF;
    for (var i = 0; i < this.width * this.height * CPColorBmp.BYTES_PER_PIXEL;) {
      this.data[i++] = r;
      this.data[i++] = g;
      this.data[i++] = b;
      this.data[i++] = a;
    }
  }
};

/**
 *
 * @param {CPRect} rect
 * @param {int} color
 */
CPColorBmp.prototype.clearRect = function (rect, color) {
  rect = this.getBounds().clipTo(rect);
  var a = color >> 24 & 0xFF,
    r = color >> 16 & 0xFF,
    g = color >> 8 & 0xFF,
    b = color & 0xFF,
    yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++) {
      this.data[pixIndex++] = r;
      this.data[pixIndex++] = g;
      this.data[pixIndex++] = b;
      this.data[pixIndex++] = a;
    }
  }
};

/**
 * @param rect CPRect
 * @param source CPColorBmp
 */
CPColorBmp.prototype.copyRegionHFlip = function (rect, source) {
  rect = this.getBounds().clipTo(rect);
  for (var y = rect.top; y < rect.bottom; y++) {
    var dstOffset = this.offsetOfPixel(rect.left, y),
      srcOffset = source.offsetOfPixel(rect.right - 1, y);
    for (var x = rect.left; x < rect.right; x++, srcOffset -= CPColorBmp.BYTES_PER_PIXEL * 2) {
      for (var i = 0; i < CPColorBmp.BYTES_PER_PIXEL; i++) {
        this.data[dstOffset++] = source.data[srcOffset++];
      }
    }
  }
};

/**
 * @param rect CPRect
 * @param source CPColorBmp
 */
CPColorBmp.prototype.copyRegionVFlip = function (rect, source) {
  rect = this.getBounds().clipTo(rect);
  var widthBytes = rect.getWidth() * CPColorBmp.BYTES_PER_PIXEL;
  for (var y = rect.top; y < rect.bottom; y++) {
    var dstOffset = this.offsetOfPixel(rect.left, y),
      srcOffset = source.offsetOfPixel(rect.left, rect.bottom - 1 - (y - rect.top));
    for (var x = 0; x < widthBytes; x++) {
      this.data[dstOffset++] = source.data[srcOffset++];
    }
  }
};

/**
 * @param {CPRect} rect
 */
CPColorBmp.prototype.fillWithNoise = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var value,
    yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      value = Math.random() * 0x100 | 0;
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = value;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = value;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = value;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;
    }
  }
};

/**
 * Replace the pixels in the given rect with the given horizontal gradient.
 *
 * @param rect CPRect
 * @param fromX int
 * @param toX int
 * @param gradientPoints int[]
 */
CPColorBmp.prototype.gradientHorzReplace = function (rect, fromX, toX, gradientPoints) {
  var fromColor = {
      r: gradientPoints[0] >> 16 & 0xFF,
      g: gradientPoints[0] >> 8 & 0xFF,
      b: gradientPoints[0] & 0xFF,
      a: gradientPoints[0] >> 24 & 0xFF
    },
    toColor = {
      r: gradientPoints[1] >> 16 & 0xFF,
      g: gradientPoints[1] >> 8 & 0xFF,
      b: gradientPoints[1] & 0xFF,
      a: gradientPoints[1] >> 24 & 0xFF
    },
    yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    h = rect.bottom - rect.top | 0;
  if (toX < fromX) {
    var temp = toX;
    toX = fromX;
    fromX = temp;
    temp = fromColor;
    fromColor = toColor;
    toColor = temp;
  }
  var gradientRange = toX - fromX | 0,
    rStep = (toColor.r - fromColor.r) / gradientRange,
    gStep = (toColor.g - fromColor.g) / gradientRange,
    bStep = (toColor.b - fromColor.b) / gradientRange,
    aStep = (toColor.a - fromColor.a) / gradientRange,
    jump = Math.max(rect.left - fromX, 0);
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    // The solid color section before the gradient
    var x = rect.left;
    for (var xEnd = Math.min(fromX, rect.right) | 0; x < xEnd; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a;
    }

    // In the gradient
    var r = fromColor.r + rStep * jump,
      g = fromColor.g + gStep * jump,
      b = fromColor.b + bStep * jump,
      a = fromColor.a + aStep * jump;
    for (xEnd = Math.min(toX, rect.right) | 0; x < xEnd; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = a;
      r += rStep;
      g += gStep;
      b += bStep;
      a += aStep;
    }

    // The section after the end of the gradient
    for (; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = toColor.r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = toColor.g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = toColor.b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = toColor.a;
    }
  }
};

/**
 * Replace the pixels in the given rect with the given vertical gradient.
 *
 * @param {CPRect} rect
 * @param fromY int
 * @param toY int
 * @param gradientPoints int[]
 */
CPColorBmp.prototype.gradientVertReplace = function (rect, fromY, toY, gradientPoints) {
  var fromColor = {
      r: gradientPoints[0] >> 16 & 0xFF,
      g: gradientPoints[0] >> 8 & 0xFF,
      b: gradientPoints[0] & 0xFF,
      a: gradientPoints[0] >> 24 & 0xFF
    },
    toColor = {
      r: gradientPoints[1] >> 16 & 0xFF,
      g: gradientPoints[1] >> 8 & 0xFF,
      b: gradientPoints[1] & 0xFF,
      a: gradientPoints[1] >> 24 & 0xFF
    },
    yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0;
  if (toY < fromY) {
    var temp = toY;
    toY = fromY;
    fromY = temp;
    temp = fromColor;
    fromColor = toColor;
    toColor = temp;
  }
  var y = rect.top;

  // The solid color section before the start of the gradient
  for (var yEnd = Math.min(rect.bottom, fromY) | 0; y < yEnd; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a;
    }
  }

  // Inside the gradient
  var gradientRange = toY - fromY | 0,
    rStep = (toColor.r - fromColor.r) / gradientRange,
    gStep = (toColor.g - fromColor.g) / gradientRange,
    bStep = (toColor.b - fromColor.b) / gradientRange,
    aStep = (toColor.a - fromColor.a) / gradientRange,
    jump = Math.max(y - fromY, 0),
    r = fromColor.r + rStep * jump,
    g = fromColor.g + gStep * jump,
    b = fromColor.b + bStep * jump,
    a = fromColor.a + aStep * jump;
  for (var _yEnd = Math.min(rect.bottom, toY) | 0; y < _yEnd; y++, pixIndex += yStride) {
    for (var _x4 = 0; _x4 < w; _x4++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = a;
    }
    r += rStep;
    g += gStep;
    b += bStep;
    a += aStep;
  }

  // The section after the end of the gradient
  for (; y < rect.bottom; y++, pixIndex += yStride) {
    for (var _x5 = 0; _x5 < w; _x5++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = toColor.r;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = toColor.g;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = toColor.b;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = toColor.a;
    }
  }
};

/**
 * Replace the pixels in the given rect with the given gradient.
 *
 * @param rect CPRect
 * @param fromX int
 * @param fromY int
 * @param toX int
 * @param toY int
 * @param gradientPoints int[]
 */
CPColorBmp.prototype.gradientReplace = function (rect, fromX, fromY, toX, toY, gradientPoints) {
  var yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0,
    fromColor = {
      r: gradientPoints[0] >> 16 & 0xFF,
      g: gradientPoints[0] >> 8 & 0xFF,
      b: gradientPoints[0] & 0xFF,
      a: gradientPoints[0] >> 24 & 0xFF
    },
    toColor = {
      r: gradientPoints[1] >> 16 & 0xFF,
      g: gradientPoints[1] >> 8 & 0xFF,
      b: gradientPoints[1] & 0xFF,
      a: gradientPoints[1] >> 24 & 0xFF
    },
    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)
    vertRange = toY - fromY + (toX - fromX) * (toX - fromX) / (toY - fromY),
    // Same for horizontal
    horzRange = toX - fromX + (toY - fromY) * (toY - fromY) / (toX - fromX),
    horzStep = 1 / horzRange;
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    var
    // The position the row starts at in the gradient [0.0 ... 1.0)
    prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;
    for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      var propClamped = Math.min(Math.max(prop, 0.0), 1.0),
        invPropClamped = 1 - propClamped;
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = fromColor.r * invPropClamped + toColor.r * propClamped;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = fromColor.g * invPropClamped + toColor.g * propClamped;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = fromColor.b * invPropClamped + toColor.b * propClamped;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = fromColor.a * invPropClamped + toColor.a * propClamped;
      prop += horzStep;
    }
  }
};

/**
 * Alpha blend the given gradient onto the pixels in the given rect.
 *
 * @param rect CPRect
 * @param fromX int
 * @param fromY int
 * @param toX int
 * @param toY int
 * @param gradientPoints int[]
 */
CPColorBmp.prototype.gradientAlpha = function (rect, fromX, fromY, toX, toY, gradientPoints) {
  var yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0,
    fromColor = {
      r: gradientPoints[0] >> 16 & 0xFF,
      g: gradientPoints[0] >> 8 & 0xFF,
      b: gradientPoints[0] & 0xFF,
      a: gradientPoints[0] >> 24 & 0xFF
    },
    toColor = {
      r: gradientPoints[1] >> 16 & 0xFF,
      g: gradientPoints[1] >> 8 & 0xFF,
      b: gradientPoints[1] & 0xFF,
      a: gradientPoints[1] >> 24 & 0xFF
    },
    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)
    vertRange = toY - fromY + (toX - fromX) * (toX - fromX) / (toY - fromY),
    // Same for horizontal
    horzRange = toX - fromX + (toY - fromY) * (toY - fromY) / (toX - fromX),
    horzStep = 1 / horzRange;
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    var
    // The position the row starts at in the gradient [0.0 ... 1.0)
    prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;
    for (var x = 0; x < w; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      var propClamped = Math.min(Math.max(prop, 0.0), 1.0),
        invPropClamped = 1 - propClamped,
        // The gradient color to draw
        r = fromColor.r * invPropClamped + toColor.r * propClamped,
        g = fromColor.g * invPropClamped + toColor.g * propClamped,
        b = fromColor.b * invPropClamped + toColor.b * propClamped,
        a = fromColor.a * invPropClamped + toColor.a * propClamped,
        alpha2 = this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET],
        newAlpha = a + alpha2 - a * alpha2 / 255 | 0;
      if (newAlpha > 0) {
        var realAlpha = a * 255 / newAlpha | 0,
          invAlpha = 255 - realAlpha;
        this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = (r * realAlpha + this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] * invAlpha) / 255 | 0;
        this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = (g * realAlpha + this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] * invAlpha) / 255 | 0;
        this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = (b * realAlpha + this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] * invAlpha) / 255 | 0;
        this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = newAlpha;
      }
      prop += horzStep;
    }
  }
};

/**
 * Draw a gradient which begins at fromX, fromY and ends at toX, toY, clipped to the given rect, on top of the
 * pixels in the bitmap.
 *
 * @param {CPRect} rect
 * @param {Object[]} gradientPoints Array with gradient colors (ARGB integers)
 * @param {int} fromX
 * @param {int} fromY
 * @param {int} toX
 * @param {int} toY
 * @param {boolean} replace - True if the contents of the destination should be ignored (opaque blend)
 */
CPColorBmp.prototype.gradient = function (rect, fromX, fromY, toX, toY, gradientPoints, replace) {
  rect = this.getBounds().clipTo(rect);

  // Degenerate case
  if (fromX == toX && fromY == toY) {
    return;
  }

  // Opaque blend if possible
  if (replace || gradientPoints[0] >>> 24 == 255 && gradientPoints[1] >>> 24 == 255) {
    if (fromX == toX) {
      this.gradientVertReplace(rect, fromY, toY, gradientPoints);
    } else if (fromY == toY) {
      this.gradientHorzReplace(rect, fromX, toX, gradientPoints);
    } else {
      this.gradientReplace(rect, fromX, fromY, toX, toY, gradientPoints);
    }
  } else {
    this.gradientAlpha(rect, fromX, fromY, toX, toY, gradientPoints);
  }
};

/**
 * @param {CPRect} rect
 */
CPColorBmp.prototype.fillWithColorNoise = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var value,
    yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      value = Math.random() * 0x1000000 | 0;
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] = value >> 16 & 0xFF;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] = value >> 8 & 0xFF;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] = value & 0xFF;
      this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] = 0xFF;
    }
  }
};

/**
 * @param {CPRect} rect
 */
CPColorBmp.prototype.invert = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      this.data[pixIndex + CPColorBmp.RED_BYTE_OFFSET] ^= 0xFF;
      this.data[pixIndex + CPColorBmp.GREEN_BYTE_OFFSET] ^= 0xFF;
      this.data[pixIndex + CPColorBmp.BLUE_BYTE_OFFSET] ^= 0xFF;
    }
  }
};

/**
 * Get a rectangle that encloses any non-transparent pixels in the bitmap within the given initialBounds (or an empty
 * rect if the pixels inside the given bounds are 100% transparent).
 *
 * @param {CPRect} initialBounds - The rect to search within (pass getBounds() to search the whole bitmap)
 *
 * @returns {CPRect}
 */
CPColorBmp.prototype.getNonTransparentBounds = function (initialBounds) {
  var pixIndex,
    result = initialBounds.clone(),
    x,
    y,
    alphaOred,
    yStride;

  // Find the first non-transparent row
  yStride = (this.width - result.getWidth()) * CPColorBmp.BYTES_PER_PIXEL;
  pixIndex = this.offsetOfPixel(result.left, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;
  for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
    alphaOred = 0x00;
    for (x = result.left; x < result.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      alphaOred |= this.data[pixIndex];
    }

    // Only check once per row in order to reduce branching in the inner loop
    if (alphaOred != 0x00) {
      break;
    }
  }
  result.top = y;
  if (result.top == result.bottom) {
    // Rect is empty, no opaque pixels in the initialBounds
    return result;
  }

  // Now the last non-transparent row
  pixIndex = this.offsetOfPixel(result.right - 1, result.bottom - 1) + CPColorBmp.ALPHA_BYTE_OFFSET;
  for (y = result.bottom - 1; y >= result.top; y--, pixIndex -= yStride) {
    alphaOred = 0x00;
    for (x = result.right - 1; x >= result.left; x--, pixIndex -= CPColorBmp.BYTES_PER_PIXEL) {
      alphaOred |= this.data[pixIndex];
    }

    // Only check once per row in order to reduce branching in the inner loop
    if (alphaOred != 0x00) {
      break;
    }
  }
  result.bottom = y + 1; /* +1 since the bottom/right edges of the rect are exclusive */

  // Now columns from the left
  yStride = CPColorBmp.BYTES_PER_PIXEL * this.width;
  for (x = result.left; x < result.right; x++) {
    pixIndex = this.offsetOfPixel(x, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;
    alphaOred = 0x00;
    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
      alphaOred |= this.data[pixIndex];
    }
    if (alphaOred != 0x00) {
      break;
    }
  }
  result.left = x;

  // And columns from the right
  for (x = result.right - 1; x >= result.left; x--) {
    pixIndex = this.offsetOfPixel(x, result.top) + CPColorBmp.ALPHA_BYTE_OFFSET;
    alphaOred = 0x00;
    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
      alphaOred |= this.data[pixIndex];
    }
    if (alphaOred != 0x00) {
      break;
    }
  }
  result.right = x + 1;
  return result;
};

/**
 * Returns a new canvas with a rotated version of the given canvas.
 *
 * @param {HTMLCanvasElement} canvas
 * @param {int} rotation - [0..3], selects a multiple of 90 degrees of clockwise rotation to be applied.
 */
function getRotatedCanvas(canvas, rotation) {
  rotation = rotation % 4;
  if (rotation == 0) {
    return canvas;
  }
  var rotatedCanvas = (0, _Canvas.createCanvas)(0, 0),
    rotatedCanvasContext = rotatedCanvas.getContext("2d");
  if (rotation % 2 == 0) {
    rotatedCanvas.width = canvas.width;
    rotatedCanvas.height = canvas.height;
  } else {
    //noinspection JSSuspiciousNameCombination
    rotatedCanvas.width = canvas.height;
    //noinspection JSSuspiciousNameCombination
    rotatedCanvas.height = canvas.width;
  }
  switch (rotation) {
    case 1:
      // 90 degree clockwise:
      rotatedCanvasContext.rotate(Math.PI / 2);
      rotatedCanvasContext.drawImage(canvas, 0, -canvas.height);
      break;
    case 2:
      rotatedCanvasContext.rotate(Math.PI);
      rotatedCanvasContext.drawImage(canvas, -canvas.width, -canvas.height);
      break;
    case 3:
      // 90 degree counter-clockwise:
      rotatedCanvasContext.rotate(-Math.PI / 2);
      rotatedCanvasContext.drawImage(canvas, -canvas.width, 0);
      break;
    case 0:
    default:
      return canvas;
  }
  return rotatedCanvas;
}
function decodeBase64PNGDataURL(url) {
  if (typeof url !== "string" || !url.match(/^data:image\/png;base64,/i)) {
    return false;
  }
  return window.atob(url.substring("data:image\/png;base64,".length));
}

/**
 * Get the image as Canvas.
 *
 * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave
 * unrotated.
 *
 * @returns {HTMLCanvasElement}
 */
CPColorBmp.prototype.getAsCanvas = function (rotation) {
  var canvas = (0, _Canvas.createCanvas)(this.imageData.width, this.imageData.height),
    canvasContext = canvas.getContext("2d");
  canvasContext.putImageData(this.imageData, 0, 0);

  // Rotate it if needed
  return getRotatedCanvas(canvas, rotation || 0);
};

/**
 * Get the image as a PNG image.
 *
 * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave
 * unrotated.
 *
 * @returns {string} - "Binary string" representation of the PNG file
 */
CPColorBmp.prototype.getAsPNG = function (rotation) {
  var canvas = this.getAsCanvas(rotation);
  return decodeBase64PNGDataURL(canvas.toDataURL('image/png'));
};

/**
 * Get the image as a PNG image.
 *
 * Rotation is [0..3] and selects a multiple of 90 degrees of clockwise rotation to be applied, or 0 to leave
 * unrotated.
 *
 * @returns {Buffer}
 */
CPColorBmp.prototype.getAsPNGBuffer = function (rotation) {
  var canvas = this.getAsCanvas(rotation);

  // API provided by node-canvas for running on Node (browsers don't support this)
  return canvas.toBuffer('image/png');
};

/**
 * Returns true if any of the pixels in the given rectangle are not opaque.
 *
 * @param {CPRect} rect
 * @returns {boolean}
 */
CPColorBmp.prototype.hasAlphaInRect = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var yStride = (this.width - rect.getWidth()) * CPColorBmp.BYTES_PER_PIXEL,
    pixIndex = this.offsetOfPixel(rect.left, rect.top) + CPColorBmp.ALPHA_BYTE_OFFSET;
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    var alphaAnded = 0xFF;
    for (var x = rect.left; x < rect.right; x++, pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
      alphaAnded &= this.data[pixIndex];
    }

    // Only check once per row in order to reduce branching in the inner loop
    if (alphaAnded != 0xFF) {
      return true;
    }
  }
  return false;
};

/**
 * Returns true if there are any transparent pixels in this image.
 * 
 * @returns {boolean}
 */
CPColorBmp.prototype.hasAlpha = function () {
  return this.hasAlphaInRect(this.getBounds());
};

/**
 * Create from a loaded HTML Image object
 *
 * @param {HTMLImageElement} image
 */
CPColorBmp.createFromImage = function (image) {
  var imageCanvas = (0, _Canvas.createCanvas)(image.width, image.height),
    imageContext = imageCanvas.getContext("2d");
  imageContext.globalCompositeOperation = "copy";
  imageContext.drawImage(image, 0, 0);
  return new CPColorBmp(imageContext.getImageData(0, 0, image.width, image.height));
};

/**
 * Are all the pixels in this image identical to those of that?
 *
 * @param {CPColorBmp} that
 */
CPColorBmp.prototype.equals = function (that) {
  if (this.width != that.width || this.height != that.height) {
    return false;
  }
  for (var pixIndex = 0; pixIndex < this.data.length; pixIndex += CPColorBmp.BYTES_PER_PIXEL) {
    // Fully transparent pixels don't need their color channels compared
    if (this.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] != 0 || that.data[pixIndex + CPColorBmp.ALPHA_BYTE_OFFSET] != 0) {
      if (this.data[pixIndex] != that.data[pixIndex] || this.data[pixIndex + 1] != that.data[pixIndex + 1] || this.data[pixIndex + 2] != that.data[pixIndex + 2] || this.data[pixIndex + 3] != that.data[pixIndex + 3]) {
        return false;
      }
    }
  }
  return true;
};

},{"../util/CPRect.js":63,"../util/Canvas.js":2,"./CPBitmap.js":4}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPGreyBmp;
var _CPBitmap = _interopRequireDefault(require("./CPBitmap.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _Canvas = require("../util/Canvas.js");
var _CPColorBmp = require("./CPColorBmp.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * Create a new greyscale bitmap with the given parameters. The bitmap will be filled with black upon creation.
 *
 * @param {int} width
 * @param {int} height
 * @param {int} bitDepth - Bits per channel
 *
 * @constructor
 * @extends CPBitmap
 */
function CPGreyBmp(width, height, bitDepth) {
  _CPBitmap.default.call(this, width, height);
  this.createBitmap(width, height, bitDepth);
}
CPGreyBmp.prototype = Object.create(_CPBitmap.default.prototype);
CPGreyBmp.prototype.constructor = CPGreyBmp;
CPGreyBmp.prototype.createBitmap = function (width, height, bitDepth) {
  this.bitDepth = bitDepth;
  switch (bitDepth) {
    case 32:
      this.data = new Uint32Array(width * height);
      break;
    case 16:
      this.data = new Uint16Array(width * height);
      break;
    case 8:
    default:
      this.data = new Uint8Array(width * height);
  }
};
CPGreyBmp.prototype.clone = function () {
  var result = new CPGreyBmp(this.width, this.height, this.bitDepth);
  result.copyPixelsFrom(this);
  return result;
};

/**
 * Creates a CPGreyBmp from a portion of this bitmap
 *
 * @param {CPRect} rect
 * @returns {CPGreyBmp}
 */
CPGreyBmp.prototype.cloneRect = function (rect) {
  var result = new CPGreyBmp(rect.getWidth(), rect.getHeight(), this.bitDepth);
  result.copyBitmapRect(this, 0, 0, rect);
  return result;
};

/**
 * Pixel access with friendly clipping.
 *
 * @returns {int} Pixel value
 */
CPGreyBmp.prototype.getPixel = function (x, y) {
  x = Math.max(0, Math.min(this.width - 1, x));
  y = Math.max(0, Math.min(this.height - 1, y));
  return this.data[this.offsetOfPixel(x, y)];
};
CPGreyBmp.prototype.clearAll = function (value) {
  this.data.fill(value);
};

/**
 * Fill the given rectangle with the given value
 *
 * @param {CPRect} rect
 * @param {int} value
 */
CPGreyBmp.prototype.clearRect = function (rect, value) {
  rect = this.getBounds().clipTo(rect);
  if (rect.equals(this.getBounds())) {
    this.clearAll(value);
  } else {
    var yStride = this.width,
      fillWidth = rect.right - rect.left,
      rowStartIndex = this.offsetOfPixel(rect.left, rect.top);
    for (var y = rect.top; y < rect.bottom; y++, rowStartIndex += yStride) {
      this.data.fill(value, rowStartIndex, rowStartIndex + fillWidth);
    }
  }
};

/**
 * Use nearest-neighbor (subsampling) to scale that bitmap to replace the pixels of this one.
 *
 * @param {CPGreyBmp} that
 */
CPGreyBmp.prototype.copyScaledNearestNeighbor = function (that) {
  var destPixIndex = 0,
    xSkip = that.width / this.width,
    ySkip = that.height / this.height,
    srcRowStart;
  for (var y = 0, srcRow = 0; y < this.height; y++, srcRow += ySkip) {
    srcRowStart = that.offsetOfPixel(0, Math.round(srcRow));
    for (var x = 0, srcCol = 0; x < this.width; x++, destPixIndex++, srcCol += xSkip) {
      var srcPixIndex = srcRowStart + Math.round(srcCol);
      this.data[destPixIndex] = that.data[srcPixIndex];
    }
  }
};

/**
 * Flood fill the given color starting from the given point
 * @param {int} x
 * @param {int} y
 * @param {int} color
 */
CPGreyBmp.prototype.floodFill = function (x, y, color) {
  if (!this.isInside(x, y)) {
    return;
  }
  color = color & 0xFF;
  var oldColor = this.getPixel(x, y),
    stack = [],
    clip = this.getBounds(),
    data = this.data;
  stack.push({
    x1: x,
    x2: x,
    y: y,
    dy: -1
  });
  stack.push({
    x1: x,
    x2: x,
    y: y + 1,
    dy: 1
  });
  if (color == oldColor) {
    return;
  }
  while (stack.length > 0) {
    var line = stack.pop();
    if (line.y < clip.top || line.y >= clip.bottom) {
      continue;
    }
    var lineOffset = this.offsetOfPixel(0, line.y),
      left = line.x1,
      next = void 0;
    while (left >= clip.left && data[left + lineOffset] == oldColor) {
      data[left + lineOffset] = color;
      left--;
    }
    if (left >= line.x1) {
      while (left <= line.x2 && data[left + lineOffset] != oldColor) {
        left++;
      }
      next = left + 1;
      if (left > line.x2) {
        continue;
      }
    } else {
      left++;
      if (left < line.x1) {
        stack.push({
          x1: left,
          x2: line.x1 - 1,
          y: line.y - line.dy,
          dy: -line.dy
        });
      }
      next = line.x1 + 1;
    }
    do {
      data[left + lineOffset] = color;
      while (next < clip.right && data[next + lineOffset] == oldColor) {
        data[next + lineOffset] = color;
        next++;
      }
      stack.push({
        x1: left,
        x2: next - 1,
        y: line.y + line.dy,
        dy: line.dy
      });
      if (next - 1 > line.x2) {
        stack.push({
          x1: line.x2 + 1,
          x2: next - 1,
          y: line.y - line.dy,
          dy: -line.dy
        });
      }
      left = next + 1;
      while (left <= line.x2 && data[left + lineOffset] != oldColor) {
        left++;
      }
      next = left + 1;
    } while (left <= line.x2);
  }
};

/**
 * Replace the pixels in this image with a scaled down thumbnail of that image.
 *
 * @param {CPGreyBmp} that
 */
CPGreyBmp.prototype.createThumbnailFrom = function (that) {
  var MAX_SAMPLES_PER_OUTPUT_PIXEL = 3,
    numSamples = Math.min(Math.floor(that.width / this.width), MAX_SAMPLES_PER_OUTPUT_PIXEL);
  if (numSamples < 2) {
    // If we only take one sample per output pixel, there's no need for our filtering strategy
    this.copyScaledNearestNeighbor(that);
    return;
  }
  var rowBuffer = new Uint16Array(this.width),
    srcRowByteLength = that.width,
    sourceBytesBetweenOutputCols = Math.floor(that.width / this.width),
    intersampleXByteSpacing = Math.floor(that.width / this.width / numSamples),
    /* Due to the floor() in intersampleXByteSkip, it's likely that the gap between the last sample for an output pixel
     * and the start of the sample for the next pixel will be higher than the intersample gap. So we'll add this between
     * pixels if needed.
     */
    interpixelXByteSkip = sourceBytesBetweenOutputCols - intersampleXByteSpacing * numSamples,
    // Now we do the same for rows...
    sourceRowsBetweenOutputRows = Math.floor(that.height / this.height),
    intersampleYRowsSpacing = Math.floor(that.height / this.height / numSamples),
    intersampleYByteSkip = intersampleYRowsSpacing * srcRowByteLength - sourceBytesBetweenOutputCols * this.width,
    interpixelYByteSkip = (sourceRowsBetweenOutputRows - intersampleYRowsSpacing * numSamples) * srcRowByteLength;
  var srcPixIndex = 0,
    dstPixIndex = 0;

  // For each output thumbnail row...
  for (var y = 0; y < this.height; y++, srcPixIndex += interpixelYByteSkip) {
    var bufferIndex = 0;
    rowBuffer.fill(0);

    // Sum the contributions of the input rows that correspond to this output row
    for (var y2 = 0; y2 < numSamples; y2++, srcPixIndex += intersampleYByteSkip) {
      bufferIndex = 0;
      for (var x = 0; x < this.width; x++, bufferIndex++, srcPixIndex += interpixelXByteSkip) {
        for (var x2 = 0; x2 < numSamples; x2++, srcPixIndex += intersampleXByteSpacing) {
          rowBuffer[bufferIndex] += that.data[srcPixIndex];
        }
      }
    }

    // Now this thumbnail row is complete and we can write the buffer to the output
    bufferIndex = 0;
    for (var _x = 0; _x < this.width; _x++, bufferIndex++, dstPixIndex++) {
      this.data[dstPixIndex] = rowBuffer[bufferIndex] / (numSamples * numSamples);
    }
  }
};
CPGreyBmp.prototype.mirrorHorizontally = function () {
  var width = this.width,
    height = this.height,
    newData = new Uint8Array(width * height),
    dstOffset = 0,
    srcOffset = width;
  for (var y = 0; y < height; y++, srcOffset += width + width) {
    for (var x = 0; x < width; x++) {
      newData[dstOffset++] = this.data[--srcOffset];
    }
  }
  this.data = newData;
};
CPGreyBmp.prototype.applyLUT = function (lut) {
  for (var i = 0; i < this.data.length; i++) {
    this.data[i] = lut.table[this.data[i]];
  }
};

/**
 * Get the image as Canvas.
 *
 * @param {int?} imageRotation - 90 degree clockwise rotations to apply to image
 * @returns {HTMLCanvasElement}
 */
CPGreyBmp.prototype.getAsCanvas = function (imageRotation) {
  var imageData = this.getImageData(0, 0, this.width, this.height),
    canvas = (0, _Canvas.createCanvas)(this.width, this.height),
    context = canvas.getContext("2d");
  context.putImageData(imageData, 0, 0);
  return (0, _CPColorBmp.getRotatedCanvas)(canvas, imageRotation || 0);
};

/**
 * Get the image data within the given rectangle as an opaque RGBA ImageData object.
 *
 * @param {int} x
 * @param {int} y
 * @param {int} width
 * @param {int} height
 *
 * @returns {ImageData}
 */
CPGreyBmp.prototype.getImageData = function (x, y, width, height) {
  var imageData = (0, _Canvas.createImageData)(width, height),
    srcIndex = this.offsetOfPixel(x, y),
    dstIndex = 0,
    ySkip = this.width - width;
  for (var _y = 0; _y < height; _y++, srcIndex += ySkip) {
    for (var _x2 = 0; _x2 < width; _x2++, srcIndex++) {
      imageData.data[dstIndex++] = this.data[srcIndex];
      imageData.data[dstIndex++] = this.data[srcIndex];
      imageData.data[dstIndex++] = this.data[srcIndex];
      imageData.data[dstIndex++] = 0xFF;
    }
  }
  return imageData;
};

/**
 * Replace the pixels at the given coordinates with the red channel from the given image data.
 *
 * @param {ImageData} imageData
 * @param {int} x
 * @param {int} y
 */
CPGreyBmp.prototype.pasteImageData = function (imageData, x, y) {
  var srcIndex = 0,
    dstIndex = this.offsetOfPixel(x, y),
    ySkip = this.width - imageData.width;
  for (var _y2 = 0; _y2 < imageData.height; _y2++, dstIndex += ySkip) {
    for (var _x3 = 0; _x3 < imageData.width; _x3++, srcIndex += 4, dstIndex++) {
      this.data[dstIndex] = imageData.data[srcIndex]; // Use the first (red) channel as the intensity
    }
  }

  return imageData;
};

/**
 * Copy pixels from that bitmap.
 *
 * @param {CPGreyBmp} bmp
 */
CPGreyBmp.prototype.copyPixelsFrom = function (bmp) {
  if (bmp.width != this.width || bmp.height != this.height || bmp.bitDepth != this.bitDepth) {
    this.data = bmp.data.slice(0);
    this.width = bmp.width;
    this.height = bmp.height;
    this.bitDepth = bmp.bitDepth;
  } else {
    this.data.set(bmp.data);
  }
};

/**
 * Get a pixel array of the xor of this bitmap and the given one, within the given rectangle
 *
 * @param {CPGreyBmp} bmp
 * @param {CPRect} rect
 *
 * @returns {Uint8Array}
 */
CPGreyBmp.prototype.copyRectXOR = function (bmp, rect) {
  rect = this.getBounds().clipTo(rect);
  var w = rect.getWidth(),
    h = rect.getHeight(),
    buffer = new Uint8Array(w * h),
    outputIndex = 0,
    bmp1Index = this.offsetOfPixel(rect.left, rect.top),
    bmp2Index = bmp.offsetOfPixel(rect.left, rect.top),
    bmp1YSkip = this.width - w,
    bmp2YSkip = bmp.width - w;
  for (var y = rect.top; y < rect.bottom; y++, bmp1Index += bmp1YSkip, bmp2Index += bmp2YSkip) {
    for (var x = 0; x < w; x++, outputIndex++, bmp1Index++, bmp2Index++) {
      buffer[outputIndex] = this.data[bmp1Index] ^ bmp.data[bmp2Index];
    }
  }
  return buffer;
};
CPGreyBmp.prototype.setRectXOR = function (buffer, rect) {
  rect = this.getBounds().clipTo(rect);
  var w = rect.getWidth(),
    h = rect.getHeight(),
    bmp1Index = this.offsetOfPixel(rect.left, rect.top),
    bufferIndex = 0,
    bmp1YSkip = this.width - w;
  for (var y = 0; y < h; y++) {
    for (var x = 0; x < w; x++) {
      this.data[bmp1Index++] ^= buffer[bufferIndex++];
    }
    bmp1Index += bmp1YSkip;
  }
};

/**
 * Copy the rectangle at srcRect from bmp onto this image at (dstX, dstY).
 *
 * @param {CPGreyBmp} bmp
 * @param {int} dstX
 * @param {int} dstY
 * @param {CPRect} srcRect
 */
CPGreyBmp.prototype.copyBitmapRect = function (bmp, dstX, dstY, srcRect) {
  var dstRect = new _CPRect.default(dstX, dstY, 0, 0);
  srcRect = srcRect.clone();
  this.getBounds().clipSourceDest(srcRect, dstRect);
  var w = dstRect.getWidth() | 0,
    h = dstRect.getHeight() | 0;

  // Are we just trying to duplicate the bitmap?
  if (dstRect.left == 0 && dstRect.top == 0 && w == this.width && h == this.height && w == bmp.width && h == bmp.height) {
    this.copyPixelsFrom(bmp);
  } else {
    var dstIndex = this.offsetOfPixel(dstRect.left, dstRect.top),
      dstYSkip = this.width - w,
      srcIndex = bmp.offsetOfPixel(srcRect.left, srcRect.top),
      srcYSkip = bmp.width - w;
    for (var y = 0; y < h; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {
      for (var x = 0; x < w; x++, srcIndex++, dstIndex++) {
        this.data[dstIndex] = bmp.data[srcIndex];
      }
    }
  }
};

/**
 * @param rect CPRect
 * @param source CPColorBmp
 */
CPGreyBmp.prototype.copyRegionHFlip = function (rect, source) {
  rect = this.getBounds().clipTo(rect);
  for (var y = rect.top; y < rect.bottom; y++) {
    var dstOffset = this.offsetOfPixel(rect.left, y),
      srcOffset = source.offsetOfPixel(rect.right - 1, y);
    for (var x = rect.left; x < rect.right; x++, srcOffset -= 2) {
      this.data[dstOffset++] = source.data[srcOffset++];
    }
  }
};

/**
 * @param rect CPRect
 * @param source CPColorBmp
 */
CPGreyBmp.prototype.copyRegionVFlip = function (rect, source) {
  rect = this.getBounds().clipTo(rect);
  var width = rect.getWidth();
  for (var y = rect.top; y < rect.bottom; y++) {
    var dstOffset = this.offsetOfPixel(rect.left, y),
      srcOffset = source.offsetOfPixel(rect.left, rect.bottom - 1 - (y - rect.top));
    for (var x = 0; x < width; x++) {
      this.data[dstOffset++] = source.data[srcOffset++];
    }
  }
};

/**
 * Blur the first `len` pixels in the src array by `radius` pixels, and store the result in the `dst` array.
 *
 * @param {Uint8Array} src
 * @param {Uint8Array} dst
 * @param {int} len
 * @param {int} radius - Number of pixels that will be averaged either side of a target pixel.
 */
function boxBlurLine(src, dst, len, radius) {
  var pixelCount = 0,
    pixelSum = 0,
    dstIndex;
  for (var i = 0; i < radius && i < len; i++) {
    pixelSum += src[i];
    pixelCount++;
  }
  dstIndex = 0;
  for (var _i = 0; _i < len; _i++) {
    // New pixel joins the window at the right
    if (_i + radius < len) {
      pixelSum += src[_i + radius];
      pixelCount++;
    }
    dst[dstIndex++] = Math.round(pixelSum / pixelCount);

    // Old pixel leaves the window at the left
    if (_i - radius >= 0) {
      pixelSum -= src[_i - radius];
      pixelCount--;
    }
  }
}

/**
 * Copy a column of pixels in the bitmap to the given R,G,B,A buffer.
 *
 * @param {int} x X-coordinate of column
 * @param {int} y Y-coordinate of top of column to copy
 * @param {int} len Number of pixels to copy
 * @param {TypedArray} buffer Pixel array
 */
CPGreyBmp.prototype.copyPixelColumnToArray = function (x, y, len, buffer) {
  var yJump = this.width,
    dstOffset = 0,
    srcOffset = this.offsetOfPixel(x, y);
  for (var i = 0; i < len; i++) {
    buffer[dstOffset] = this.data[srcOffset];
    srcOffset += yJump;
    dstOffset++;
  }
};

/**
 * Copy the pixels from the buffer to a column of pixels in the bitmap.
 *
 * @param {int} x X-coordinate of column
 * @param {int} y Y-coordinate of top of column to copy
 * @param {int} len Number of pixels to copy
 * @param {TypedArray} buffer Pixel array to copy from
 */
CPGreyBmp.prototype.copyArrayToPixelColumn = function (x, y, len, buffer) {
  var yJump = this.width,
    srcOffset = 0,
    dstOffset = this.offsetOfPixel(x, y);
  for (var i = 0; i < len; i++) {
    this.data[dstOffset] = buffer[srcOffset];
    dstOffset += yJump;
    srcOffset++;
  }
};
CPGreyBmp.prototype.boxBlur = function (rect, radiusX, radiusY) {
  rect = this.getBounds().clipTo(rect);
  var rectWidth = rect.getWidth(),
    rectHeight = rect.getHeight(),
    rectLength = Math.max(rectWidth, rectHeight),
    src = new this.data.constructor(rectLength),
    dst = new this.data.constructor(rectLength);
  for (var y = rect.top; y < rect.bottom; y++) {
    var pixOffset = this.offsetOfPixel(rect.left, y);
    for (var x = 0; x < rectWidth; x++) {
      src[x] = this.data[pixOffset++];
    }
    boxBlurLine(src, dst, rectWidth, radiusX);
    pixOffset = this.offsetOfPixel(rect.left, y);
    for (var _x4 = 0; _x4 < rectWidth; _x4++) {
      this.data[pixOffset++] = dst[_x4];
    }
  }
  for (var _x5 = rect.left; _x5 < rect.right; _x5++) {
    this.copyPixelColumnToArray(_x5, rect.top, rectHeight, src);
    boxBlurLine(src, dst, rectHeight, radiusY);
    this.copyArrayToPixelColumn(_x5, rect.top, rectHeight, dst);
  }
};
CPGreyBmp.prototype.offsetOfPixel = function (x, y) {
  return y * this.width + x;
};

/**
 * @param {CPRect} rect
 */
CPGreyBmp.prototype.fillWithNoise = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++, pixIndex++) {
      this.data[pixIndex] = Math.random() * 0x100 | 0; // TODO we might usefully support bitmaps > 8 bits/channel here?
    }
  }
};

/**
 * @param {CPRect} rect
 */
CPGreyBmp.prototype.invert = function (rect) {
  rect = this.getBounds().clipTo(rect);
  var yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top);
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    for (var x = rect.left; x < rect.right; x++, pixIndex++) {
      this.data[pixIndex] = ~this.data[pixIndex];
    }
  }
};

/**
 * Get a rectangle that encloses pixels in the bitmap which don't match the given value within the given initialBounds
 * (or an empty rect if all pixels inside the given bounds match the value).
 *
 * This can be used to find a rectangle which encloses the non-white pixels of a mask.
 *
 * @param {CPRect} initialBounds - The rect to search within (pass getBounds() to search the whole bitmap)
 * @param {int} value
 *
 * @returns {CPRect}
 */
CPGreyBmp.prototype.getValueBounds = function (initialBounds, value) {
  var pixIndex,
    result = initialBounds.clone(),
    x,
    y,
    yStride,
    found;

  // Find the first non-matching row
  yStride = this.width - result.getWidth();
  pixIndex = this.offsetOfPixel(result.left, result.top);
  for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
    found = false;
    for (x = result.left; x < result.right; x++, pixIndex++) {
      if (this.data[pixIndex] != value) {
        found = true;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  result.top = y;
  if (result.top == result.bottom) {
    // Rect is empty, no opaque pixels in the initialBounds
    return result;
  }

  // Now the last non-matching row
  pixIndex = this.offsetOfPixel(result.right - 1, result.bottom - 1);
  for (y = result.bottom - 1; y >= result.top; y--, pixIndex -= yStride) {
    found = false;
    for (x = result.right - 1; x >= result.left; x--, pixIndex--) {
      if (this.data[pixIndex] != value) {
        found = true;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  result.bottom = y + 1; /* +1 since the bottom/right edges of the rect are exclusive */

  // Now columns from the left
  yStride = this.width;
  for (x = result.left; x < result.right; x++) {
    pixIndex = this.offsetOfPixel(x, result.top);
    found = false;
    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
      if (this.data[pixIndex] != value) {
        found = true;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  result.left = x;

  // And columns from the right
  for (x = result.right - 1; x >= result.left; x--) {
    pixIndex = this.offsetOfPixel(x, result.top);
    found = false;
    for (y = result.top; y < result.bottom; y++, pixIndex += yStride) {
      if (this.data[pixIndex] != value) {
        found = true;
        break;
      }
    }
    if (found) {
      break;
    }
  }
  result.right = x + 1;
  return result;
};

/**
 * Replace the pixels in the given rect with the given horizontal gradient.
 *
 * @param rect CPRect
 * @param fromX int
 * @param toX int
 * @param gradientPoints int[]
 */
CPGreyBmp.prototype.gradientHorzReplace = function (rect, fromX, toX, gradientPoints) {
  var fromColor = gradientPoints[0] & 0xFF,
    toColor = gradientPoints[1] & 0xFF,
    yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    h = rect.bottom - rect.top | 0;
  if (toX < fromX) {
    var temp = toX;
    toX = fromX;
    fromX = temp;
    temp = fromColor;
    fromColor = toColor;
    toColor = temp;
  }
  var gradientRange = toX - fromX | 0,
    colorStep = (toColor - fromColor) / gradientRange,
    jump = Math.max(rect.left - fromX, 0);
  for (var y = 0; y < h; y++, pixIndex += yStride) {
    // The solid color section before the gradient
    var x = rect.left;
    for (var xEnd = Math.min(fromX, rect.right) | 0; x < xEnd; x++, pixIndex++) {
      this.data[pixIndex] = fromColor;
    }

    // In the gradient
    var color1 = fromColor + colorStep * jump;
    for (xEnd = Math.min(toX, rect.right) | 0; x < xEnd; x++, pixIndex++) {
      this.data[pixIndex] = color1;
      color1 += colorStep;
    }

    // The section after the end of the gradient
    for (; x < rect.right; x++, pixIndex++) {
      this.data[pixIndex] = toColor;
    }
  }
};

/**
 * Replace the pixels in the given rect with the given vertical gradient.
 *
 * @param {CPRect} rect
 * @param fromY int
 * @param toY int
 * @param gradientPoints int[]
 */
CPGreyBmp.prototype.gradientVertReplace = function (rect, fromY, toY, gradientPoints) {
  var fromColor = gradientPoints[0] & 0xFF,
    toColor = gradientPoints[1] & 0xFF,
    yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0;
  if (toY < fromY) {
    var temp = toY;
    toY = fromY;
    fromY = temp;
    temp = fromColor;
    fromColor = toColor;
    toColor = temp;
  }
  var y = rect.top;

  // The solid color section before the start of the gradient
  for (var yEnd = Math.min(rect.bottom, fromY) | 0; y < yEnd; y++, pixIndex += yStride) {
    for (var x = 0; x < w; x++, pixIndex++) {
      this.data[pixIndex] = fromColor;
    }
  }

  // Inside the gradient
  var gradientRange = toY - fromY | 0,
    colorStep = (toColor - fromColor) / gradientRange,
    jump = Math.max(y - fromY, 0),
    color1 = fromColor + colorStep * jump;
  for (var _yEnd = Math.min(rect.bottom, toY) | 0; y < _yEnd; y++, pixIndex += yStride) {
    for (var _x6 = 0; _x6 < w; _x6++, pixIndex++) {
      this.data[pixIndex] = color1;
    }
    color1 += colorStep;
  }

  // The section after the end of the gradient
  for (; y < rect.bottom; y++, pixIndex += yStride) {
    for (var _x7 = 0; _x7 < w; _x7++, pixIndex++) {
      this.data[pixIndex] = toColor;
    }
  }
};

/**
 * Replace the pixels in the given rect with the given gradient.
 *
 * @param rect CPRect
 * @param fromX int
 * @param fromY int
 * @param toX int
 * @param toY int
 * @param gradientPoints int[]
 */
CPGreyBmp.prototype.gradientReplace = function (rect, fromX, fromY, toX, toY, gradientPoints) {
  var yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0,
    fromColor = gradientPoints[0] & 0xFF,
    toColor = gradientPoints[1] & 0xFF,
    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)
    vertRange = toY - fromY + (toX - fromX) * (toX - fromX) / (toY - fromY),
    // Same for horizontal
    horzRange = toX - fromX + (toY - fromY) * (toY - fromY) / (toX - fromX),
    horzStep = 1 / horzRange;
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    var
    // The position the row starts at in the gradient [0.0 ... 1.0)
    prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;
    for (var x = 0; x < w; x++, pixIndex++) {
      var propClamped = Math.min(Math.max(prop, 0.0), 1.0),
        invPropClamped = 1 - propClamped;
      this.data[pixIndex] = fromColor * invPropClamped + toColor * propClamped;
      prop += horzStep;
    }
  }
};

/**
 * Alpha blend the given gradient onto the pixels in the given rect.
 *
 * @param rect CPRect
 * @param fromX int
 * @param fromY int
 * @param toX int
 * @param toY int
 * @param gradientPoints int[]
 */
CPGreyBmp.prototype.gradientAlpha = function (rect, fromX, fromY, toX, toY, gradientPoints) {
  var yStride = this.width - rect.getWidth(),
    pixIndex = this.offsetOfPixel(rect.left, rect.top) | 0,
    w = rect.right - rect.left | 0,
    fromColor = {
      c: gradientPoints[0] & 0xFF,
      a: gradientPoints[0] >> 24 & 0xFF
    },
    toColor = {
      c: gradientPoints[1] & 0xFF,
      a: gradientPoints[1] >> 24 & 0xFF
    },
    // How many pixels vertically does the gradient sequence complete over (+infinity for horizontal gradients!)
    vertRange = toY - fromY + (toX - fromX) * (toX - fromX) / (toY - fromY),
    // Same for horizontal
    horzRange = toX - fromX + (toY - fromY) * (toY - fromY) / (toX - fromX),
    horzStep = 1 / horzRange;
  for (var y = rect.top; y < rect.bottom; y++, pixIndex += yStride) {
    var
    // The position the row starts at in the gradient [0.0 ... 1.0)
    prop = (rect.left - fromX) / horzRange + (y - fromY) / vertRange;
    for (var x = 0; x < w; x++, pixIndex++) {
      var propClamped = Math.min(Math.max(prop, 0.0), 1.0),
        invPropClamped = 1 - propClamped,
        // The gradient color to draw
        color1 = fromColor.c * invPropClamped + toColor.c * propClamped,
        alpha1 = fromColor.a * invPropClamped + toColor.a * propClamped;
      var invAlpha = 255 - alpha1;
      this.data[pixIndex] = (color1 * alpha1 + this.data[pixIndex] * invAlpha) / 255 | 0;
      prop += horzStep;
    }
  }
};

/**
 * Draw a gradient which begins at fromX, fromY and ends at toX, toY, clipped to the given rect, on top of the
 * pixels in the bitmap.
 *
 * @param {CPRect} rect
 * @param {Object[]} gradientPoints Array with gradient colors (ARGB integers)
 * @param {int} fromX
 * @param {int} fromY
 * @param {int} toX
 * @param {int} toY
 * @param {boolean} replace - True if the contents of the destination should be ignored (opaque blend)
 */
CPGreyBmp.prototype.gradient = function (rect, fromX, fromY, toX, toY, gradientPoints, replace) {
  rect = this.getBounds().clipTo(rect);

  // Degenerate case
  if (fromX == toX && fromY == toY) {
    return;
  }

  // Opaque blend if possible
  if (replace || gradientPoints[0] >>> 24 == 255 && gradientPoints[1] >>> 24 == 255) {
    if (fromX == toX) {
      this.gradientVertReplace(rect, fromY, toY, gradientPoints);
    } else if (fromY == toY) {
      this.gradientHorzReplace(rect, fromX, toX, gradientPoints);
    } else {
      this.gradientReplace(rect, fromX, fromY, toX, toY, gradientPoints);
    }
  } else {
    this.gradientAlpha(rect, fromX, fromY, toX, toY, gradientPoints);
  }
};
CPGreyBmp.prototype.equals = function (that) {
  if (this.width != that.width || this.height != that.height) {
    return false;
  }
  for (var pixIndex = 0; pixIndex < this.data.length; pixIndex++) {
    if (this.data[pixIndex] != that.data[pixIndex]) {
      return false;
    }
  }
  return true;
};
module.exports = exports.default;

},{"../util/CPRect.js":63,"../util/Canvas.js":2,"./CPBitmap.js":4,"./CPColorBmp.js":13}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPImageLayer;
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPLayer = _interopRequireDefault(require("./CPLayer.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 ChickenPaint

 ChickenPaint is a translation of ChibiPaint from Java to JavaScript
 by Nicholas Sherlock / Chicken Smoothie.

 ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

 ChickenPaint is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 ChickenPaint is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Note layer image data is not cleared to any specific values upon creation, use layer.image.clearAll().
 *
 * @param {int} width - Width of the bitmap, or zero to start the bitmap out empty (if you're planning to call copyFrom())
 * @param {int} height
 * @param {String} name
 *
 * @constructor
 * @extends CPLayer
 */
function CPImageLayer(width, height, name) {
  _CPLayer.default.call(this, name);
  if (width > 0 && height > 0) {
    this.image = new _CPColorBmp.default(width, height);
  } else {
    this.image = null;
  }

  /**
   * True if this layer should be clipped onto the CPImageLayer beneath it.
   *
   * @type {boolean}
   */
  this.clip = false;

  /**
   *
   * @type {?CPColorBmp}
   */
  this.imageThumbnail = null;
}
CPImageLayer.prototype = Object.create(_CPLayer.default.prototype);
CPImageLayer.prototype.constructor = CPImageLayer;
CPImageLayer.createFromImage = function (image, name) {
  var result = new CPImageLayer(0, 0, name);
  result.image = image;
  return result;
};

/**
 * Returns an independent copy of this layer.
 *
 * @returns {CPImageLayer}
 */
CPImageLayer.prototype.clone = function () {
  var result = new CPImageLayer(0, 0, this.name);
  result.copyFrom(this);
  return result;
};

/**
 *
 * @param {CPImageLayer} layer
 */
CPImageLayer.prototype.copyFrom = function (layer) {
  _CPLayer.default.prototype.copyFrom.call(this, layer);
  this.clip = layer.clip;
  if (!this.image) {
    this.image = layer.image.clone();
  } else {
    this.image.copyPixelsFrom(layer.image);
  }
};

/**
 * Do we have any non-opaque pixels in the entire layer?
 */
CPImageLayer.prototype.hasAlpha = function () {
  if (this.alpha != 100) {
    return true;
  }
  return this.image.hasAlpha();
};

/**
 * Do we have any semi-transparent pixels in the given rectangle?
 *
 * @param {CPRect} rect
 * @returns {boolean}
 */
CPImageLayer.prototype.hasAlphaInRect = function (rect) {
  if (this.alpha != 100) {
    return true;
  }
  return this.image.hasAlphaInRect(rect);
};

/**
 *
 * @param {CPColorBmp} that
 */
CPImageLayer.prototype.copyImageFrom = function (that) {
  this.image.copyPixelsFrom(that);
};

/**
 * If this layer is clipped, return the layer that this layer is clipped to, otherwise return null.
 *
 * @returns {CPImageLayer}
 */
CPImageLayer.prototype.getClippingBase = function () {
  if (this.clip && this.parent) {
    for (var i = this.parent.indexOf(this) - 1; i >= 0; i--) {
      if (this.parent.layers[i] instanceof CPImageLayer) {
        if (!this.parent.layers[i].clip) {
          return this.parent.layers[i];
        }
      } else {
        // We can't clip to non-image layers, so something went wrong here...
        break;
      }
    }
  }
  return null;
};

/**
 *
 * @returns {boolean}
 */
CPImageLayer.prototype.getClip = function () {
  return this.clip;
};

/**
 *
 * @param {boolean} clip
 */
CPImageLayer.prototype.setClip = function (clip) {
  this.clip = clip;
};

/**
 * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty
 * rect if the pixels inside the given bounds are 100% transparent).
 *
 * Ignores the layer alpha and visibility properties, you may want to check .getEffectiveAlpha() > 0 before calling.
 *
 * @param {CPRect} initialBounds - The rect to search within
 *
 * @returns {CPRect}
 */
CPImageLayer.prototype.getNonTransparentBounds = function (initialBounds) {
  return this.image.getNonTransparentBounds(initialBounds);
};

/**
 * @returns {CPRect}
 */
CPImageLayer.prototype.getBounds = function () {
  return new _CPRect.default(0, 0, this.image.width, this.image.height);
};

/**
 * Get an approximation of the number of bytes of memory used by this layer.
 *
 * @returns {number}
 */
CPImageLayer.prototype.getMemoryUsed = function () {
  return this.image ? this.image.getMemorySize() : 0;
};

/**
 * Recreate the image thumbnail for this layer.
 */
CPImageLayer.prototype.rebuildImageThumbnail = function () {
  if (!this.imageThumbnail) {
    var scaleDivider = Math.ceil(Math.max(this.image.width / _CPLayer.default.LAYER_THUMBNAIL_WIDTH, this.image.height / _CPLayer.default.LAYER_THUMBNAIL_HEIGHT));
    this.imageThumbnail = new _CPColorBmp.default(Math.floor(this.image.width / scaleDivider), Math.floor(this.image.height / scaleDivider));
  }
  this.imageThumbnail.createThumbnailFrom(this.image);
};

/**
 * Get the image thumbnail for this layer (or build one if one was not already built)
 *
 * @returns {CPColorBmp}
 */
CPImageLayer.prototype.getImageThumbnail = function () {
  if (!this.imageThumbnail) {
    this.rebuildImageThumbnail();
  }
  return this.imageThumbnail;
};
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPColorBmp.js":13,"./CPLayer.js":16}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPLayer;
var _CPLayerGroup = _interopRequireDefault(require("./CPLayerGroup.js"));
var _CPBlend = _interopRequireDefault(require("./CPBlend.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @param {String} name
 *
 * @constructor
 */
function CPLayer(name) {
  /**
      *
      * @type {String}
      */
  this.name = name || "";

  /**
      * The parent of this layer, if this node is in a layer group.
      *
      * @type {?CPLayerGroup}
      */
  this.parent = null;

  /**
   * True if drawing operations on the image of this layer should not change the alpha component of the layer.
   *
   * @type {boolean}
   */
  this.lockAlpha = false;

  /**
      * The opacity of this layer (0 = transparent, 100 = opaque)
      *
      * @type {int}
      */
  this.alpha = 100;

  /**
      * True if this layer and its children should be drawn.
      *
      * @type {boolean}
      */
  this.visible = true;

  /**
      * One of the CMBlend.LM_* constants.
      *
      * @type {int}
      */
  this.blendMode = _CPBlend.default.LM_NORMAL;

  /**
      * The layer mask (if present)
      * 
      * @type {?CPGreyBmp}
      */
  this.mask = null;

  /**
      * True if transformations applied to the layer should also be applied to the mask (and vice versa)
      *
      * @type {boolean}
      */
  this.maskLinked = true;

  /**
      * True if the mask should be applied (if present)
      *
   * @type {boolean}
   */
  this.maskVisible = true;

  /**
   * The thumbnail of the mask (if a mask is present and the thumb has been built)
   * @type {?CPGreyBmp}
   */
  this.maskThumbnail = null;

  /**
      * True if this layer should use CPBlend.LM_MULTIPLY instead of CPBlend.LM_MULTIPLY2
   * @type {boolean}
   */
  this.useLegacyMultiply = false;
}

/**
 *
 * @param {CPLayer} layer
 */
CPLayer.prototype.copyFrom = function (layer) {
  this.name = layer.name;
  this.blendMode = layer.blendMode;
  this.useLegacyMultiply = layer.useLegacyMultiply;
  this.alpha = layer.alpha;
  this.visible = layer.visible;
  this.parent = layer.parent;
  this.lockAlpha = layer.lockAlpha;
  if (!layer.mask) {
    this.mask = null;
  } else if (this.mask) {
    this.mask.copyPixelsFrom(layer.mask);
  } else {
    this.mask = layer.mask.clone();
  }
  this.maskLinked = layer.maskLinked;
  this.maskVisible = layer.maskVisible;
  if (!layer.maskThumbnail) {
    this.maskThumbnail = null;
  } else if (this.maskThumbnail) {
    this.maskThumbnail.copyPixelsFrom(layer.maskThumbnail);
  } else {
    this.maskThumbnail = layer.maskThumbnail.clone();
  }
};
CPLayer.prototype.setMask = function (mask) {
  this.mask = mask;
  if (!mask) {
    this.maskThumbnail = null;
  }
};
CPLayer.prototype.setAlpha = function (alpha) {
  this.alpha = alpha;
};
CPLayer.prototype.getAlpha = function () {
  return this.alpha;
};

/**
 * Get the alpha of this layer, or zero if this layer is hidden.
 * 
 * @returns {number}
 */
CPLayer.prototype.getEffectiveAlpha = function () {
  if (this.visible) {
    return this.alpha;
  }
  return 0;
};

/**
 * Get the mask for this layer, or null if the mask is not present or hidden.
 *
 * @returns {?CPGreyBmp}
 */
CPLayer.prototype.getEffectiveMask = function () {
  if (this.maskVisible) {
    return this.mask;
  }
  return null;
};
CPLayer.prototype.setName = function (name) {
  this.name = name;
};
CPLayer.prototype.getName = function () {
  return this.name;
};
CPLayer.prototype.setBlendMode = function (blendMode) {
  this.blendMode = blendMode;
  if (blendMode === _CPBlend.default.LM_MULTIPLY) {
    /* If the blend mode is ever set to this legacy one, we'll keep this flag set on the layer so that the
     * user can change to a different blending mode, and still be able to change it back to the legacy one.
     */
    this.useLegacyMultiply = true;
  } else if (blendMode === _CPBlend.default.LM_MULTIPLY2) {
    this.useLegacyMultiply = false;
  }
};
CPLayer.prototype.getBlendMode = function () {
  return this.blendMode;
};
CPLayer.prototype.getLockAlpha = function () {
  return this.lockAlpha;
};
CPLayer.prototype.setLockAlpha = function (value) {
  this.lockAlpha = value;
};
CPLayer.prototype.setVisible = function (visible) {
  this.visible = visible;
};
CPLayer.prototype.getVisible = function () {
  return this.visible;
};
CPLayer.prototype.isVisible = CPLayer.prototype.getVisible;
CPLayer.prototype.setMaskLinked = function (linked) {
  this.maskLinked = linked;
};
CPLayer.prototype.getMaskLinked = function () {
  return this.maskLinked;
};
CPLayer.prototype.setMaskVisible = function (visible) {
  this.maskVisible = visible;
};
CPLayer.prototype.getMaskVisible = function () {
  return this.maskVisible;
};
CPLayer.prototype.getMemoryUsed = function () {
  return 0;
};
CPLayer.prototype.getDepth = function () {
  if (this.parent == null) {
    return 0;
  }
  return this.parent.getDepth() + 1;
};
CPLayer.prototype.ancestorsAreVisible = function () {
  return this.parent == null || this.parent.visible && this.parent.ancestorsAreVisible();
};

/**
 * Returns true if this layer has the given group as one of its ancestors.
 *
 * @param {CPLayerGroup} group
 * @returns {boolean}
 */
CPLayer.prototype.hasAncestor = function (group) {
  return this.parent == group || this.parent && this.parent.hasAncestor(group);
};
CPLayer.prototype.clone = function () {
  throw "Pure virtual CPLayer.clone() call";
};

/**
 * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty
 * rect if the pixels inside the given bounds are 100% transparent).
 *
 * @param {CPRect} initialBounds - The rect to search within
 *
 * @returns {CPRect}
 */
CPLayer.prototype.getNonTransparentBounds = function (initialBounds) {
  return new _CPRect.default(0, 0, 0, 0);
};

/**
 * Recreate the image thumbnail for this layer.
 */
CPLayer.prototype.rebuildMaskThumbnail = function () {
  if (this.mask) {
    if (!this.maskThumbnail) {
      var scaleDivider = Math.ceil(Math.max(this.mask.width / CPLayer.LAYER_THUMBNAIL_WIDTH, this.mask.height / CPLayer.LAYER_THUMBNAIL_HEIGHT));
      this.maskThumbnail = new _CPGreyBmp.default(Math.floor(this.mask.width / scaleDivider), Math.floor(this.mask.height / scaleDivider), 8);
    }
    this.maskThumbnail.createThumbnailFrom(this.mask);
  } else {
    this.maskThumbnail = null;
  }
};

/**
 * Get the mask thumbnail for this layer (or build one if one was not already built). If the layer has no mask, null
 * is returned.
 *
 * @returns {?CPGreyBmp}
 */
CPLayer.prototype.getMaskThumbnail = function () {
  if (!this.maskThumbnail && this.mask) {
    this.rebuildMaskThumbnail();
  }
  return this.maskThumbnail;
};
CPLayer.LAYER_THUMBNAIL_WIDTH = 80;
CPLayer.LAYER_THUMBNAIL_HEIGHT = 50;
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPBlend.js":5,"./CPGreyBmp.js":14,"./CPLayerGroup.js":17}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPLayerGroup;
var _CPLayer = _interopRequireDefault(require("./CPLayer.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
                                                                                                                                                                                    	ChickenPaint
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                    	by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                    
                                                                                                                                                                                    	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                    	it under the terms of the GNU General Public License as published by
                                                                                                                                                                                    	the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                    	(at your option) any later version.
                                                                                                                                                                                    
                                                                                                                                                                                    	ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                    	but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                    	GNU General Public License for more details.
                                                                                                                                                                                    
                                                                                                                                                                                    	You should have received a copy of the GNU General Public License
                                                                                                                                                                                    	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                    */
/**
 *
 * @param {string} name
 * @param {int} blendMode
 * @constructor
 */
function CPLayerGroup(name, blendMode) {
  _CPLayer.default.call(this, name);

  /**
   * @type {CPLayer[]}
   */
  this.layers = [];
  this.expanded = true;
  this.blendMode = blendMode;
}
CPLayerGroup.prototype = Object.create(_CPLayer.default.prototype);
CPLayerGroup.prototype.constructor = CPLayerGroup;

/**
 * Returns an array of layers in this group in display order, excluding this group itself.
 *
 * @param {boolean} respectCollapse - Set to true to omit the children of collapsed groups
 * @param {CPLayer[]} list
 * @returns {CPLayer[]}
 */
CPLayerGroup.prototype.getLinearizedLayerList = function (respectCollapse, list) {
  list = list || [];
  var _iterator = _createForOfIteratorHelper(this.layers),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var layer = _step.value;
      if (layer instanceof CPLayerGroup && (layer.expanded || !respectCollapse)) {
        layer.getLinearizedLayerList(respectCollapse, list);
      }
      list.push(layer);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return list;
};
CPLayerGroup.prototype.clearLayers = function () {
  this.layers = [];
};
CPLayerGroup.prototype.addLayer = function (layer) {
  layer.parent = this;
  this.layers.push(layer);
};
CPLayerGroup.prototype.insertLayer = function (index, layer) {
  layer.parent = this;
  this.layers.splice(index, 0, layer);
};
CPLayerGroup.prototype.removeLayer = function (layer) {
  var index = this.layers.indexOf(layer);
  if (index > -1) {
    this.layers.splice(index, 1);
  }
};
CPLayerGroup.prototype.removeLayerAtIndex = function (index) {
  var layer = this.layers[index];
  if (layer) {
    this.layers.splice(index, 1);
  }
  return layer;
};
CPLayerGroup.prototype.setLayerAtIndex = function (index, layer) {
  var oldLayer = this.layers[index];
  layer.parent = this;
  this.layers[index] = layer;
  return oldLayer;
};
CPLayerGroup.prototype.setExpanded = function (expanded) {
  this.expanded = expanded;
};
CPLayerGroup.prototype.getExpanded = function () {
  return this.expanded;
};

/**
 * Get the index of the given layer in this group, or -1 if the layer is not in the group.
 * 
 * @param {CPLayer} layer
 * @returns {int}
 */
CPLayerGroup.prototype.indexOf = function (layer) {
  return this.layers.indexOf(layer);
};
function sum(a, b) {
  return a + b;
}

/**
 * Get an approximation of the number of bytes of memory used by this layer.
 *
 * @returns {number}
 */
CPLayerGroup.prototype.getMemoryUsed = function () {
  return this.layers.map(function (layer) {
    return layer.getMemoryUsed();
  }).reduce(sum, 0);
};
CPLayerGroup.prototype.clone = function () {
  var result = new CPLayerGroup(this.name, this.blendMode);
  _CPLayer.default.prototype.copyFrom.call(result, this);
  result.expanded = this.expanded;
  result.layers = this.layers.map(function (layer) {
    return layer.clone();
  });
  result.layers.forEach(function (layer) {
    return layer.parent = result;
  });
  return result;
};

/**
 * Get a rectangle that encloses any non-transparent pixels in the layer within the given initialBounds (or an empty
 * rect if the pixels inside the given bounds are 100% transparent).
 *
 * @param {CPRect} initialBounds - The rect to search within
 *
 * @returns {CPRect}
 */
CPLayerGroup.prototype.getNonTransparentBounds = function (initialBounds) {
  var nonTransparentRect = new _CPRect.default(0, 0, 0, 0);
  this.layers.forEach(function (layer) {
    return nonTransparentRect.union(layer.getNonTransparentBounds(initialBounds));
  });
  return nonTransparentRect;
};
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPLayer.js":16}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPLookUpTable;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPLookUpTable() {
  this.table = new Uint8Array(256);
  this.loadIdentity = function () {
    for (var i = 0; i < 256; i++) {
      this.table[i] = i;
    }
  };
  this.loadBrightnessContrast = function (brightness, contrast) {
    var slope = contrast > 0.0 ? 1.0 / (1.0001 - contrast) : 1.0 + contrast,
      offset = 0.5 - slope * 0.5 + brightness;
    for (var i = 0; i < 256; i++) {
      var x = i / 255.0,
        y = x * slope + offset;
      this.table[i] = Math.min(255, Math.max(~~(y * 255.0), 0));
    }
  };
  this.invert = function () {
    for (var i = 0; i < 256; i++) {
      this.table[i] = 255 - this.table[i];
    }
  };
}
module.exports = exports.default;

},{}],19:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPGreyBmp = _interopRequireDefault(require("./CPGreyBmp.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } /*
                                                                                                                                                                                                                         ChickenPaint
                                                                                                                                                                                                                     
                                                                                                                                                                                                                         ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                         by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                     
                                                                                                                                                                                                                         ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                     
                                                                                                                                                                                                                         ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                         it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                         the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                         (at your option) any later version.
                                                                                                                                                                                                                     
                                                                                                                                                                                                                         ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                         but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                         GNU General Public License for more details.
                                                                                                                                                                                                                     
                                                                                                                                                                                                                         You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                         along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                     */
/**
 * Copy the rectangle from the single-channel `greyscale` to the RGBA `imageData` as greyscale pixels with full alpha.
 * Both images must be the same size.
 *
 * @param {ImageData} imageData
 * @param {CPGreyBmp} greyscale
 * @param {CPRect} rect
 */
function copyGreyscaleRectToImageData(imageData, greyscale, rect) {
  var srcIndex = rect.top * greyscale.width + rect.left,
    dstIndex = srcIndex * _CPColorBmp.default.BYTES_PER_PIXEL,
    width = rect.getWidth(),
    height = rect.getHeight(),
    srcYSkip = greyscale.width - width,
    dstYSkip = srcYSkip * _CPColorBmp.default.BYTES_PER_PIXEL;
  for (var y = 0; y < height; y++, srcIndex += srcYSkip, dstIndex += dstYSkip) {
    for (var x = 0; x < width; x++, srcIndex++, dstIndex += _CPColorBmp.default.BYTES_PER_PIXEL) {
      imageData.data[dstIndex + _CPColorBmp.default.RED_BYTE_OFFSET] = greyscale.data[srcIndex];
      imageData.data[dstIndex + _CPColorBmp.default.GREEN_BYTE_OFFSET] = greyscale.data[srcIndex];
      imageData.data[dstIndex + _CPColorBmp.default.BLUE_BYTE_OFFSET] = greyscale.data[srcIndex];
      imageData.data[dstIndex + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = 0xFF;
    }
  }
}

/**
 * Allows a ImageData-view to be created of a layer's mask, with the artwork able to change the target of the view
 * when needed, and keep the pixels up to date.
 *
 * Emits a "changeLayer" event if the mask view attaches to a different target layer.
 */
var CPMaskView = exports.default = /*#__PURE__*/function (_EventEmitter) {
  _inherits(CPMaskView, _EventEmitter);
  var _super = _createSuper(CPMaskView);
  /**
   * @param {CPLayer} layer
   * @param {function} prepareMask
   */
  function CPMaskView(layer, prepareMask) {
    var _this;
    _classCallCheck(this, CPMaskView);
    _this = _super.call(this);
    _this.layer = layer;
    _this.buffer = layer.mask.getImageData(0, 0, layer.mask.width, layer.mask.height);
    _this.invalidRect = new _CPRect.default(0, 0, 0, 0); // Buffer starts off valid

    /**
     * Routine that must be called before the pixels in the mask will be valid.
     *
     * @type {Function}
     */
    _this.prepareMask = prepareMask;
    return _this;
  }
  _createClass(CPMaskView, [{
    key: "close",
    value: function close() {
      this.buffer = null;
      this.layer = null;
      this.emitEvent("changeLayer");
    }
  }, {
    key: "setLayer",
    value: function setLayer(layer) {
      this.layer = layer;
      this.invalidRect = layer.getBounds();
      this.emitEvent("changeLayer");
    }
  }, {
    key: "isOpen",
    value: function isOpen() {
      return this.layer != null;
    }

    /**
     * Mark a rectangle as changed (the mask has been painted on)
     *
     * @param {CPRect} rect
     */
  }, {
    key: "invalidateRect",
    value: function invalidateRect(rect) {
      this.invalidRect.union(rect);
    }

    /**
     * Get the pixels of the mask as an ImageData object, or null if this view has already been closed.
     *
     * @returns {ImageData}
     */
  }, {
    key: "getImageData",
    value: function getImageData() {
      this.prepareMask();
      if (!this.invalidRect.isEmpty() && this.layer && this.layer.mask) {
        copyGreyscaleRectToImageData(this.buffer, this.layer.mask, this.invalidRect);
        this.invalidRect.makeEmpty();
      }
      return this.buffer;
    }
  }]);
  return CPMaskView;
}(_wolfy87Eventemitter.default);
module.exports = exports.default;

},{"../util/CPRect.js":63,"./CPColorBmp.js":13,"./CPGreyBmp.js":14,"wolfy87-eventemitter":314}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPResourceLoader;
var _CPChibiFile = require("../../js/engine/CPChibiFile.js");
var _CPArtwork = _interopRequireDefault(require("./CPArtwork.js"));
var _CPColorBmp = _interopRequireDefault(require("./CPColorBmp.js"));
var _CPImageLayer = _interopRequireDefault(require("./CPImageLayer.js"));
var _AdobeColorTable = _interopRequireDefault(require("../util/AdobeColorTable.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Loads ChickenPaint resources from a remote server and emits progress events.
 *
 * loadImageURL - URL of PNG/JPEG image to load for editing (optional)
 * loadChibiFileURL - URL of .chi file to load for editing (optional). Used in preference to loadImage.
 * loadSwatchesURL - URL of an .aco palette to load (optional)
 */
function CPResourceLoader(options) {
  var resources = [],
    completed = {},
    that = this;
  if (options.loadChibiFileUrl && ("" + options.loadChibiFileUrl).length > 0) {
    resources.push({
      url: options.loadChibiFileUrl,
      friendly: "drawing layers",
      name: "layers",
      required: true
    });
  } else {
    if (options.loadImageUrl && ("" + options.loadImageUrl).length > 0) {
      resources.push({
        url: options.loadImageUrl,
        friendly: "drawing",
        name: "flat",
        required: true
      });
    }
  }
  if (options.loadSwatchesUrl) {
    resources.push({
      url: options.loadSwatchesUrl,
      friendly: "color swatches",
      name: "swatches",
      required: false,
      noProgress: true // So short that we may as well keep the smoothie drained
    });
  }

  /**
   *
   * @param resource
   * @param resourceData
   * @returns {Promise}
   */
  function decodeResource(resource, resourceData) {
    switch (resource.name) {
      case "flat":
        return new Promise(function (resolve, reject) {
          var blob = new Blob([resourceData], {
              type: "image/png"
            }),
            imageUrl = window.URL.createObjectURL(blob);
          if (imageUrl) {
            var image = new Image();
            image.onload = function () {
              var artwork = new _CPArtwork.default(this.width, this.height),
                layer = new _CPImageLayer.default(0, 0, "Layer 1");
              layer.image = _CPColorBmp.default.createFromImage(image);
              artwork.addLayerObject(artwork.getLayersRoot(), layer);
              image = null;
              window.URL.revokeObjectURL(imageUrl);
              resolve(artwork);
            };
            image.src = imageUrl;
          } else {
            reject(null);
          }
        });
      case "swatches":
        var reader = new _AdobeColorTable.default(),
          colors = reader.read(resourceData);
        if (colors) {
          return Promise.resolve(colors);
        } else {
          return Promise.reject(null);
        }
      case "layers":
        return (0, _CPChibiFile.load)(resourceData);
      default:
        return Promise.reject("Unexpected resource type '" + resource.name + "'");
    }
  }
  function reportProgress(resource, progress) {
    if (progress === null) {
      that.emitEvent("loadingProgress", [1.0, "Loading your " + resource.friendly + "..."]);
    } else {
      that.emitEvent("loadingProgress", [progress, "Loading your " + resource.friendly + " (" + Math.round(progress * 100) + "%)..."]);
    }
  }
  this.load = function () {
    if (resources.length == 0) {
      that.emitEvent("loadingComplete", [completed]);
      return;
    }
    var resource = resources.shift(),
      xhr = new XMLHttpRequest();
    xhr.addEventListener("progress", function (evt) {
      var progress;
      if (evt.lengthComputable && !resource.noProgress) {
        progress = evt.loaded / evt.total;
      } else {
        progress = null;
      }
      reportProgress(resource, progress);
    }, false);
    function handleFatal() {
      if (resource.required) {
        that.emitEvent("loadingFailure", ["Failed to load your " + resource.friendly + ", please try again later."]);
      } else {
        // Skip unimportant resources
        that.load();
      }
    }
    xhr.addEventListener("load", function (evt) {
      if (this.status == 200) {
        var response = this.response;
        that.emitEvent("loadingProgress", [1.0, "Starting ChickenPaint..."]);

        // Yield to the DOM to give it a chance to paint the loaded message before we begin decoding
        setTimeout(function () {
          decodeResource(resource, response).then(function (decoded) {
            completed[resource.name] = decoded;

            // Move on to the next file
            that.load();
          }, function () {
            that.emitEvent("loadingFailure", ["Failed to read your " + resource.friendly]);
          });
        }, 0);
      } else {
        handleFatal();
      }
    }, false);
    xhr.addEventListener("error", handleFatal);
    reportProgress(resource, resource.noProgress ? null : 0.0);
    xhr.open("GET", resource.url, true);
    xhr.responseType = 'arraybuffer';
    xhr.send();
  };
}
CPResourceLoader.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPResourceLoader.prototype.constructor = CPResourceLoader;
module.exports = exports.default;

},{"../../js/engine/CPChibiFile.js":11,"../util/AdobeColorTable.js":55,"./CPArtwork.js":3,"./CPColorBmp.js":13,"./CPImageLayer.js":15,"wolfy87-eventemitter":314}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.binaryStringToByteArray = binaryStringToByteArray;
exports.default = CPResourceSaver;
var _CPChibiFile = require("../../js/engine/CPChibiFile.js");
var _AdobeColorTable = _interopRequireDefault(require("../util/AdobeColorTable.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _fileSaver = _interopRequireDefault(require("file-saver"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * We generally can't do much with binary strings because various methods will try to UTF-8 mangle them.
 * This function converts such a string to a Uint8Array instead.
 */
function binaryStringToByteArray(s) {
  var result = new Uint8Array(s.length);
  for (var i = 0; i < s.length; i++) {
    result[i] = s.charCodeAt(i);
  }
  return result;
}

/**
 * Saves ChickenPaint resources to a remote server or to the disk and emits progress events.
 *
 * Options:
 *     url - URL to send to. If omitted, will save to the disk instead.
 *     artwork - Artwork to send
 *     rotation - Integer [0..3] of the number of 90 degree rotation steps that should be applied to canvas upon opening.
 *     swatches - Array of ARGB integer colors to save as the image swatches (optional)
 */
function CPResourceSaver(options) {
  var that = this,
    cancelled = false;
  options.rotation = options.rotation || 0;
  function reportProgress(progress) {
    if (progress === null) {
      that.emitEvent("savingProgress", [1.0, (0, _lang._)("Saving drawing...")]);
    } else {
      that.emitEvent("savingProgress", [progress, (0, _lang._)("Saving drawing...") + " (" + Math.round(progress * 100) + "%)"]);
    }
  }
  function reportFatal(serverMessage) {
    that.emitEvent("savingFailure", [serverMessage]);
  }
  function postDrawing(formData) {
    // リクエストのオプションを設定
    var requestOptions = {
      method: 'POST',
      mode: 'same-origin',
      headers: {
        'X-Requested-With': 'chickenpaint'
      },
      body: formData
    };
    reportProgress(0.5);
    // リクエストを送信
    fetch(options.url, requestOptions).then(function (response) {
      if (!response.ok) {
        throw new Error("Network response was not ok (".concat(response.status, ")"));
      }
      return response.text();
    }).then(function (responseText) {
      if (/^CHIBIOK/.test(responseText)) {
        reportProgress(1.0);
        that.emitEvent("savingComplete");
      } else {
        reportFatal(responseText);
      }
    }).catch(function (error) {
      reportFatal(error.message);
    });
  }

  // 	function postDrawing(formData) {
  //     var
  //         xhr = new XMLHttpRequest();

  //     xhr.upload.addEventListener("progress", function(evt) {
  //         var
  //             progress;

  //         if (evt.lengthComputable) {
  //             progress = evt.loaded / evt.total;
  //         } else {
  //             progress = null;
  //         }

  //         reportProgress(progress);
  //     }, false);

  //     xhr.addEventListener("load", function(evt) {
  //         reportProgress(1.0);

  //         if (this.status == 200 && /^CHIBIOK/.test(this.response)) {
  //             that.emitEvent("savingComplete");
  //         } else {
  //             reportFatal(this.response);
  //         }
  //     }, false);

  //     xhr.addEventListener("error", function() {
  //         reportFatal(this.response);
  //     }, false);

  //     reportProgress(0);

  //     xhr.open("POST", options.url, true);

  //     xhr.responseType = "text";

  //     xhr.send(formData);
  // }

  /**
   * Begin saving the data provided in the constructor. Returns immediately, and fires these events to report the
   * saving progress:
   * 
   * savingProgress(progress) - Progress is [0.0 ... 1.0] and reports how much has uploaded so far, or null if the 
   *                            total progress could not be determined.
   * savingFailure(error)     - When saving fails, along with a string error message to display to the user. 
   * savingComplete()         - When saving completes succesfully
   */
  this.save = function () {
    var flat, flatBlob, swatchesBlob;
    flat = binaryStringToByteArray(options.artwork.getFlatPNG(options.rotation));
    flatBlob = new Blob([flat], {
      type: "image/png"
    });
    flat = null; // Don't need this any more

    var serializeLayers;
    if (options.artwork.isSimpleDrawing()) {
      serializeLayers = Promise.resolve(null);
    } else {
      serializeLayers = (0, _CPChibiFile.save)(options.artwork);
    }
    serializeLayers.then(function (chibiResult) {
      if (cancelled) {
        that.emitEvent("savingFailure");
        return;
      }
      if (options.swatches) {
        var aco = new _AdobeColorTable.default();
        swatchesBlob = new Blob([aco.write(options.swatches)], {
          type: "application/octet-stream"
        });
      } else {
        swatchesBlob = null;
      }
      if (options.url) {
        var marker = "This marker ensures the upload wasn't truncated",
          formData = new FormData();
        formData.append("beginMarker", marker);
        formData.append("painter", "ChickenPaint v2.0");
        formData.append("picture", flatBlob);
        flatBlob = null;
        if (chibiResult) {
          formData.append("chibifileFormat", chibiResult.version);
          formData.append("chibifile", chibiResult.bytes);
          chibiResult = null;

          // Layers will need to be rotated upon opening
          formData.append("rotation", "" + options.rotation);
        } else {
          /*
           * Because the image is a flat PNG, we rotate it before we saved it and it doesn't need further
           * rotation upon opening.
           */
          formData.append("rotation", "0");
        }
        if (swatchesBlob) {
          formData.append("swatches", swatchesBlob);
          swatchesBlob = null;
        }
        formData.append("endMarker", marker);
        postDrawing(formData);
      } else {
        var saveFilename = 'oekaki_' + new Date().toISOString().split('.')[0].replace(/[^0-9]/g, '_');
        _fileSaver.default.saveAs(flatBlob, saveFilename + ".png");
        if (chibiResult) {
          _fileSaver.default.saveAs(chibiResult.bytes, saveFilename + ".chi");
        }
        if (swatchesBlob) {
          _fileSaver.default.saveAs(swatchesBlob, saveFilename + ".aco");
        }
      }
    }).catch(function (e) {
      that.emitEvent("savingFailure");
    });
  };
  this.cancel = function () {
    cancelled = true;
  };
}
CPResourceSaver.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPResourceSaver.prototype.constructor = CPResourceSaver;

},{"../../js/engine/CPChibiFile.js":11,"../languages/lang.js":54,"../util/AdobeColorTable.js":55,"file-saver":295,"wolfy87-eventemitter":314}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/
var CPUndo = exports.default = /*#__PURE__*/function () {
  function CPUndo() {
    _classCallCheck(this, CPUndo);
  }
  _createClass(CPUndo, [{
    key: "merge",
    value:
    /**
     * Attempt to merge the given undo into this one, and return true if successful.
     *
     * @param undo
     * @returns {boolean}
     */
    function merge(undo) {
      return false;
    }
  }, {
    key: "noChange",
    value:
    /**
     * Return true if this undo didn't modify the document.
     *
     * @returns {boolean}
     */
    function noChange() {
      return false;
    }
  }, {
    key: "getMemoryUsed",
    value:
    /**
     * Return the number of bytes of memory used by this undo, or 0 if it cannot be estimated.
     *
     * @param undone
     * @param param
     * @returns {number}
     */
    function getMemoryUsed(undone, param) {
      return 0;
    }
  }, {
    key: "compact",
    value:
    /**
     * Call when this undo is no longer on the top of the stack, so it can optimize its memory usage.
     */
    function compact() {}
  }]);
  return CPUndo;
}();
module.exports = exports.default;

},{}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPAboutDialog;
var _jquery = _interopRequireDefault(require("jquery"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPAboutDialog(parent) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade chickenpaint-about-dialog\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">About ChickenPaint Be</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n\t\t\t\t\t\t<a class=\"chickenpaint-on-github\" target=\"_blank\" href=\"https://github.com/satopian/ChickenPaint_Be\" rel=\"noopener\"><span class=\"icon-github\"></span> ChickenPaint Be on GitHub</a>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\tCustomized from <a href=\"https://github.com/thenickdude/chickenpaint\" target=\"_blank\" rel=\"noopener\">ChickenPaint</a>.<br>\n\t\t\t\t\t\tby satopian.<br>\n\t\t\t\t\t\t<a href=\"https://www.gnu.org/licenses/\" target=\"_blank\" rel=\"noopener\">GNU General Public License</a></br>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<a class=\"chickenpaint-on-github\" target=\"_blank\" href=\"https://github.com/thenickdude/chickenpaint\" rel=\"noopener\"><span class=\"icon-github\"></span> ChickenPaint on GitHub</a>\n                            \n                            <p>\n                                ChickenPaint is a translation of <a href=\"https://github.com/thenickdude/chibipaint\" target=\"_blank\" rel=\"noopener\">ChibiPaint</a>\n                                from Java to JavaScript by Nicholas Sherlock / Chicken Smoothie\n                            </p>\n                            <p>\n                                ChibiPaint is Copyright (c) 2006-2008 Marc Schefer. All Rights Reserved\n                            </p>\n                            <p>\n                                ChickenPaint is free software: you can redistribute it and/or modify\n                                it under the terms of the GNU General Public License as published by\n                                the Free Software Foundation, either version 3 of the License, or\n                                (at your option) any later version.\n                            </p>\n        \n                            <p>\n                                ChickenPaint is distributed in the hope that it will be useful,\n                                but WITHOUT ANY WARRANTY; without even the implied warranty of\n                                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n                                <a target=\"_blank\" href=\"https://www.gnu.org/licenses/\" rel=\"noopener\">GNU General Public License</a> for more details.\n                            </p>\n        \n                            <pre class=\"pre-scrollable chickenpaint-third-party-licenses\">Toolbar icons designed by <a target=\"_blank\" href=\"https://github.com/Anteira\" rel=\"noopener\">Miglena Lapavicheva (Anteira)</a>\n    These icons are dual-licensed under <a target=\"_blank\" href=\"https://spdx.org/licenses/GPL-3.0-or-later.html\" rel=\"noopener\">GPL-3.0-or-later</a> and <a target=\"_blank\" href=\"https://creativecommons.org/licenses/by/3.0/\" rel=\"noopener\">CC-BY-3.0</a>\n\nIncludes icons from the <a target=\"_blank\" href=\"https://extensions.libreoffice.org/en/extensions/show/tango-icon-theme-for-libreoffice\" rel=\"noopener\">Tango Icon Theme for LibreOffice</a>:\n    All artwork is licensed under the Creative Commons Attribution-Share Alike 3.0\n    United States License. To view a copy of this licence, visit\n    https://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative\n    Commons, 171 Second Street, Suite 300, San Francisco, California 94105, USA.\n    \n    Credit for icons imported from git://git.gnome.org/gnome-icon-theme or derivatives\n    of these goes to the GNOME project (https://www.gnome.org)\n    Derivatives and new icons were created by Alexander Wilms &lt;f.alexander.wilms@gmail.com> \n    and Miroslav Mazel &lt;mazelm@gmail.com>\n    \nIncludes these MIT-licensed libraries:\n\n    Includes the <a target=\"_blank\" href=\"https://github.com/eligrey/FileSaver.js\" rel=\"noopener\">FileSaver.js library</a>\n    FileSaver.js Copyright \xA9 2015 <a target=\"_blank\" href=\"https://eligrey.com/\" rel=\"noopener\">Eli Grey</a>\n\n    Includes the <a target=\"_blank\" href=\"https://github.com/nodeca/pako\" rel=\"noopener\">Pako zlib compression library</a>\n    Copyright (C) 2014-2015 by Vitaly Puzrin\n    \n    Includes the <a target=\"_blank\" href=\"https://github.com/madrobby/keymaster\" rel=\"noopener\">keymaster.js</a> keyboard library\n    Copyright (c) 2011-2013 Thomas Fuchs\n\n    Includes the <a target=\"_blank\" href=\"https://github.com/stefanpenner/es6-promise\" rel=\"noopener\">es6-promise</a> library\n    Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n\n    Includes the <a target=\"_blank\" href=\"https://benalman.com/projects/jquery-throttle-debounce-plugin/\" rel=\"noopener\">jQuery throttle-debounce</a> library\n    Copyright (c) 2010 \"Cowboy\" Ben Alman\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\nIncludes the <a href=\"https://www.jquery.com/\" target=\"_blank\" rel=\"noopener\">jQuery library</a> \nCopyright <a href=\"https://jquery.org/\" target=\"_blank\" rel=\"noopener\">jQuery Foundation and other contributors</a>\n    \n    This software consists of voluntary contributions made by many\n    individuals. For exact contribution history, see the revision \n    history available at https://github.com/jquery/jquery\n    \n    The following license applies to all parts of this software \n    except as documented below:\n    \n    Permission is hereby granted, free of charge, to any person \n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use, \n    copy, modify, merge, publish, distribute, sublicense, and/or\n    sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n    \n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\nIncludes the <a href=\"https://github.com/jquery/PEP/\" target=\"_blank\" rel=\"noopener\">jQuery PEP library</a>\nCopyright jQuery Foundation and other contributors, https://jquery.org/\n    \n    This software consists of voluntary contributions made by many\n    individuals. For exact contribution history, see the revision \n    history available at https://github.com/jquery/PEP\n    \n    The following license applies to all parts of this software \n    except as documented below:\n    \n    Permission is hereby granted, free of charge, to any person \n    obtaining a copy of this software and associated documentation \n    files (the \"Software\"), to deal in the Software without \n    restriction, including without limitation the rights to use, \n    copy, modify, merge, publish, distribute, sublicense, and/or \n    sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following \n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND \n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR \n    OTHER DEALINGS IN THE SOFTWARE.\n\nIncludes Font Awesome by Fonticons, Inc. - <a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/</a>\nIncludes Material Design icons by Google - <a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"noopener\">https://fonts.google.com/</a>\n                    </pre>\n                </div>\n            </div>\n        </div>\n    ");

  // Destroy the modal upon close
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog.remove();
  });
  // Initialize the modal using Bootstrap 5 methods
  var modalInstance = new bootstrap.Modal(dialog[0]);
  parent.appendChild(dialog[0]);
  this.show = function () {
    modalInstance.show();
  };
}
module.exports = exports.default;

},{"jquery":296}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBoxBlurDialog;
var _jquery = _interopRequireDefault(require("jquery"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPBoxBlurDialog(parent, controller) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">".concat((0, _lang._)("Box blur"), "</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <form>\n                                <div class=\"form-group\">\n                                    <label>").concat((0, _lang._)("Blur amount (pixels)"), "</label>\n                                    <input type=\"number\" class=\"form-control chickenpaint-blur-amount\" value=\"3\">\n                                </div>\n                                <div class=\"form-group\">\n                                    <label>").concat((0, _lang._)("Iterations (1-8, larger gives smoother blur)"), "</label>\n                                    <input type=\"number\" class=\"form-control chickenpaint-blur-iterations\" value=\"1\" min=\"1\" max=\"8\">\n                                </div>\n                            </form>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Cancel"), "</button>\n                            <button type=\"button\" class=\"btn btn-primary chickenpaint-apply-box-blur\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Ok"), "</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ")),
    blurAmountElem = (0, _jquery.default)(".chickenpaint-blur-amount", dialog),
    blurIterationsElem = (0, _jquery.default)(".chickenpaint-blur-iterations", dialog),
    applyButton = (0, _jquery.default)(".chickenpaint-apply-box-blur", dialog);

  // Bootstrap 5: Modalコンストラクタを使用してmodalを初期化
  var modal = new bootstrap.Modal(dialog[0]);
  this.show = function () {
    // ハンバガーメニューとモーダルの二重表示防止
    // chickenpaint-main-menu-contentのIDを持つcollapse要素を閉じる
    var collapseElement = document.getElementById('chickenpaint-main-menu-content');
    if (collapseElement && collapseElement.classList.contains('show')) {
      var bsCollapse = new bootstrap.Collapse(collapseElement, {
        toggle: false // すでに閉じている場合のエラーを防ぐ
      });

      bsCollapse.hide();
    }
    //モーダルを表示
    modal.show();
  };
  applyButton[0].addEventListener('click', function (e) {
    var blur = Math.max(parseInt(blurAmountElem.val(), 10), 1),
      iterations = Math.min(Math.max(parseInt(blurIterationsElem.val(), 10), 1), 8);
    controller.getArtwork().boxBlur(blur, blur, iterations);
    modal.hide();
  });
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog[0].remove();
  });
  dialog[0].addEventListener('shown.bs.modal', function (e) {
    blurAmountElem[0].focus();
    // blurAmountElem.trigger('focus');
  });

  dialog[0].addEventListener("keydown", function (e) {
    if (e.key === "Enter" && dialog.hasClass('show')) {
      // applyButton.trigger('click');
      applyButton[0].click();
      e.preventDefault(); // デフォルトのフォーム送信を阻止
    }
  });

  parent.appendChild(dialog[0]);
}
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBrushPalette;
var _ChickenPaint = _interopRequireDefault(require("../ChickenPaint.js"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPCheckbox = _interopRequireDefault(require("./CPCheckbox.js"));
var _CPColorSwatch = _interopRequireDefault(require("./CPColorSwatch.js"));
var _CPSlider = _interopRequireDefault(require("./CPSlider.js"));
var _CPGUIUtils = require("./CPGUIUtils.js");
var _CPColorBmp = _interopRequireDefault(require("../engine/CPColorBmp.js"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _CPPolyfill = require("../util/CPPolyfill.js");
var _jquery = _interopRequireDefault(require("jquery"));
var _keymaster = _interopRequireDefault(require("../../lib/keymaster.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function sliderCheckboxGroup(checkbox, slider) {
  var group = document.createElement("div");
  group.className = "chickenpaint-checkbox-slider-group";
  group.appendChild(checkbox.getElement());
  group.appendChild(slider.getElement());
  return group;
}
function fillCombobox(combo, optionNames) {
  for (var _key in optionNames) {
    if (optionNames.hasOwnProperty(_key)) {
      var option = document.createElement("option");
      option.appendChild(document.createTextNode((0, _lang._)(optionNames[_key])));
      option.value = _key;
      combo.appendChild(option);
    }
  }
}
function CPGradientPreview(controller) {
  var w = 150,
    h = 32,
    canvas = document.createElement("canvas"),
    canvasContext = canvas.getContext("2d"),
    checkerboard = (0, _CPGUIUtils.createCheckerboardPattern)(canvasContext),
    image = new _CPColorBmp.default(w, h),
    imageCanvas = document.createElement("canvas"),
    imageCanvasContext = imageCanvas.getContext("2d"),
    gradient = controller.getCurGradient();
  function paint() {
    image.gradient(image.getBounds(), 0, 0, image.width, 0, gradient, true);
    imageCanvasContext.putImageData(image.imageData, 0, 0, 0, 0, w, h);
    canvasContext.fillRect(0, 0, canvas.width, canvas.height);
    canvasContext.drawImage(imageCanvas, 0, 0);
  }
  this.getElement = function () {
    return canvas;
  };
  controller.on("gradientChange", function (_gradient) {
    gradient = _gradient;
    paint();
  });
  canvas.width = imageCanvas.width = w;
  canvas.height = imageCanvas.height = h;
  canvas.className = 'chickenpaint-gradient-preview';
  canvasContext.fillStyle = checkerboard;
  paint();
}
function CPBrushPalette(controller) {
  _CPPalette.default.call(this, controller, "brush", "Tool options");
  var brushPanel = new CPBrushPanel(controller),
    gradientPanel = new CPGradientPanel(controller),
    transformPanel = new CPTransformPanel(controller),
    body = this.getBodyElement();
  body.appendChild(brushPanel.getElement());
  body.appendChild(gradientPanel.getElement());
  body.appendChild(transformPanel.getElement());
  controller.on('modeChange', function (mode) {
    brushPanel.getElement().style.display = "none";
    gradientPanel.getElement().style.display = "none";
    transformPanel.getElement().style.display = "none";
    switch (mode) {
      case _ChickenPaint.default.M_GRADIENTFILL:
        gradientPanel.getElement().style.display = "block";
        break;
      case _ChickenPaint.default.M_TRANSFORM:
        transformPanel.getElement().style.display = "block";
        break;
      default:
        brushPanel.getElement().style.display = "block";
        break;
    }
  });
}
CPBrushPalette.prototype = Object.create(_CPPalette.default.prototype);
CPBrushPalette.prototype.constructor = CPBrushPalette;
function CPBrushPanel(controller) {
  var TIP_NAMES = ["Round Pixelated", "Round Hard Edge", "Round Soft", "Square Pixelated", "Square Hard Edge"],
    BRUSH_SIZES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100, 125, 150, 175, 200];
  var panel = document.createElement("div"),
    tipCombo = document.createElement("select"),
    alphaCB = new _CPCheckbox.default(false, (0, _lang._)("Control brush opacity with pen pressure")),
    alphaSlider = new _CPSlider.default(1, 255),
    sizeCB = new _CPCheckbox.default(true, (0, _lang._)("Control brush size with pen pressure")),
    sizeSlider = new _CPSlider.default(1, 200, false, true),
    scatteringCB = new _CPCheckbox.default(false, (0, _lang._)("Control brush scattering with pen pressure")),
    scatteringSlider = new _CPSlider.default(0, 1000, false, true),
    resatSlider = new _CPSlider.default(0, 100, false, true),
    bleedSlider = new _CPSlider.default(0, 100, false, true),
    spacingSlider = new _CPSlider.default(0, 100, false, true),
    smoothingSlider = new _CPSlider.default(0, 100, false, true),
    brushPreview = new CPBrushPalette.CPBrushPreview(controller);
  function fillWithInitialValues() {
    alphaCB.setValue(controller.getBrushInfo().pressureAlpha);
    alphaSlider.setValue(controller.getAlpha());
    sizeCB.setValue(controller.getBrushInfo().pressureSize);
    sizeSlider.setValue(controller.getBrushSize());
    scatteringCB.setValue(controller.getBrushInfo().pressureScattering);
    scatteringSlider.setValue(~~(controller.getBrushInfo().scattering * 100));
    tipCombo.value = controller.getBrushInfo().tip;
    resatSlider.setValue(~~(controller.getBrushInfo().resat * 100));
    bleedSlider.setValue(~~(controller.getBrushInfo().bleed * 100));
    spacingSlider.setValue(~~(controller.getBrushInfo().spacing * 100));
    smoothingSlider.setValue(~~(controller.getBrushInfo().smoothing * 100));
  }
  this.getElement = function () {
    return panel;
  };
  alphaSlider.title = function (value) {
    return (0, _lang._)("Opacity") + ": " + value;
  };
  alphaSlider.on('valueChange', function (value) {
    controller.setAlpha(value);
  });
  sizeSlider.title = function (value) {
    return (0, _lang._)("Brush size") + ": " + value;
  };
  sizeSlider.on('valueChange', function (value) {
    controller.setBrushSize(value);
  });
  resatSlider.title = function (value) {
    return (0, _lang._)("Color") + ": " + value + "%";
  };
  resatSlider.on('valueChange', function (value) {
    controller.getBrushInfo().resat = value / 100.0;
    controller.callToolListeners();
  });
  bleedSlider.title = function (value) {
    return (0, _lang._)("Blend") + ": " + value + "%";
  };
  bleedSlider.on('valueChange', function (value) {
    controller.getBrushInfo().bleed = value / 100.0;
    controller.callToolListeners();
  });
  spacingSlider.title = function (value) {
    return (0, _lang._)("Spacing") + ": " + value + "%";
  };
  spacingSlider.on('valueChange', function (value) {
    controller.getBrushInfo().spacing = value / 100.0;
    controller.callToolListeners();
  });
  scatteringSlider.title = function (value) {
    return (0, _lang._)("Scattering") + ": " + value + "%";
  };
  scatteringSlider.on('valueChange', function (value) {
    controller.getBrushInfo().scattering = value / 100.0;
    controller.callToolListeners();
  });
  smoothingSlider.title = function (value) {
    return (0, _lang._)("Smoothing") + ": " + value + "%";
  };
  smoothingSlider.on('valueChange', function (value) {
    controller.getBrushInfo().smoothing = value / 100.0;
    controller.callToolListeners();
  });
  scatteringCB.on('valueChange', function (state) {
    controller.getBrushInfo().pressureScattering = state;
    controller.callToolListeners();
  });
  alphaCB.on('valueChange', function (state) {
    controller.getBrushInfo().pressureAlpha = state;
    controller.callToolListeners();
  });
  sizeCB.on('valueChange', function (state) {
    controller.getBrushInfo().pressureSize = state;
    controller.callToolListeners();
  });
  tipCombo.addEventListener("change", function (e) {
    controller.getBrushInfo().tip = parseInt(tipCombo.value, 10);
    tipCombo.blur();
  });
  // tipCombo.onfocus = ()=>{//フォーカスを検出したら
  // 	document.activeElement.blur();//フォーカスを外す
  // 	// console.log(document.activeElement);

  // }; 

  tipCombo.className = "form-control form-control-sm";
  tipCombo.tabIndex = -1;
  fillCombobox(tipCombo, TIP_NAMES);
  panel.appendChild(tipCombo);
  panel.appendChild(brushPreview.getElement());
  panel.appendChild(sliderCheckboxGroup(sizeCB, sizeSlider));
  panel.appendChild(sliderCheckboxGroup(alphaCB, alphaSlider));
  panel.appendChild(resatSlider.getElement());
  panel.appendChild(bleedSlider.getElement());
  panel.appendChild(spacingSlider.getElement());
  panel.appendChild(sliderCheckboxGroup(scatteringCB, scatteringSlider));
  panel.appendChild(smoothingSlider.getElement());
  fillWithInitialValues();
  controller.on('toolChange', function (tool, toolInfo) {
    alphaSlider.setValue(toolInfo.alpha);
    sizeSlider.setValue(toolInfo.size);
    sizeCB.setValue(toolInfo.pressureSize);
    alphaCB.setValue(toolInfo.pressureAlpha);
    tipCombo.value = toolInfo.tip;
    scatteringCB.setValue(toolInfo.pressureScattering);
    if (~~(toolInfo.resat * 100.0) != resatSlider.value) {
      resatSlider.setValue(~~(toolInfo.resat * 100.0));
    }
    if (~~(toolInfo.bleed * 100.0) != bleedSlider.value) {
      bleedSlider.setValue(~~(toolInfo.bleed * 100.0));
    }
    if (~~(toolInfo.spacing * 100.0) != spacingSlider.value) {
      spacingSlider.setValue(~~(toolInfo.spacing * 100.0));
    }
    if (~~(toolInfo.scattering * 100.0) != scatteringSlider.value) {
      scatteringSlider.setValue(~~(toolInfo.scattering * 100.0));
    }
    if (~~(toolInfo.smoothing * 100.0) != smoothingSlider.value) {
      smoothingSlider.setValue(~~(toolInfo.smoothing * 100.0));
    }
  });
  (0, _keymaster.default)("1,2,3,4,5,6,7,8,9,0", function (event, handler) {
    var shortcut = parseInt(handler.shortcut, 10);
    if (shortcut == 0) {
      shortcut = 10;
    }
    controller.setAlpha(Math.round(shortcut / 10 * 255));
  });
  (0, _keymaster.default)("{,[", function () {
    var size = controller.getBrushSize();
    for (var i = BRUSH_SIZES.length - 1; i >= 0; i--) {
      if (size > BRUSH_SIZES[i]) {
        controller.setBrushSize(BRUSH_SIZES[i]);
        break;
      }
    }
  });
  (0, _keymaster.default)("},]", function () {
    var size = controller.getBrushSize();
    for (var i = 0; i < BRUSH_SIZES.length; i++) {
      if (size < BRUSH_SIZES[i]) {
        controller.setBrushSize(BRUSH_SIZES[i]);
        break;
      }
    }
  });
}
CPBrushPalette.CPBrushPreview = function (controller) {
  var size = 16,
    canvas = document.createElement("canvas"),
    canvasContext = canvas.getContext("2d"),
    mouseCaptured = false;
  function paint() {
    canvasContext.clearRect(0, 0, canvas.width, canvas.height);
    canvasContext.beginPath();
    canvasContext.arc(canvas.width / 2, canvas.height / 2, size / 2 * window.devicePixelRatio, 0, Math.PI * 2);
    canvasContext.stroke();
  }
  function handleMouseDrag(e) {
    var offset = (0, _jquery.default)(canvas).offset(),
      pt = {
        x: e.pageX - offset.left,
        y: e.pageY - offset.top
      },
      x = pt.x - (0, _jquery.default)(canvas).width() / 2,
      y = pt.y - (0, _jquery.default)(canvas).height() / 2,
      newSize = Math.round(Math.sqrt(x * x + y * y) * 2);
    size = Math.max(1, Math.min(200, newSize));
    paint();
    controller.setBrushSize(size);
  }
  function handleMouseUp(e) {
    if (mouseCaptured) {
      mouseCaptured = false;
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('mousemove', handleMouseDrag);
    }
  }
  this.getElement = function () {
    return canvas;
  };
  canvas.addEventListener('mousedown', function (e) {
    if (!mouseCaptured) {
      mouseCaptured = true;
      window.addEventListener('mouseup', handleMouseUp);
      window.addEventListener('mousemove', handleMouseDrag);
      handleMouseDrag(e);
    }
  });
  controller.on("toolChange", function (tool, toolInfo) {
    if (toolInfo.size != size) {
      size = toolInfo.size;
      paint();
    }
  });
  canvas.width = 64;
  canvas.height = 64;
  if (window.devicePixelRatio > 1) {
    canvas.style.width = canvas.width + 'px';
    canvas.style.height = canvas.height + 'px';
    canvas.width = canvas.width * window.devicePixelRatio;
    canvas.height = canvas.height * window.devicePixelRatio;
  }
  canvas.className = 'chickenpaint-brush-preview';
  canvasContext.strokeStyle = 'black';
  canvasContext.lineWidth = 1.0 * window.devicePixelRatio;
  paint();
};
function CPGradientPanel(controller) {
  var gradientPanel = document.createElement("div"),
    gradientPreview = new CPGradientPreview(controller),
    gradientStartSwatch = new _CPColorSwatch.default(new _CPColor.default(controller.getCurGradient()[0] & 0xFFFFFF), controller.getCurGradient()[0] >>> 24, gradientPanel),
    gradientEndSwatch = new _CPColorSwatch.default(new _CPColor.default(controller.getCurGradient()[1] & 0xFFFFFF), controller.getCurGradient()[1] >>> 24, gradientPanel);
  function updateGradient() {
    var gradient = [gradientStartSwatch.getAlpha() << 24 | gradientStartSwatch.getColorRgb(), gradientEndSwatch.getAlpha() << 24 | gradientEndSwatch.getColorRgb()];
    controller.setCurGradient(gradient);
  }
  this.getElement = function () {
    return gradientPanel;
  };
  gradientPanel.className = "chickenpaint-gradient-panel";
  gradientPanel.style.display = "none";
  gradientStartSwatch.on("colorChange", updateGradient);
  gradientStartSwatch.on("alphaChange", updateGradient);
  gradientEndSwatch.on("colorChange", updateGradient);
  gradientEndSwatch.on("alphaChange", updateGradient);
  var title, colorsGroup, colorGroup;
  title = document.createElement("p");
  title.textContent = (0, _lang._)("Gradient");
  gradientPanel.appendChild(title);
  gradientPanel.appendChild(gradientPreview.getElement());
  colorsGroup = document.createElement("div");
  colorsGroup.className = "chickenpaint-gradient-colors";
  colorGroup = document.createElement("div");
  colorGroup.className = "chickenpaint-gradient-start-color";
  colorGroup.appendChild(gradientStartSwatch.getElement());
  colorsGroup.appendChild(colorGroup);
  colorGroup = document.createElement("div");
  colorGroup.className = "chickenpaint-gradient-end-color";
  colorGroup.appendChild(gradientEndSwatch.getElement());
  colorsGroup.appendChild(colorGroup);
  gradientPanel.appendChild(colorsGroup);
}
function CPTransformPanel(controller) {
  var TRANSFORM_INTERPOLATION = {
    smooth: (0, _lang._)("Smooth"),
    sharp: (0, _lang._)("Sharp")
  };
  var panel = document.createElement("div"),
    acceptButton = document.createElement("button"),
    rejectButton = document.createElement("button"),
    interpCombo = document.createElement("select");
  this.getElement = function () {
    return panel;
  };
  panel.className = "chickenpaint-transform-panel";
  panel.style.display = "none";
  acceptButton.type = "button";
  rejectButton.type = "button";
  acceptButton.className = "btn btn-primary btn-block";
  rejectButton.className = "btn btn-light btn-block";
  acceptButton.textContent = (0, _lang._)("Apply transform");
  rejectButton.textContent = (0, _lang._)("Cancel");
  interpCombo.addEventListener("change", function (e) {
    controller.setTransformInterpolation(this.value);
  });
  interpCombo.className = 'form-control chickenpaint-transform-interpolation';
  fillCombobox(interpCombo, TRANSFORM_INTERPOLATION);
  if ((0, _CPPolyfill.isCanvasInterpolationSupported)()) {
    var interpGroup = document.createElement("div"),
      interpLabel = document.createElement("label");
    interpLabel.textContent = (0, _lang._)("Transform style");
    interpGroup.className = "form-group";
    interpGroup.appendChild(interpLabel);
    interpGroup.appendChild(interpCombo);
    panel.appendChild(interpGroup);
  }
  var buttonGroup = document.createElement("div");
  buttonGroup.appendChild(acceptButton);
  buttonGroup.appendChild(rejectButton);
  buttonGroup.className = "form-group";
  panel.appendChild(buttonGroup);
  acceptButton.addEventListener("click", function (e) {
    controller.actionPerformed({
      action: "CPTransformAccept"
    });
    e.preventDefault();
  });
  rejectButton.addEventListener("click", function (e) {
    controller.actionPerformed({
      action: "CPTransformReject"
    });
    e.preventDefault();
  });
}
module.exports = exports.default;

},{"../../lib/keymaster.js":68,"../ChickenPaint.js":1,"../engine/CPColorBmp.js":13,"../languages/lang.js":54,"../util/CPColor.js":58,"../util/CPPolyfill.js":60,"./CPCheckbox.js":27,"./CPColorSwatch.js":31,"./CPGUIUtils.js":33,"./CPPalette.js":39,"./CPSlider.js":44,"jquery":296}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPCanvas;
var _lang = require("../languages/lang.js");
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _jquery = _interopRequireDefault(require("jquery"));
var _keymaster = _interopRequireDefault(require("../../lib/keymaster.js"));
var _CPRect = _interopRequireDefault(require("../util/CPRect.js"));
var _CPTransform = _interopRequireDefault(require("../util/CPTransform.js"));
var _CPWacomTablet = _interopRequireDefault(require("../util/CPWacomTablet.js"));
var _CPBezier = _interopRequireDefault(require("../util/CPBezier.js"));
var _throttleDebounce = require("../util/throttle-debounce.js");
var _CPPolygon = _interopRequireDefault(require("../util/CPPolygon.js"));
var _CPPolyfill = require("../util/CPPolyfill.js");
var _CPVector = _interopRequireDefault(require("../util/CPVector.js"));
var _ChickenPaint = _interopRequireDefault(require("../ChickenPaint.js"));
var _CPBrushInfo = _interopRequireDefault(require("../engine/CPBrushInfo.js"));
var _CPLayerGroup = _interopRequireDefault(require("../engine/CPLayerGroup.js"));
var _CPMaskView = _interopRequireDefault(require("../engine/CPMaskView.js"));
var _CPGUIUtils = require("./CPGUIUtils.js");
var _CPScrollbar = _interopRequireDefault(require("./CPScrollbar.js"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPModeStack() {
  this.modes = [];
}

/* We have two distinguished mode indexes which correspond to the CPDefaultMode and the mode that the user has selected
 * in the tool palette (the global drawing mode). On top of that are other transient modes.
 */
CPModeStack.MODE_INDEX_DEFAULT = 0;
CPModeStack.MODE_INDEX_USER = 1;
CPModeStack.prototype.setMode = function (index, newMode) {
  var oldMode = this.modes[index];
  if (oldMode == newMode) {
    return;
  }
  if (oldMode) {
    oldMode.leave();
  }
  this.modes[index] = newMode;
  newMode.enter();
};
CPModeStack.prototype.setDefaultMode = function (newMode) {
  newMode.transient = false;
  newMode.capture = false;
  this.setMode(CPModeStack.MODE_INDEX_DEFAULT, newMode);
};
CPModeStack.prototype.setUserMode = function (newMode) {
  // Leave any transient modes that were on top of the user mode
  for (var i = this.modes.length - 1; i > CPModeStack.MODE_INDEX_USER; i--) {
    this.modes[i].leave();
    this.modes.splice(i, 1);
  }
  newMode.transient = false;
  newMode.capture = false;
  this.setMode(CPModeStack.MODE_INDEX_USER, newMode);
};

/**
 * Deliver the event with the given name and array of parameters to the mode stack.
 *
 * @param event
 * @param params
 * @returns {boolean} True if any mode captured the event
 */
CPModeStack.prototype.deliverEvent = function (event, params) {
  for (var i = this.modes.length - 1; i >= 0; i--) {
    var mode = this.modes[i];
    if (mode[event].apply(mode, params) || mode.capture && event != "paint") {
      /* If the event was handled, don't try to deliver it to anything further up the stack */
      return true;
    }
  }
  return false;
};

// We can call these routines to deliver events that bubble up the mode stack
var _loop = function _loop() {
  var eventName = _arr[_i];
  CPModeStack.prototype[eventName] = function (e, button, pressure) {
    this.deliverEvent(eventName, [e, button, pressure]);
  };
};
for (var _i = 0, _arr = ["mouseDown", "mouseUp"]; _i < _arr.length; _i++) {
  _loop();
}
var _loop2 = function _loop2() {
  var eventName = _arr2[_i2];
  CPModeStack.prototype[eventName] = function (e, pressure) {
    this.deliverEvent(eventName, [e, pressure]);
  };
};
for (var _i2 = 0, _arr2 = ["mouseDrag", "mouseMove"]; _i2 < _arr2.length; _i2++) {
  _loop2();
}
var _loop3 = function _loop3() {
  var eventName = _arr3[_i3];
  CPModeStack.prototype[eventName] = function (e) {
    if (this.deliverEvent(eventName, [e])) {
      // Swallow handled keypresses
      e.preventDefault();
    }
  };
};
for (var _i3 = 0, _arr3 = ["keyDown", "keyUp"]; _i3 < _arr3.length; _i3++) {
  _loop3();
}
CPModeStack.prototype.paint = function (context) {
  this.deliverEvent("paint", [context]);
};

/**
 * Add a mode to the top of the mode stack.
 *
 * @param mode {CPMode}
 * @param transient {boolean} Set to true if the mode is expected to remove itself from stack upon completion.
 */
CPModeStack.prototype.push = function (mode, transient) {
  var previousTop = this.peek();
  if (previousTop) {
    previousTop.suspend();
  }
  mode.transient = transient;
  mode.capture = false;
  mode.enter();
  this.modes.push(mode);
};
CPModeStack.prototype.peek = function () {
  if (this.modes.length > 0) {
    return this.modes[this.modes.length - 1];
  } else {
    return null;
  }
};

/**
 * Remove the node at the top of the stack and return the new top of the stack.
 *
 * @returns {*}
 */
CPModeStack.prototype.pop = function () {
  var outgoingMode = this.modes.pop(),
    newTop = this.peek();
  if (outgoingMode) {
    outgoingMode.leave();
  }
  if (newTop) {
    newTop.resume();
  }
  return newTop;
};
function CPCanvas(controller) {
  var BUTTON_PRIMARY = 0,
    BUTTON_WHEEL = 1,
    BUTTON_SECONDARY = 2,
    MIN_ZOOM = 0.10,
    MAX_ZOOM = 16.0,
    CURSOR_DEFAULT = "default",
    CURSOR_PANNABLE = "grab",
    CURSOR_PANNING = "grabbing",
    CURSOR_CROSSHAIR = "crosshair",
    CURSOR_MOVE = "move",
    CURSOR_NESW_RESIZE = "nesw-resize",
    CURSOR_NWSE_RESIZE = "nwse-resize",
    CURSOR_NS_RESIZE = "ns-resize",
    CURSOR_EW_RESIZE = "ew-resize";
  var that = this,
    canvasContainer = document.createElement("div"),
    canvasContainerTop = document.createElement("div"),
    canvasContainerBottom = document.createElement("div"),
    // Our canvas that fills the entire screen
    canvas = document.createElement("canvas"),
    canvasContext = canvas.getContext("2d"),
    // Our cache of the artwork's fusion to be drawn onto our main canvas using our current transform
    artworkCanvas = document.createElement("canvas"),
    artworkCanvasContext = artworkCanvas.getContext("2d"),
    checkerboardPattern = (0, _CPGUIUtils.createCheckerboardPattern)(canvasContext),
    artwork = controller.getArtwork(),
    // Canvas transformations
    zoom = 1,
    offsetX = 0,
    offsetY = 0,
    canvasRotation = 0.0,
    transform = new _CPTransform.default(),
    interpolation = false,
    // Grid options
    showGrid = false,
    gridSize = 32,
    mouseX = 0,
    mouseY = 0,
    mouseIn = false,
    mouseDown = [false, false, false] /* Track each button independently */,
    wacomPenDown = false,
    sawPen = false,
    sawTouchWithPressure = false,
    /* The area of the document that should have its layers fused and repainted to the screen
     * (i.e. an area modified by drawing tools). 
     * 
     * Initially set to the size of the artwork so we can repaint the whole thing.
     */
    artworkUpdateRegion = artwork.getBounds(),
    /**
     * The area of the canvas that should be repainted to the screen during the next repaint internal (in canvas
     * coordinates).
     */
    repaintRegion = new _CPRect.default(0, 0, 0, 0),
    scheduledRepaint = false,
    /**
        * If we're viewing a single mask on its own instead of the document fusion, we store that view here.
        *
        * @type {CPMaskView}
        */
    maskView,
    //
    // Modes system: modes control the way the GUI is reacting to the user input
    // All the tools are implemented through modes
    //

    defaultMode,
    colorPickerMode,
    panMode,
    rotateCanvasMode,
    floodFillMode,
    gradientFillMode,
    rectSelectionMode,
    moveToolMode,
    transformMode,
    // this must correspond to the stroke modes defined in CPToolInfo
    drawingModes = [],
    modeStack = new CPModeStack(),
    curDrawMode,
    horzScroll = new _CPScrollbar.default(false),
    vertScroll = new _CPScrollbar.default(true),
    tablet = _CPWacomTablet.default.getRef();
  Math.sign = Math.sign || function (x) {
    x = +x; // convert to a number
    if (x === 0 || isNaN(x)) {
      return x;
    }
    return x > 0 ? 1 : -1;
  };

  // Parent class with empty event handlers for those drawing modes that don't need every event
  function CPMode() {}

  /**
      * True if this mode will be exiting the mode stack as soon as the current interation is complete.
      *
      * @type {boolean}
      */
  CPMode.prototype.transient = false;

  /**
      * If true, no input events will be sent to any modes underneath this one (event stream is captured).
      *
      * Painting events will continue to bubble.
      *
      * @type {boolean}
      */
  CPMode.prototype.capture = false;
  CPMode.prototype.enter = function () {
    setCursor(CURSOR_DEFAULT);
  };
  CPMode.prototype.leave = function () {
    this.capture = false;
  };
  CPMode.prototype.mouseMove = CPMode.prototype.paint = CPMode.prototype.mouseDown = CPMode.prototype.mouseDrag = CPMode.prototype.mouseUp = CPMode.prototype.keyDown = CPMode.prototype.suspend = CPMode.prototype.resume = CPMode.prototype.keyUp = function () {};

  //
  // Default UI Mode when not doing anything: used to start the other modes
  //

  function CPDefaultMode() {}
  CPDefaultMode.prototype = Object.create(CPMode.prototype);
  CPDefaultMode.prototype.constructor = CPDefaultMode;
  CPDefaultMode.prototype.mouseDown = function (e, button, pressure) {
    var spacePressed = _keymaster.default.isPressed("space");
    if (!spacePressed && (button == BUTTON_SECONDARY || button == BUTTON_PRIMARY && e.altKey)) {
      modeStack.push(colorPickerMode, true);
      // Avoid infinite recursion by only delivering the event to the new mode (don't let it bubble back to us!)
      modeStack.peek().mouseDown(e, button, pressure);
    } else if (!spacePressed && button == BUTTON_PRIMARY && !e.altKey && _keymaster.default.isPressed("r")) {
      modeStack.push(rotateCanvasMode, true);
      modeStack.peek().mouseDown(e, button, pressure);
    } else if (button == BUTTON_WHEEL || !e.altKey && spacePressed && button == BUTTON_PRIMARY) {
      modeStack.push(panMode, true);
      modeStack.peek().mouseDown(e, button, pressure);
    }
  };
  CPDefaultMode.prototype.keyDown = function (e) {
    if (e.key.toLowerCase() === "r" && e.key !== " ") {
      modeStack.push(rotateCanvasMode, true);
      modeStack.peek().keyDown(e);
    } else if (e.key.toLowerCase() !== "r" && e.key === " " && !e.altKey) {
      // We can start the pan mode before the mouse button is even pressed, so that the "grabbable" cursor appears
      modeStack.push(panMode, true);
      modeStack.peek().keyDown(e);
      return true;
    }
  };

  /**
      * A base for the three drawing modes, so they can all share the same brush-preview-circle drawing behaviour.
      *
      * @constructor
      */
  function CPDrawingMode() {
    this.shouldPaintBrushPreview = false;

    /* The last rectangle we dirtied with a brush preview circle, or null if one hasn't been drawn yet */
    this.oldPreviewRect = null;
  }
  CPDrawingMode.prototype = Object.create(CPMode.prototype);
  CPDrawingMode.prototype.constructor = CPDrawingMode;

  /**
   * Get a rectangle that encloses the preview brush, in screen coordinates.
   */
  CPDrawingMode.prototype.getBrushPreviewOval = function () {
    var brushSize = controller.getBrushSize() * zoom;
    return new _CPRect.default(mouseX - brushSize / 2, mouseY - brushSize / 2, mouseX + brushSize / 2, mouseY + brushSize / 2);
  };

  /**
   * Queues up the brush preview oval to be drawn.
   */
  CPDrawingMode.prototype.queueBrushPreview = function () {
    /* If we're not the top-most mode, it's unlikely that left clicking will drawing for us, so don't consider
     * painting the brush preview
     */
    if (modeStack.peek() != this) {
      return;
    }
    this.shouldPaintBrushPreview = true;
    var rect = this.getBrushPreviewOval();
    rect.grow(2, 2);

    // If a brush preview was drawn previously, stretch the repaint region to remove that old copy
    if (this.oldPreviewRect != null) {
      rect.union(this.oldPreviewRect);
      this.oldPreviewRect = null;
    }
    repaintRect(rect);
  };

  /**
      * Erase the brush preview if one had been drawn
      */
  CPDrawingMode.prototype.eraseBrushPreview = function () {
    this.shouldPaintBrushPreview = false;
    if (this.oldPreviewRect != null) {
      repaintRect(this.oldPreviewRect);
      this.oldPreviewRect = null;
    }
  };
  CPDrawingMode.prototype.mouseMove = function (e, pressure) {
    this.queueBrushPreview();
  };
  CPDrawingMode.prototype.enter = function () {
    CPMode.prototype.enter.call(this);
    if (mouseIn) {
      this.queueBrushPreview();
    }
  };
  CPDrawingMode.prototype.leave = function () {
    CPMode.prototype.leave.call(this);
    this.eraseBrushPreview();
  };
  CPDrawingMode.prototype.suspend = CPDrawingMode.prototype.leave;
  CPDrawingMode.prototype.resume = CPDrawingMode.prototype.enter;
  CPDrawingMode.prototype.paint = function () {
    if (this.shouldPaintBrushPreview) {
      //円カーソルを表示
      this.shouldPaintBrushPreview = false;
      var r = this.getBrushPreviewOval();
      canvasContext.beginPath();
      canvasContext.arc((r.left + r.right) / 2, (r.top + r.bottom) / 2, r.getWidth() / 2, 0, Math.PI * 2);
      canvasContext.stroke();
      r.grow(2, 2);
      if (this.oldPreviewRect == null) {
        this.oldPreviewRect = r;
      } else {
        this.oldPreviewRect.union(r);
      }
    }
  };
  function CPFreehandMode() {
    CPDrawingMode.call(this);
    this.smoothMouse = {
      x: 0.0,
      y: 0.0
    };
  }
  CPFreehandMode.prototype = Object.create(CPDrawingMode.prototype);
  CPFreehandMode.prototype.constructor = CPFreehandMode;
  CPFreehandMode.prototype.mouseDown = function (e, button, pressure) {
    if (!this.capture && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") && shouldDrawToThisLayer()) {
      var pf = coordToDocument({
        x: mouseX,
        y: mouseY
      });
      this.eraseBrushPreview();
      if (artwork.beginStroke(pf.x, pf.y, pressure)) {
        this.capture = true;
        this.smoothMouse = pf;
        return true;
      }
    }
  };
  CPFreehandMode.prototype.mouseDrag = function (e, pressure) {
    if (typeof navigator.maxTouchPoints !== "number" || navigator.maxTouchPoints < 3) {
      //タッチデバイスでは無い時に
      CPDrawingMode.prototype.mouseMove.call(this, e, pressure); //円カーソルをmouseDrag時に表示
    }

    if (this.capture) {
      var pf = coordToDocument({
          x: mouseX,
          y: mouseY
        }),
        smoothing = Math.min(0.999, Math.pow(controller.getBrushInfo().smoothing, 0.3));
      this.smoothMouse.x = (1.0 - smoothing) * pf.x + smoothing * this.smoothMouse.x;
      this.smoothMouse.y = (1.0 - smoothing) * pf.y + smoothing * this.smoothMouse.y;
      artwork.continueStroke(this.smoothMouse.x, this.smoothMouse.y, pressure);
      return true;
    } else {
      this.mouseMove(e);
    }
  };
  CPFreehandMode.prototype.mouseUp = function (e, button, pressure) {
    if (this.capture) {
      if (button == BUTTON_PRIMARY) {
        this.capture = false;
        artwork.endStroke();
      }
      return true;
    }
  };
  function CPLineMode() {
    var dragLineFrom,
      dragLineTo,
      LINE_PREVIEW_WIDTH = 1;
    this.mouseDown = function (e, button, pressure) {
      if (!this.capture && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") && shouldDrawToThisLayer()) {
        this.capture = true;
        dragLineFrom = dragLineTo = {
          x: mouseX + 0.5,
          y: mouseY + 0.5
        };
        this.eraseBrushPreview();
        return true;
      }
    };
    this.mouseDrag = function (e) {
      if (this.capture) {
        var
        // The old line position that we'll invalidate for redraw
        invalidateRect = new _CPRect.default(Math.min(dragLineFrom.x, dragLineTo.x) - LINE_PREVIEW_WIDTH - 1, Math.min(dragLineFrom.y, dragLineTo.y) - LINE_PREVIEW_WIDTH - 1, Math.max(dragLineFrom.x, dragLineTo.x) + LINE_PREVIEW_WIDTH + 1 + 1, Math.max(dragLineFrom.y, dragLineTo.y) + LINE_PREVIEW_WIDTH + 1 + 1);
        dragLineTo = {
          x: mouseX + 0.5,
          y: mouseY + 0.5
        }; // Target centre of pixel

        if (e.shiftKey) {
          // Snap to nearest 45 degrees
          var snap = Math.PI / 4,
            angle = Math.round(Math.atan2(dragLineTo.y - dragLineFrom.y, dragLineTo.x - dragLineFrom.x) / snap);
          switch (angle) {
            case 0:
            case 4:
              dragLineTo.y = dragLineFrom.y;
              break;
            case 2:
            case 6:
              dragLineTo.x = dragLineFrom.x;
              break;
            default:
              angle *= snap;
              var length = Math.sqrt((dragLineTo.y - dragLineFrom.y) * (dragLineTo.y - dragLineFrom.y) + (dragLineTo.x - dragLineFrom.x) * (dragLineTo.x - dragLineFrom.x));
              dragLineTo.x = dragLineFrom.x + length * Math.cos(angle);
              dragLineTo.y = dragLineFrom.y + length * Math.sin(angle);
          }
        }

        // The new line position
        invalidateRect.union(new _CPRect.default(Math.min(dragLineFrom.x, dragLineTo.x) - LINE_PREVIEW_WIDTH - 1, Math.min(dragLineFrom.y, dragLineTo.y) - LINE_PREVIEW_WIDTH - 1, Math.max(dragLineFrom.x, dragLineTo.x) + LINE_PREVIEW_WIDTH + 1 + 1, Math.max(dragLineFrom.y, dragLineTo.y) + LINE_PREVIEW_WIDTH + 1 + 1));
        repaintRect(invalidateRect);
        return true;
      } else {
        this.mouseMove.call(this, e);
      }
    };
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == BUTTON_PRIMARY) {
        var from = coordToDocument(dragLineFrom),
          to = coordToDocument(dragLineTo);
        this.capture = false;
        this.drawLine(from, to);
        var invalidateRect = new _CPRect.default(Math.min(dragLineFrom.x, dragLineTo.x) - LINE_PREVIEW_WIDTH - 1, Math.min(dragLineFrom.y, dragLineTo.y) - LINE_PREVIEW_WIDTH - 1, Math.max(dragLineFrom.x, dragLineTo.x) + LINE_PREVIEW_WIDTH + 1 + 1, Math.max(dragLineFrom.y, dragLineTo.y) + LINE_PREVIEW_WIDTH + 1 + 1);
        repaintRect(invalidateRect);
        return true;
      }
    };
    this.paint = function () {
      if (this.capture) {
        canvasContext.lineWidth = LINE_PREVIEW_WIDTH;
        canvasContext.beginPath();
        canvasContext.moveTo(dragLineFrom.x, dragLineFrom.y);
        canvasContext.lineTo(dragLineTo.x, dragLineTo.y);
        canvasContext.stroke();
      } else {
        // Draw the regular brush preview circle
        CPDrawingMode.prototype.paint.call(this);
      }
    };
    CPDrawingMode.call(this);
  }
  CPLineMode.prototype = Object.create(CPDrawingMode.prototype);
  CPLineMode.prototype.constructor = CPLineMode;
  CPLineMode.prototype.drawLine = function (from, to) {
    artwork.beginStroke(from.x, from.y, 1);
    artwork.continueStroke(to.x, to.y, 1);
    artwork.endStroke();
  };
  function CPBezierMode() {
    var BEZIER_POINTS = 500,
      BEZIER_POINTS_PREVIEW = 100,
      BEZIER_STATE_INITIAL = 0,
      BEZIER_STATE_POINT_1 = 1,
      BEZIER_STATE_POINT_2 = 2;
    var dragBezierMode = BEZIER_STATE_INITIAL,
      dragBezierP0,
      dragBezierP1,
      dragBezierP2,
      dragBezierP3;
    this.mouseDown = function (e, button, pressure) {
      if (!this.capture && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") && shouldDrawToThisLayer()) {
        var p = coordToDocument({
          x: mouseX,
          y: mouseY
        });
        dragBezierMode = BEZIER_STATE_INITIAL;
        dragBezierP0 = dragBezierP1 = dragBezierP2 = dragBezierP3 = p;
        this.capture = true;
        this.eraseBrushPreview();
        return true;
      }
    };

    // Handles the first part of the Bezier where the user drags out a straight line
    this.mouseDrag = function (e) {
      if (this.capture && dragBezierMode === BEZIER_STATE_INITIAL) {
        var p = coordToDocument({
          x: mouseX,
          y: mouseY
        });
        dragBezierP2 = dragBezierP3 = p;
        that.repaintAll();
        return true;
      } else {
        this.mouseMove.call(this, e);
      }
    };
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == BUTTON_PRIMARY) {
        switch (dragBezierMode) {
          case BEZIER_STATE_INITIAL:
            dragBezierMode = BEZIER_STATE_POINT_1;
            break;
          case BEZIER_STATE_POINT_1:
            dragBezierMode = BEZIER_STATE_POINT_2;
            break;
          case BEZIER_STATE_POINT_2:
            this.capture = false;
            var p0 = dragBezierP0,
              p1 = dragBezierP1,
              p2 = dragBezierP2,
              p3 = dragBezierP3,
              bezier = new _CPBezier.default();
            bezier.x0 = p0.x;
            bezier.y0 = p0.y;
            bezier.x1 = p1.x;
            bezier.y1 = p1.y;
            bezier.x2 = p2.x;
            bezier.y2 = p2.y;
            bezier.x3 = p3.x;
            bezier.y3 = p3.y;
            var x = new Array(BEZIER_POINTS),
              y = new Array(BEZIER_POINTS);
            bezier.compute(x, y, BEZIER_POINTS);
            artwork.beginStroke(x[0], y[0], 1);
            for (var i = 1; i < BEZIER_POINTS; i++) {
              artwork.continueStroke(x[i], y[i], 1);
            }
            artwork.endStroke();
            that.repaintAll();
        }
        return true;
      }
    };
    this.mouseMove = function (e, pressure) {
      if (this.capture) {
        var p = coordToDocument({
          x: mouseX,
          y: mouseY
        });
        if (dragBezierMode == BEZIER_STATE_POINT_1) {
          dragBezierP1 = p;
        } else if (dragBezierMode == BEZIER_STATE_POINT_2) {
          dragBezierP2 = p;
        }
        that.repaintAll(); // FIXME: repaint only the bezier region

        return true;
      } else {
        // Draw the normal brush preview while not in the middle of a bezier operation
        CPDrawingMode.prototype.mouseMove.call(this, e, pressure);
      }
    };
    this.paint = function () {
      if (this.capture) {
        var bezier = new _CPBezier.default(),
          p0 = coordToDisplay(dragBezierP0),
          p1 = coordToDisplay(dragBezierP1),
          p2 = coordToDisplay(dragBezierP2),
          p3 = coordToDisplay(dragBezierP3);
        bezier.x0 = p0.x;
        bezier.y0 = p0.y;
        bezier.x1 = p1.x;
        bezier.y1 = p1.y;
        bezier.x2 = p2.x;
        bezier.y2 = p2.y;
        bezier.x3 = p3.x;
        bezier.y3 = p3.y;
        var x = new Array(BEZIER_POINTS_PREVIEW),
          y = new Array(BEZIER_POINTS_PREVIEW);
        bezier.compute(x, y, BEZIER_POINTS_PREVIEW);
        canvasContext.beginPath();
        canvasContext.moveTo(x[0], y[0]);
        for (var i = 1; i < BEZIER_POINTS_PREVIEW; i++) {
          canvasContext.lineTo(x[i], y[i]);
        }
        canvasContext.moveTo(~~p0.x, ~~p0.y);
        canvasContext.lineTo(~~p1.x, ~~p1.y);
        canvasContext.moveTo(~~p2.x, ~~p2.y);
        canvasContext.lineTo(~~p3.x, ~~p3.y);
        canvasContext.stroke();
      } else {
        // Paint the regular brush preview
        CPDrawingMode.prototype.paint.call(this);
      }
    };
    CPDrawingMode.call(this);
  }
  CPBezierMode.prototype = Object.create(CPDrawingMode.prototype);
  CPBezierMode.prototype.constructor = CPBezierMode;
  function CPColorPickerMode() {
    var mouseButton;
    this.mouseDown = function (e, button, pressure) {
      if (this.capture) {
        return true;
      } else if (!_keymaster.default.isPressed("space") && (button == BUTTON_PRIMARY && (!this.transient || e.altKey) || button == BUTTON_SECONDARY)) {
        mouseButton = button;
        this.capture = true;
        setCursor(CURSOR_CROSSHAIR);
        this.mouseDrag(e);
        return true;
      } else if (this.transient) {
        // If we're not sampling and we get a button not intended for us, we probably shouldn't be on the stack
        modeStack.pop();
      }
    };
    this.mouseDrag = function (e) {
      if (this.capture) {
        var pf = coordToDocument({
          x: mouseX,
          y: mouseY
        });
        if (artwork.isPointWithin(pf.x, pf.y)) {
          controller.setCurColor(new _CPColor.default(artwork.colorPicker(pf.x, pf.y)));
        }
        return true;
      }
    };
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == mouseButton) {
        mouseButton = -1;
        this.capture = false;
        setCursor(CURSOR_DEFAULT);
        if (this.transient) {
          modeStack.pop();
        }
        return true;
      }
    };
    this.enter = function () {
      CPMode.prototype.enter.call(this);
      mouseButton = -1;
    };
  }
  CPColorPickerMode.prototype = Object.create(CPMode.prototype);
  CPColorPickerMode.prototype.constructor = CPColorPickerMode;
  function CPPanCanvasMode() {
    var panningX, panningY, panningOffset, panningButton;
    this.keyDown = function (e) {
      if (e.key === " ") {
        // If we're not already panning, then advertise that a left-click would pan
        if (!this.capture) {
          setCursor(CURSOR_PANNABLE);
        }
        return true;
      }
    };
    this.keyUp = function (e) {
      if (this.transient && panningButton != BUTTON_WHEEL && e.key === " ") {
        setCursor(CURSOR_DEFAULT);
        modeStack.pop(); // yield control to the default mode

        return true;
      }
    };
    this.mouseDown = function (e, button, pressure) {
      if (this.capture) {
        return true;
      } else if (button == BUTTON_WHEEL || _keymaster.default.isPressed("space") && button == BUTTON_PRIMARY || !this.transient && button == BUTTON_PRIMARY) {
        this.capture = true;
        panningButton = button;
        panningX = e.pageX;
        panningY = e.pageY;
        panningOffset = that.getOffset();
        setCursor(CURSOR_PANNING);
        return true;
      } else if (this.transient) {
        // If we're not panning and we get a button not intended for us, we probably shouldn't be on the stack
        modeStack.pop();
      }
    };
    this.mouseDrag = function (e) {
      if (this.capture) {
        that.setOffset(panningOffset.x + e.pageX - panningX, panningOffset.y + e.pageY - panningY);
        return true;
      }
    };
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == panningButton) {
        panningButton = -1;
        this.capture = false;
        if (this.transient && !_keymaster.default.isPressed("space")) {
          setCursor(CURSOR_DEFAULT);
          modeStack.pop();
        }
        return true;
      }
    };
    this.enter = function () {
      setCursor(CURSOR_PANNABLE);
    };
  }
  CPPanCanvasMode.prototype = Object.create(CPMode.prototype);
  CPPanCanvasMode.prototype.constructor = CPPanCanvasMode;
  function CPFloodFillMode() {}
  CPFloodFillMode.prototype = Object.create(CPMode.prototype);
  CPFloodFillMode.prototype.constructor = CPFloodFillMode;
  CPFloodFillMode.prototype.mouseDown = function (e, button, pressure) {
    if (button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") && shouldDrawToThisLayer()) {
      var pf = coordToDocument({
        x: mouseX,
        y: mouseY
      });
      if (artwork.isPointWithin(pf.x, pf.y)) {
        artwork.floodFill(pf.x, pf.y);
        that.repaintAll();
      }
      return true;
    }
  };
  function CPRectSelectionMode() {
    var firstClick,
      curRect = new _CPRect.default(0, 0, 0, 0),
      selectingButton = -1;
    this.mouseDown = function (e, button, pressure) {
      if (!this.capture && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space")) {
        var p = coordToDocumentInt({
          x: mouseX,
          y: mouseY
        });
        selectingButton = button;
        curRect.makeEmpty();
        firstClick = p;
        that.repaintAll();
        this.capture = true;
        return true;
      }
    };
    this.mouseDrag = function (e) {
      if (!this.capture) return false;
      var p = coordToDocumentInt({
          x: mouseX,
          y: mouseY
        }),
        square = e.shiftKey,
        squareDist = ~~Math.max(Math.abs(p.x - firstClick.x), Math.abs(p.y - firstClick.y));
      if (p.x >= firstClick.x) {
        curRect.left = firstClick.x;
        curRect.right = (square ? firstClick.x + squareDist : p.x) + 1;
      } else {
        curRect.left = square ? firstClick.x - squareDist : p.x;
        curRect.right = firstClick.x + 1;
      }
      if (p.y >= firstClick.y) {
        curRect.top = firstClick.y;
        curRect.bottom = (square ? firstClick.y + squareDist : p.y) + 1;
      } else {
        curRect.top = square ? firstClick.y - squareDist : p.y;
        curRect.bottom = firstClick.y + 1;
      }
      that.repaintAll();
      return true;
    };
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == selectingButton) {
        artwork.rectangleSelection(curRect);
        curRect.makeEmpty();
        that.repaintAll();
        this.capture = false;
        selectingButton = -1;
        return true;
      }
    };
    this.paint = function () {
      if (!curRect.isEmpty()) {
        canvasContext.lineWidth = 1;
        plotSelectionRect(canvasContext, curRect);
      }
    };
  }
  CPRectSelectionMode.prototype = Object.create(CPMode.prototype);
  CPRectSelectionMode.prototype.constructor = CPRectSelectionMode;
  function CPMoveToolMode() {
    var lastPoint,
      copyMode,
      firstMove = false;
    this.mouseDown = function (e, button, pressure) {
      if (!this.capture && button == BUTTON_PRIMARY && !_keymaster.default.isPressed("space") && checkCurrentLayerIsVisible()) {
        lastPoint = coordToDocument({
          x: mouseX,
          y: mouseY
        });
        copyMode = e.altKey;
        firstMove = true;
        this.capture = true;
        return true;
      }
    };
    this.mouseDrag = (0, _throttleDebounce.throttle)(25, function (e) {
      if (this.capture) {
        var p = coordToDocument({
            x: mouseX,
            y: mouseY
          }),
          moveFloat = {
            x: p.x - lastPoint.x,
            y: p.y - lastPoint.y
          },
          moveInt = {
            x: ~~moveFloat.x,
            y: ~~moveFloat.y
          }; // Round towards zero

        if (moveInt.x != 0 || moveInt.y != 0) {
          artwork.move(moveInt.x, moveInt.y, copyMode && firstMove);
          firstMove = false;
        }

        /*
         * Nudge the last point by the remainder we weren't able to move this iteration (due to move() only
         * accepting integer offsets). This'll carry that fractional part of the move over for next iteration.
         */
        lastPoint.x = p.x - (moveFloat.x - moveInt.x);
        lastPoint.y = p.y - (moveFloat.y - moveInt.y);
        return true;
      }
    });
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == BUTTON_PRIMARY) {
        this.capture = false;
        if (this.transient) {
          modeStack.pop();
        }
        return true;
      }
    };
  }
  CPMoveToolMode.prototype = Object.create(CPMode.prototype);
  CPMoveToolMode.prototype.constructor = CPMoveToolMode;
  CPMoveToolMode.prototype.mouseMove = function (e) {
    if (!_keymaster.default.isPressed("r")) {
      setCursor(CURSOR_MOVE);
      return true;
    }
  };
  CPMoveToolMode.prototype.enter = function () {
    setCursor(CURSOR_MOVE);
  };
  function CPTransformMode() {
    var HANDLE_RADIUS = 3,
      DRAG_NONE = -1,
      DRAG_ROTATE = -2,
      DRAG_MOVE = -3,
      DRAG_NW_CORNER = 0,
      DRAG_N_EDGE = 1,
      DRAG_NE_CORNER = 2,
      DRAG_E_EDGE = 3,
      DRAG_SE_CORNER = 4,
      DRAG_S_EDGE = 5,
      DRAG_SW_CORNER = 6,
      DRAG_W_EDGE = 7;
    var /** @type {CPTransform} The current transformation */
      affine,
      /** @type {CPRect} The initial document rectangle to transform */
      srcRect,
      /** @type {CPPolygon} The initial transform rect */
      origCornerPoints,
      /** @type {CPPolygon} The current corners of the transform rect in document space */
      cornerPoints,
      draggingMode = DRAG_NONE,
      lastDragPointDisplay,
      lastDragPointDoc,
      // Keep track of how many degrees we've rotated so far during this transformation
      rotationAccumulator;

    /**
           * Get the polygon that represents the current transform result area in display coordinates.
           *
           * @returns {CPPolygon}
           */
    function cornersToDisplayPolygon() {
      return cornerPoints.getTransformed(transform);
    }
    function averagePoints(p1, p2) {
      return {
        x: (p1.x + p2.x) / 2,
        y: (p1.y + p2.y) / 2
      };
    }
    function roundPoint(p) {
      return {
        x: Math.round(p.x),
        y: Math.round(p.y)
      };
    }

    /**
           * Decide which drag action should be taken if our mouse was pressed in the given position.
           *
           * @param {CPPolygon} corners - The corners of the current transform area
           * @param mouse - The mouse point
           * @returns {number} A DRAG_* constant
           */
    function classifyDragAction(corners, mouse) {
      var HANDLE_CAPTURE_RADIUS = 7,
        HANDLE_CAPTURE_RADIUS_SQR = HANDLE_CAPTURE_RADIUS * HANDLE_CAPTURE_RADIUS,
        EDGE_CAPTURE_RADIUS = HANDLE_CAPTURE_RADIUS,
        EDGE_CAPTURE_RADIUS_SQR = EDGE_CAPTURE_RADIUS * EDGE_CAPTURE_RADIUS;

      // Are we dragging a corner?
      for (var i = 0; i < corners.points.length; i++) {
        if ((mouse.x - corners.points[i].x) * (mouse.x - corners.points[i].x) + (mouse.y - corners.points[i].y) * (mouse.y - corners.points[i].y) <= HANDLE_CAPTURE_RADIUS_SQR) {
          return i * 2;
        }
      }

      // Are we dragging an edge?
      for (var _i4 = 0; _i4 < corners.points.length; _i4++) {
        var edgeP1 = corners.points[_i4],
          edgeP2 = corners.points[(_i4 + 1) % corners.points.length],
          vEdge = new _CPVector.default(edgeP2.x - edgeP1.x, edgeP2.y - edgeP1.y),
          vMouse = new _CPVector.default(mouse.x - edgeP1.x, mouse.y - edgeP1.y),
          vEdgeLen = vEdge.getLength(),
          vEdgeScaled = vEdge.getScaled(1 / vEdgeLen),
          vMouseScaled = vMouse.getScaled(1 / vEdgeLen),
          mousePropOnLine = vEdgeScaled.getDotProduct(vMouseScaled);

        // If we're within the ends of the line (perpendicularly speaking)
        if (mousePropOnLine >= 0.0 && mousePropOnLine <= 1.0) {
          // This gives us the point on the line closest to the mouse
          vEdge.scale(mousePropOnLine);
          if ((vEdge.x - vMouse.x) * (vEdge.x - vMouse.x) + (vEdge.y - vMouse.y) * (vEdge.y - vMouse.y) <= EDGE_CAPTURE_RADIUS_SQR) {
            return _i4 * 2 + 1;
          }
        }
      }
      if (corners.containsPoint(mouse)) {
        return DRAG_MOVE;
      }
      return DRAG_ROTATE;
    }
    function setCursorForHandles() {
      var corners = cornersToDisplayPolygon(),
        mouse = {
          x: mouseX,
          y: mouseY
        },
        dragAction = classifyDragAction(corners, mouse);
      switch (dragAction) {
        case DRAG_NW_CORNER:
        case DRAG_NE_CORNER:
        case DRAG_SE_CORNER:
        case DRAG_SW_CORNER:
          // Choose a cursor for a 45-degree resize from this corner
          var cornerIndex = ~~(dragAction / 2),
            cornerBefore = corners.points[(cornerIndex + 3) % 4],
            corner = corners.points[cornerIndex],
            cornerAfter = corners.points[(cornerIndex + 1) % 4],
            // Get a vector which points 45 degrees toward the center of the box, this'll do for cursor direction
            v45 = _CPVector.default.subtractPoints(cornerBefore, corner).normalize().add(_CPVector.default.subtractPoints(cornerAfter, corner).normalize());
          setResizeCursorForVector(v45);
          break;
        case DRAG_N_EDGE:
        case DRAG_E_EDGE:
        case DRAG_S_EDGE:
        case DRAG_W_EDGE:
          // Resizing from here will move edge perpendicularly
          var corner1 = corners.points[~~(dragAction / 2)],
            corner2 = corners.points[(~~(dragAction / 2) + 1) % 4],
            vPerp = _CPVector.default.subtractPoints(corner2, corner1).getPerpendicular();
          setResizeCursorForVector(vPerp);
          break;
        case DRAG_MOVE:
          setCursor(CURSOR_MOVE);
          break;
        case DRAG_ROTATE:
          setCursor(CURSOR_DEFAULT); // TODO add a custom rotation cursor
          break;
        default:
          setCursor(CURSOR_DEFAULT);
      }
    }
    this.mouseDown = function (e, button, pressure) {
      if (!this.capture && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space")) {
        var corners = cornersToDisplayPolygon();
        draggingMode = classifyDragAction(corners, {
          x: mouseX,
          y: mouseY
        });
        lastDragPointDisplay = {
          x: mouseX,
          y: mouseY
        };
        lastDragPointDoc = coordToDocument(lastDragPointDisplay);
        this.capture = true;
        setCursorForHandles();
        return true;
      }
    };
    this.mouseDrag = (0, _throttleDebounce.throttle)(40, function (e) {
      var MIN_SCALE = 0.001;
      if (this.capture) {
        var dragPointDisplay = {
          x: mouseX,
          y: mouseY
        };
        switch (draggingMode) {
          case DRAG_MOVE:
            var dragPointDoc = roundPoint(coordToDocument(dragPointDisplay)),
              translation = _CPVector.default.subtractPoints(dragPointDoc, lastDragPointDoc),
              // Only translate in whole-pixel increments (in document space not canvas space)
              translationRounded = translation.getTruncated(),
              translationRemainder = translation.subtract(translationRounded),
              translateInstance = new _CPTransform.default();

            /*
             * Apply the translate *after* the current affine is applied.
             */
            translateInstance.translate(translationRounded.x, translationRounded.y);
            affine.preMultiply(translateInstance);

            // Accumulate the fractional move that we didn't apply for next time
            lastDragPointDoc = _CPVector.default.subtractPoints(dragPointDoc, translationRemainder);
            break;
          case DRAG_ROTATE:
            var DRAG_ROTATE_SNAP_ANGLE = Math.PI / 4;
            var centerDoc = cornerPoints.getCenter(),
              centerDisplay = coordToDisplay(centerDoc),
              oldMouseAngle = Math.atan2(lastDragPointDisplay.y - centerDisplay.y, lastDragPointDisplay.x - centerDisplay.x),
              newMouseAngle = Math.atan2(dragPointDisplay.y - centerDisplay.y, dragPointDisplay.x - centerDisplay.x),
              deltaMouseAngle = newMouseAngle - oldMouseAngle,
              rotateAngle,
              rotateInstance = new _CPTransform.default();
            rotationAccumulator += deltaMouseAngle;
            if (e.shiftKey) {
              /*
               * The rotation in the decomposition was made about the origin. We want to rotate about the
               * center of the selection, so first rotate the selection to square it up with the axes,
               * then we'll pivot the selection about its center to the new angle.
               */
              rotateAngle = -affine.decompose().rotate + Math.round(rotationAccumulator / DRAG_ROTATE_SNAP_ANGLE) * DRAG_ROTATE_SNAP_ANGLE;
            } else {
              rotateAngle = deltaMouseAngle;
            }

            /* Apply the rotation *after* the current affine instead of before it, so that we don't
             * end up scaling on top of the rotated selection later (which would cause an unwanted shear)
             */
            rotateInstance.rotateAroundPoint(rotateAngle, centerDoc.x, centerDoc.y);
            affine.preMultiply(rotateInstance);
            lastDragPointDisplay = dragPointDisplay;
            break;
          case DRAG_NW_CORNER:
          case DRAG_NE_CORNER:
          case DRAG_SE_CORNER:
          case DRAG_SW_CORNER:
            {
              var draggingCorner = ~~(draggingMode / 2),
                oldCorner = origCornerPoints.points[draggingCorner],
                // The corner we dragged will move into its new position
                newCorner = affine.getInverted().getTransformedPoint(roundPoint(coordToDocument(dragPointDisplay))),
                // The opposite corner to the one we dragged must not move
                fixCorner = origCornerPoints.points[(draggingCorner + 2) % 4],
                /* Now we can see how much we'd need to scale the original rectangle about the fixed corner
                 * for the other corner to reach the new position.
                 */
                scaleX = (newCorner.x - fixCorner.x) / (oldCorner.x - fixCorner.x),
                scaleY = (newCorner.y - fixCorner.y) / (oldCorner.y - fixCorner.y);

              /*
               * If the user resized it until it was zero-sized, just ignore that position and assume they'll move
               * past it in a msec.
               */
              if (Math.abs(scaleX) < MIN_SCALE || Math.abs(scaleY) < MIN_SCALE || isNaN(scaleX) || isNaN(scaleY)) {
                return true;
              }

              // Does user want proportional resize?
              if (e.shiftKey) {
                var largestScale = Math.max(scaleX, scaleY);
                scaleX = largestScale;
                scaleY = largestScale;
              }

              // The transform we do here will be performed first before any of the other transforms (scale, rotate, etc)
              affine.scaleAroundPoint(scaleX, scaleY, fixCorner.x, fixCorner.y);
            }
            break;
          case DRAG_N_EDGE:
          case DRAG_S_EDGE:
          case DRAG_E_EDGE:
          case DRAG_W_EDGE:
            {
              var cornerIndex = ~~(draggingMode / 2),
                oldHandle = averagePoints(origCornerPoints.points[cornerIndex], origCornerPoints.points[(cornerIndex + 1) % 4]),
                // The handle we dragged will move into its new position
                newHandle = affine.getInverted().getTransformedPoint(roundPoint(coordToDocument(dragPointDisplay))),
                // The opposite handle to the one we dragged must not move
                fixHandle = averagePoints(origCornerPoints.points[(cornerIndex + 2) % 4], origCornerPoints.points[(cornerIndex + 3) % 4]),
                _scaleX,
                _scaleY,
                oldVector = _CPVector.default.subtractPoints(oldHandle, fixHandle),
                newVector = _CPVector.default.subtractPoints(newHandle, fixHandle),
                oldLength = oldVector.getLength(),
                // We only take the length in the perpendicular direction to the transform edge:
                newLength = oldVector.getDotProduct(newVector) / oldLength,
                newScale = newLength / oldLength;

              /*
               * If the user resized it until it was zero-sized, just ignore that position and assume they'll move
               * past it in a msec.
               */
              if (Math.abs(newScale) < MIN_SCALE || isNaN(newScale)) {
                return true;
              }
              if (draggingMode == DRAG_N_EDGE || draggingMode == DRAG_S_EDGE) {
                _scaleX = 1.0;
                _scaleY = newScale;
              } else {
                _scaleX = newScale;
                _scaleY = 1.0;
              }
              affine.scaleAroundPoint(_scaleX, _scaleY, fixHandle.x, fixHandle.y);
            }
            break;
        }
        cornerPoints = origCornerPoints.getTransformed(affine);
        artwork.transformAffineAmend(affine);

        // TODO make me more specific
        that.repaintAll();
        return true;
      }
    });
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == BUTTON_PRIMARY) {
        this.capture = false;
        draggingMode = DRAG_NONE;
        return true;
      }
    };

    /*
     * Set an appropriate resize cursor for the specified vector from the center to the handle.
     */
    function setResizeCursorForVector(v) {
      var angle = Math.atan2(-v.y, v.x),
        /*
             * Slice up into 45 degrees slices so that there are +-22.5 degrees centered around each corner,
             * and a 45 degree segment for each edge
             */
        slice = Math.floor(angle / (Math.PI / 4) + 0.5),
        cursor;

      // Wrap angles below the x-axis wrap to positive ones...
      if (slice < 0) {
        slice += 4;
      }
      switch (slice) {
        case 0:
        default:
          cursor = CURSOR_EW_RESIZE;
          break;
        case 1:
          cursor = CURSOR_NESW_RESIZE;
          break;
        case 2:
          cursor = CURSOR_NS_RESIZE;
          break;
        case 3:
          cursor = CURSOR_NWSE_RESIZE;
          break;
      }
      setCursor(cursor);
    }
    this.mouseMove = function () {
      // We want to stick with our choice of cursor throughout the drag operation
      if (!this.capture) {
        setCursorForHandles();
      }
    };
    this.paint = function () {
      var corners = cornersToDisplayPolygon().points,
        handles = new Array(corners.length * 2);

      // Collect the positions of the edge and corner handles...
      for (var i = 0; i < corners.length; i++) {
        handles[i] = corners[i];
      }
      for (var _i5 = 0; _i5 < corners.length; _i5++) {
        var edgeP1 = corners[_i5],
          edgeP2 = corners[(_i5 + 1) % corners.length],
          midWay = {
            x: (edgeP1.x + edgeP2.x) / 2,
            y: (edgeP1.y + edgeP2.y) / 2
          };
        handles[_i5 + corners.length] = midWay;
      }
      (0, _CPGUIUtils.setContrastingDrawStyle)(canvasContext, "fill");
      for (var _i6 = 0; _i6 < handles.length; _i6++) {
        canvasContext.fillRect(handles[_i6].x - HANDLE_RADIUS, handles[_i6].y - HANDLE_RADIUS, HANDLE_RADIUS * 2 + 1, HANDLE_RADIUS * 2 + 1);
      }
      strokePolygon(canvasContext, corners);
    };
    this.keyDown = function (e) {
      if (e.key === "Enter") {
        controller.actionPerformed({
          action: "CPTransformAccept"
        });
        return true;
      } else if (e.key === "Escape") {
        controller.actionPerformed({
          action: "CPTransformReject"
        });
        return true;
      }
    };
    this.enter = function () {
      CPMode.prototype.enter.call(this);

      // Start off with the identity transform
      var initial = artwork.transformAffineBegin(),
        initialSelection;
      affine = initial.transform;
      srcRect = initial.rect;

      // Decide on the rectangle we'll show as the boundary of the transform area
      initialSelection = initial.selection;

      /* If the user didn't have anything selected, we'll use the actual shrink-wrapped transform area instead. */
      if (initialSelection.isEmpty()) {
        initialSelection = initial.rect.clone();
      }
      origCornerPoints = new _CPPolygon.default(initialSelection.toPoints());
      cornerPoints = origCornerPoints.getTransformed(affine);
      draggingMode = -1;
      rotationAccumulator = 0;
      that.repaintAll();
    };
    this.leave = function () {
      CPMode.prototype.leave.call(this);
      that.repaintAll();
    };
  }
  CPTransformMode.prototype = Object.create(CPMode.prototype);
  CPTransformMode.prototype.constructor = CPTransformMode;
  function CPRotateCanvasMode() {
    var firstClick,
      initAngle = 0.0,
      initTransform,
      dragged = false,
      rotateButton = -1;
    this.mouseDown = function (e, button, pressure) {
      if (this.capture) {
        return true;
      } else if (!this.transient && button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") || button == BUTTON_PRIMARY && !e.altKey && !_keymaster.default.isPressed("space") && _keymaster.default.isPressed("r")) {
        firstClick = {
          x: mouseX,
          y: mouseY
        };
        initAngle = that.getRotation();
        initTransform = transform.clone();
        dragged = false;
        this.capture = true;
        rotateButton = button;
        return true;
      } else if (this.transient) {
        modeStack.pop();
      }
    };
    this.mouseDrag = function (e) {
      if (this.capture) {
        var p = {
            x: mouseX,
            y: mouseY
          },
          displayCenter = {
            x: (0, _jquery.default)(canvas).width() / 2,
            y: (0, _jquery.default)(canvas).height() / 2
          },
          canvasCenter = {
            x: canvas.width / 2,
            y: canvas.height / 2
          },
          deltaAngle = Math.atan2(p.y - displayCenter.y, p.x - displayCenter.x) - Math.atan2(firstClick.y - displayCenter.y, firstClick.x - displayCenter.x),
          rotTrans = new _CPTransform.default();
        rotTrans.rotateAroundPoint(deltaAngle, canvasCenter.x, canvasCenter.y);
        rotTrans.multiply(initTransform);
        that.setRotation(initAngle + deltaAngle);
        that.setOffset(~~rotTrans.getTranslateX(), ~~rotTrans.getTranslateY());
        dragged = true;
        return true;
      }
    };

    /**
     * When the mouse is released after rotation, we might want to snap our angle to the nearest 90 degree mark.
     */
    function finishRotation() {
      var ROTATE_SNAP_DEGREES = 5;
      var nearest90 = Math.round(canvasRotation / (Math.PI / 2)) * Math.PI / 2;
      if (Math.abs(canvasRotation - nearest90) < ROTATE_SNAP_DEGREES / 180 * Math.PI) {
        var deltaAngle = nearest90 - initAngle,
          center = {
            x: canvas.width / 2,
            y: canvas.height / 2
          },
          rotTrans = new _CPTransform.default();
        rotTrans.rotateAroundPoint(deltaAngle, center.x, center.y);
        rotTrans.multiply(initTransform);
        that.setRotation(initAngle + deltaAngle);
        that.setOffset(~~rotTrans.getTranslateX(), ~~rotTrans.getTranslateY());
        that.repaintAll();
      }
      that.emitEvent("canvasRotated90", [that.getRotation90()]);
    }
    this.mouseUp = function (e, button, pressure) {
      if (this.capture && button == rotateButton) {
        if (dragged) {
          finishRotation();
        } else {
          that.resetRotation();
        }
        this.capture = false;
        if (this.transient && !_keymaster.default.isPressed("r")) {
          modeStack.pop();
        }
        return true;
      }
    };
    this.keyUp = function (e) {
      if (this.transient && rotateButton != BUTTON_WHEEL && e.key === " ") {
        setCursor(CURSOR_DEFAULT);
        modeStack.pop(); // yield control to the default mode

        return true;
      }
    };
    this.keyDown = function (e) {
      if (e.key.toLowerCase() === "r") {
        // That's our hotkey, so stay in this mode (don't forward to CPDefaultMode)
        return true;
      }
    };
  }
  CPRotateCanvasMode.prototype = Object.create(CPMode.prototype);
  CPRotateCanvasMode.prototype.constructor = CPRotateCanvasMode;
  function CPGradientFillMode() {
    // Super constructor
    CPLineMode.call(this);
  }
  CPGradientFillMode.prototype = Object.create(CPLineMode.prototype);
  CPGradientFillMode.prototype.constructor = CPGradientFillMode;
  CPGradientFillMode.prototype.drawLine = function (from, to) {
    artwork.gradientFill(Math.round(from.x), Math.round(from.y), Math.round(to.x), Math.round(to.y), controller.getCurGradient());
  };
  CPGradientFillMode.prototype.queueBrushPreview = function () {
    //Suppress the drawing of the brush preview (inherited from CPDrawingMode)
  };
  function setCursor(cursor) {
    if (canvas.getAttribute("data-cursor") != cursor) {
      canvas.setAttribute("data-cursor", cursor);
    }
  }
  function checkCurrentLayerIsVisible() {
    var activeLayer = artwork.getActiveLayer();
    if (!(activeLayer.visible && activeLayer.ancestorsAreVisible())) {
      controller.showLayerNotification(activeLayer, (0, _lang._)("Whoops! This layer is currently hidden"), "layer");
      return false;
    } else if (activeLayer.alpha == 0) {
      controller.showLayerNotification(activeLayer, (0, _lang._)("Whoops! This layer's opacity is currently 0%"), "opacity");
      return false;
    }
    return true;
  }

  /**
      * Check that we should be drawing to the current layer, and let the user know if they are being blocked by the
      * layer settings.
      *
      * @returns {boolean} True if we should draw to the current layer
      */
  function shouldDrawToThisLayer() {
    var activeLayer = artwork.getActiveLayer();
    if (activeLayer instanceof _CPLayerGroup.default && !artwork.isEditingMask()) {
      controller.showLayerNotification(activeLayer, (0, _lang._)("Whoops! You can't draw on a group"), "layer");
      return false;
    }
    return checkCurrentLayerIsVisible();
  }

  /**
   * Update the scrollbar's range/position to match the current view settings for the document.
   *
   * @param scrollbar {CPScrollbar}
   * @param visMin The smallest coordinate in this axis in which the drawing appears
   * @param visWidth The extent of the drawing in this axis
   * @param viewSize The extent of the screen canvas in this axis
   * @param offset The present pixel offset of the drawing in this axis
   */
  function updateScrollBar(scrollbar, visMin, visWidth, viewSize, offset) {
    var xMin = visMin - viewSize - offset + visWidth / 4,
      xMax = visMin + visWidth - offset - visWidth / 4;
    scrollbar.setValues(-offset, viewSize, xMin, xMax);
    scrollbar.setBlockIncrement(Math.max(1, ~~(viewSize * .66)));
    scrollbar.setUnitIncrement(Math.max(1, ~~(viewSize * .05)));
  }
  function updateScrollBars() {
    if (horzScroll == null || vertScroll == null || horzScroll.getValueIsAdjusting() || vertScroll.getValueIsAdjusting()) {
      return;
    }
    var visibleRect = getRefreshArea(new _CPRect.default(0, 0, artworkCanvas.width, artworkCanvas.height));
    updateScrollBar(horzScroll, visibleRect.left, visibleRect.getWidth(), (0, _jquery.default)(canvas).width(), that.getOffset().x);
    updateScrollBar(vertScroll, visibleRect.top, visibleRect.getHeight(), (0, _jquery.default)(canvas).height(), that.getOffset().y);
  }
  function updateTransform() {
    transform.setToIdentity();
    transform.translate(offsetX, offsetY);
    transform.scale(zoom, zoom);
    transform.rotate(canvasRotation);
    updateScrollBars();
    that.repaintAll();
  }

  /**
   * Convert a canvas-relative coordinate into document coordinates and return the new coordinate.
   */
  function coordToDocument(coord) {
    // TODO cache inverted transform
    return transform.getInverted().getTransformedPoint(coord);
  }

  /**
   * Convert a canvas-relative coordinate into document coordinates.
   */
  function coordToDocumentInt(coord) {
    var result = coordToDocument(coord);
    result.x = Math.floor(result.x);
    result.y = Math.floor(result.y);
    return result;
  }

  /**
   * Convert a {x: pageX, y: pageY} co-ordinate pair from a mouse event to canvas-relative coordinates.
   */
  function mouseCoordToCanvas(coord) {
    var rect = canvas.getBoundingClientRect();
    return {
      x: coord.x - rect.left - window.pageXOffset,
      y: coord.y - rect.top - window.pageYOffset
    };
  }
  function coordToDisplay(p) {
    return transform.getTransformedPoint(p);
  }
  function coordToDisplayInt(p) {
    var result = coordToDisplay(p);
    result.x = Math.round(result.x);
    result.y = Math.round(result.y);
    return result;
  }

  /**
      * Convert a rectangle that encloses the given document pixels into a rectangle in display coordinates.
      *
      * @param rect {CPRect}
      * @returns {*[]}
      */
  function rectToDisplay(rect) {
    var center = coordToDisplay({
        x: (rect.left + rect.right) / 2,
        y: (rect.top + rect.bottom) / 2
      }),
      coords = rect.toPoints();
    for (var i = 0; i < coords.length; i++) {
      coords[i] = coordToDisplayInt(coords[i]);

      // Need to inset the co-ordinates by 0.5 display pixels for the line to pass through the middle of the display pixel
      coords[i].x += Math.sign(center.x - coords[i].x) * 0.5;
      coords[i].y += Math.sign(center.y - coords[i].y) * 0.5;
    }
    return coords;
  }
  function strokePolygon(context, coords) {
    context.beginPath();
    context.moveTo(coords[0].x, coords[0].y);
    for (var i = 1; i < coords.length; i++) {
      context.lineTo(coords[i].x, coords[i].y);
    }
    context.lineTo(coords[0].x, coords[0].y);
    context.stroke();
  }

  /**
   * Stroke a selection rectangle that encloses the pixels in the given rectangle (in document co-ordinates).
   */
  function plotSelectionRect(context, rect) {
    strokePolygon(context, rectToDisplay(rect));
  }

  /**
   * Take a CPRect of document coordinates and return a CPRect of canvas coordinates to repaint for that region.
   */
  function getRefreshArea(r) {
    var p1 = coordToDisplayInt({
        x: r.left - 1,
        y: r.top - 1
      }),
      p2 = coordToDisplayInt({
        x: r.left - 1,
        y: r.bottom
      }),
      p3 = coordToDisplayInt({
        x: r.right,
        y: r.top - 1
      }),
      p4 = coordToDisplayInt({
        x: r.right,
        y: r.bottom
      }),
      r2 = new _CPRect.default(Math.min(Math.min(p1.x, p2.x), Math.min(p3.x, p4.x)), Math.min(Math.min(p1.y, p2.y), Math.min(p3.y, p4.y)), Math.max(Math.max(p1.x, p2.x), Math.max(p3.x, p4.x)) + 1, Math.max(Math.max(p1.y, p2.y), Math.max(p3.y, p4.y)) + 1);
    r2.grow(2, 2); // to be sure to include everything

    return r2;
  }

  /**
   * Adjust the current offset to bring the center of the artwork to the center of the canvas
   */
  function centerCanvas() {
    var width = canvas.width,
      height = canvas.height,
      artworkCenter = coordToDisplay({
        x: artwork.width / 2,
        y: artwork.height / 2
      });
    that.setOffset(Math.round(offsetX + width / 2.0 - artworkCenter.x), Math.round(offsetY + height / 2.0 - artworkCenter.y));
  }
  this.setZoom = function (_zoom) {
    zoom = _zoom;
    updateTransform();
  };
  this.getZoom = function () {
    return zoom;
  };
  this.setGridSize = function (_gridSize) {
    gridSize = Math.max(Math.round(_gridSize), 1);
    this.repaintAll();
  };
  this.getGridSize = function () {
    return gridSize;
  };
  this.setOffset = function (x, y) {
    if (isNaN(x) || isNaN(y)) {
      console.log("Bad offset");
    } else {
      offsetX = x;
      offsetY = y;
      updateTransform();
    }
  };
  this.getOffset = function () {
    return {
      x: offsetX,
      y: offsetY
    };
  };
  this.setInterpolation = function (enabled) {
    interpolation = enabled;
    (0, _CPPolyfill.setCanvasInterpolation)(canvasContext, enabled);
    this.repaintAll();
  };
  this.setRotation = function (angle) {
    canvasRotation = angle % (2 * Math.PI);
    updateTransform();
  };

  /**
   * Get canvas rotation in radians.
   * 
   * @return {number}
   */
  this.getRotation = function () {
    return canvasRotation;
  };

  /**
   * Get the rotation as the nearest number of whole 90 degree clockwise rotations ([0..3])
   */
  this.getRotation90 = function () {
    var rotation = Math.round(this.getRotation() / Math.PI * 2);

    // Just in case:
    rotation %= 4;

    // We want [0..3] as output
    if (rotation < 0) {
      rotation += 4;
    }
    return rotation;
  };

  /**
   *
   * @param zoom float
   * @param centerX float X co-ordinate in the canvas space
   * @param centerY float Y co-ordinate in the canvas space
   */
  function zoomOnPoint(zoom, centerX, centerY) {
    zoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, zoom));
    if (that.getZoom() != zoom) {
      var offset = that.getOffset();
      that.setOffset(offset.x + ~~((centerX - offset.x) * (1 - zoom / that.getZoom())), offset.y + ~~((centerY - offset.y) * (1 - zoom / that.getZoom())));
      that.setZoom(zoom);

      /*CPController.CPViewInfo viewInfo = new CPController.CPViewInfo();
      viewInfo.zoom = zoom;
      viewInfo.offsetX = offsetX;
      viewInfo.offsetY = offsetY;
      controller.callViewListeners(viewInfo); TODO */

      that.repaintAll();
    }
  }

  // More advanced zoom methods
  function zoomOnCenter(zoom) {
    var width = (0, _jquery.default)(canvas).width(),
      height = (0, _jquery.default)(canvas).height();
    // 拡大を1.41、縮小を0.7092にした関係で、zoomが浮動小数点になるため、1倍2倍に近い時は値をまるめる
    var roundedZoom = parseFloat(zoom);
    if (Math.abs(roundedZoom - 1) < 0.01) {
      zoom = 1;
    } else if (Math.abs(roundedZoom - 2) < 0.2) {
      zoom = 2;
    } else if (Math.abs(roundedZoom - 0.5) < 0.08) {
      zoom = 0.5;
    }
    // console.log("Math.abs(roundedZoom - 1)",Math.abs(roundedZoom - 1));
    // console.log("Math.abs(roundedZoom - 2)",Math.abs(roundedZoom - 2));
    // console.log("Math.abs(roundedZoom - 0.5)",Math.abs(roundedZoom - 0.5));
    // console.log("zoom",zoom);

    zoomOnPoint(zoom, width / 2, height / 2);
  }
  this.zoomIn = function () {
    zoomOnCenter(this.getZoom() * 1.41);
  };
  this.zoomOut = function () {
    zoomOnCenter(this.getZoom() * 0.7092);
  };
  this.zoom100 = function () {
    zoomOnCenter(1);
    centerCanvas();
  };
  this.resetRotation = function () {
    var center = {
        x: canvas.width / 2,
        y: canvas.height / 2
      },
      rotTrans = new _CPTransform.default();
    rotTrans.rotateAroundPoint(-this.getRotation(), center.x, center.y);
    rotTrans.multiply(transform);
    this.setOffset(~~rotTrans.getTranslateX(), ~~rotTrans.getTranslateY());
    this.setRotation(0);
    that.emitEvent("canvasRotated90", [0]);
  };

  /**
   * Get the current pen pressure, given a pointer event.
   * 
   * @param {PointerEvent} e
   * 
   * @return {Number}
   */
  function getPointerPressure(e) {
    // Use Wacom pressure in preference to pointer event pressure (if present)
    if (wacomPenDown) {
      return tablet.getPressure();
    }

    // Safari fails to set pressure = 0.5 for mouse button down like it is supposed to
    if (e.pointerType === "mouse" && e.buttons !== 0 && e.pressure === 0) {
      return 1;
    }
    if (e.pointerType === "touch") {
      /* Some devices like iOS set pressure = 0 for all touch events, so detect that absence of pressure
       * and override to use a pressure of 1.0.
       * 
       * Android provides useful pressure based on the finger's contact area with the screen (Pixel 4A).
       */
      if (e.pressure !== 0) {
        sawTouchWithPressure = true;
      }
      if (sawTouchWithPressure) {
        return e.pressure * 2;
      }
      return 1.0;
    }

    /* In the Pointer Events API, mice have a default pressure of 0.5, but we want 1.0. Since we can't 
     * reliably distinguish between mice and pens, we don't have any better options:
     */
    return e.pressure * 2;
  }
  var mouseWheelDebounce = false;
  function handleMouseWheel(e) {
    if (e.deltaY != 0) {
      if (!mouseWheelDebounce || Math.abs(e.deltaY) > 20) {
        var factor;
        if (e.deltaY > 0) {
          factor = 1 / 1.15;
        } else {
          factor = 1.15;
        }
        var canvasPoint = mouseCoordToCanvas({
            x: e.pageX,
            y: e.pageY
          }),
          docPoint = coordToDocument(canvasPoint);
        if (artwork.isPointWithin(docPoint.x, docPoint.y)) {
          zoomOnPoint(that.getZoom() * factor, canvasPoint.x, canvasPoint.y);
        } else {
          zoomOnPoint(that.getZoom() * factor, offsetX + ~~(artwork.width * zoom / 2), offsetY + ~~(artwork.height * zoom / 2));
        }
        mouseWheelDebounce = mouseWheelDebounce || setTimeout(function () {
          mouseWheelDebounce = false;
        }, 50);
      }
      e.preventDefault();
    }
  }
  var canvasClientRect;
  function handlePointerMove(e) {
    // Use the cached position of the canvas on the page if possible
    if (!canvasClientRect) {
      canvasClientRect = canvas.getBoundingClientRect();
    }
    if (sawPen && e.pointerType === "touch") {
      // Palm rejection for devices that support pens
      return;
    }

    /* Store these globally for the event handlers to refer to (we'd write to the event itself but some browsers
     * don't enjoy that)
     */
    mouseX = e.clientX - canvasClientRect.left;
    mouseY = e.clientY - canvasClientRect.top;
    var
      // Flags used by e.buttons:
      FLAG_PRIMARY = 1,
      FLAG_SECONDARY = 2,
      FLAG_WHEEL = 4,
      isDragging = e.buttons !== 0,
      pressure = isDragging ? getPointerPressure(e) : 0;

    // Did any of our buttons change state?
    if ((e.buttons & FLAG_PRIMARY) !== 0 != mouseDown[BUTTON_PRIMARY]) {
      if (e.mozPressure === 0.5) {
        /* We received a Mozilla "click" level of pressure (0.5) as a pointer-move
         * before we received the actual mouseDown event (which carries the correct pressure).
         *
         * Observed on Firefox 56 on macOS High Sierra
         */
        return; // Ignore!
      }

      mouseDown[BUTTON_PRIMARY] = !mouseDown[BUTTON_PRIMARY];
      if (mouseDown[BUTTON_PRIMARY]) {
        modeStack.mouseDown(e, BUTTON_PRIMARY, pressure);
      } else {
        modeStack.mouseUp(e, BUTTON_PRIMARY, pressure);
      }
    }
    if ((e.buttons & FLAG_SECONDARY) !== 0 != mouseDown[BUTTON_SECONDARY]) {
      mouseDown[BUTTON_SECONDARY] = !mouseDown[BUTTON_SECONDARY];
      if (mouseDown[BUTTON_SECONDARY]) {
        modeStack.mouseDown(e, BUTTON_SECONDARY, pressure);
      } else {
        modeStack.mouseUp(e, BUTTON_SECONDARY, pressure);
      }
    }
    if ((e.buttons & FLAG_WHEEL) !== 0 != mouseDown[BUTTON_WHEEL]) {
      mouseDown[BUTTON_WHEEL] = !mouseDown[BUTTON_WHEEL];
      if (mouseDown[BUTTON_WHEEL]) {
        modeStack.mouseDown(e, BUTTON_WHEEL, pressure);
      } else {
        modeStack.mouseUp(e, BUTTON_WHEEL, pressure);
      }
    }
    if (isDragging) {
      modeStack.mouseDrag(e, pressure);
    } else {
      modeStack.mouseMove(e, pressure);
    }
    if (!sawPen && e.pointerType === "pen") {
      sawPen = true;
    }
  }

  // Called when all mouse/pointer buttons are released
  function handlePointerUp(e) {
    mouseDown[BUTTON_PRIMARY] = false;
    mouseDown[BUTTON_SECONDARY] = false;
    mouseDown[BUTTON_WHEEL] = false;
    wacomPenDown = false;
    modeStack.mouseUp(e, e.button, 0.0);
    canvas.releasePointerCapture(e.pointerId);
  }

  // Called when the first button on the pointer is depressed / pen touches the surface
  function handlePointerDown(e) {
    if (sawPen && e.pointerType === "touch") {
      // Palm rejection for devices that support pens
      return;
    }
    canvas.setPointerCapture(e.pointerId);
    canvasClientRect = canvas.getBoundingClientRect();

    // Store these globally for the event handlers to refer to
    mouseX = e.clientX - canvasClientRect.left;
    mouseY = e.clientY - canvasClientRect.top;
    wacomPenDown = tablet.isPen();
    mouseDown[BUTTON_PRIMARY] = false;
    mouseDown[BUTTON_SECONDARY] = false;
    mouseDown[BUTTON_WHEEL] = false;
    mouseDown[e.button] = true;
    modeStack.mouseDown(e, e.button, getPointerPressure(e));
  }
  function handleKeyDown(e) {
    modeStack.keyDown(e);
  }
  function handleKeyUp(e) {
    //altキーを押下した直後にショートカットキーが動作しなくなる問題を修正
    if (e.key.toLowerCase() === "alt") {
      //altキーが離された時のDefaultの動作をキャンセル
      e.preventDefault();
    }
    modeStack.keyUp(e);
  }

  // Get the DOM element for the canvas area
  this.getElement = function () {
    return canvasContainer;
  };

  /**
   * Schedule a repaint for the current repaint region.
   */
  function repaint() {
    if (!scheduledRepaint) {
      scheduledRepaint = true;
      window.requestAnimationFrame(function () {
        that.paint();
      });
    }
  }

  /**
   * Schedule a repaint for the entire screen.
   */
  this.repaintAll = function () {
    repaintRegion.left = 0;
    repaintRegion.top = 0;
    repaintRegion.right = canvas.width;
    repaintRegion.bottom = canvas.height;
    repaint();
  };

  /**
   * Schedule a repaint for an area of the screen for later.
   * 
   * @param rect CPRect Region that should be repainted using display coordinates
   */
  function repaintRect(rect) {
    repaintRegion.union(rect);
    repaint();
  }
  this.paint = function () {
    var drawingWasClipped = false;
    scheduledRepaint = false;

    /* Clip drawing to the area of the screen we want to repaint */
    if (!repaintRegion.isEmpty()) {
      canvasContext.save();
      if (canvasContext.clipTo) {
        canvasContext.beginPath();
        repaintRegion.left = repaintRegion.left | 0;
        repaintRegion.top = repaintRegion.top | 0;
        canvasContext.rect(repaintRegion.left, repaintRegion.top, Math.ceil(repaintRegion.getWidth()), Math.ceil(repaintRegion.getHeight()));
        canvasContext.clip();
      }
      drawingWasClipped = true;
    }

    /* Copy pixels that changed in the document into our local fused image cache */
    if (!artworkUpdateRegion.isEmpty()) {
      var imageData;
      if (maskView && maskView.isOpen()) {
        imageData = maskView.getImageData();
      } else {
        imageData = artwork.fusionLayers().getImageData();
      }
      artworkCanvasContext.putImageData(imageData, 0, 0, artworkUpdateRegion.left, artworkUpdateRegion.top, artworkUpdateRegion.getWidth(), artworkUpdateRegion.getHeight());
      artworkUpdateRegion.makeEmpty();
    }
    canvasContext.fillStyle = '#606060';
    canvasContext.fillRect(0, 0, canvas.width, canvas.height);

    // Transform the coordinate system to bring the document into the right position on the screen (translate/zoom/etc)
    canvasContext.save();
    {
      canvasContext.setTransform(transform.m[0], transform.m[1], transform.m[2], transform.m[3], transform.m[4], transform.m[5]);
      canvasContext.fillStyle = checkerboardPattern;
      canvasContext.fillRect(0, 0, artwork.width, artwork.height);
      canvasContext.drawImage(artworkCanvas, 0, 0, artworkCanvas.width, artworkCanvas.height);
    }
    canvasContext.restore();

    // The rest of the drawing happens using the original screen coordinate system
    (0, _CPGUIUtils.setContrastingDrawStyle)(canvasContext, "stroke");
    canvasContext.lineWidth = 1.0;

    // Draw the artwork selection so long as we're not in the middle of selecting a new rectangle
    if (!artwork.getSelection().isEmpty() && !(modeStack.peek() instanceof CPRectSelectionMode && modeStack.peek().capture)) {
      canvasContext.setLineDash([3, 2]);
      plotSelectionRect(canvasContext, artwork.getSelection());
      canvasContext.setLineDash([]);
    }

    // Draw grid
    if (showGrid) {
      var bounds = artwork.getBounds(),
        gridVisualPitch = zoom * gridSize;

      /* If the grid is going to be miniscule on the screen (basically just covering/inverting the entire artwork,
       * do not paint it.
       */
      if (gridVisualPitch > 2) {
        canvasContext.beginPath();

        // Vertical lines
        for (var i = gridSize - 1; i < bounds.right; i += gridSize) {
          var p1 = coordToDisplay({
              x: i,
              y: bounds.top
            }),
            p2 = coordToDisplay({
              x: i,
              y: bounds.bottom
            });
          canvasContext.moveTo(p1.x + 0.5, p1.y + 0.5);
          canvasContext.lineTo(p2.x + 0.5, p2.y + 0.5);
        }

        // Horizontal lines
        for (var _i7 = gridSize - 1; _i7 < bounds.bottom; _i7 += gridSize) {
          var _p = coordToDisplay({
              x: 0,
              y: _i7
            }),
            _p2 = coordToDisplay({
              x: bounds.right,
              y: _i7
            });
          canvasContext.moveTo(_p.x + 0.5, _p.y + 0.5);
          canvasContext.lineTo(_p2.x + 0.5, _p2.y + 0.5);
        }
        canvasContext.stroke();
      }
    }

    // Additional drawing by the current mode
    modeStack.paint(canvasContext);
    canvasContext.globalCompositeOperation = 'source-over';
    if (drawingWasClipped) {
      repaintRegion.makeEmpty();
      canvasContext.restore();
    }
  };
  this.showGrid = function (show) {
    showGrid = show;
    this.repaintAll();
  };

  /**
   * Resize the canvas area to the given height (in pixels)
   *
   * @param {int} height New canvas area height in CSS pixels
   * @param {boolean} skipCenter True if the canvas should not be re-centered
   */
  this.resize = function (height, skipCenter) {
    // Leave room for the bottom scrollbar
    height -= (0, _jquery.default)(canvasContainerBottom).outerHeight();
    (0, _jquery.default)(canvas).css('height', height + "px");
    canvas.width = (0, _jquery.default)(canvas).width();
    canvas.height = height;
    canvasClientRect = null;
    if (!skipCenter) {
      centerCanvas();
    }

    // Interpolation property gets reset when canvas resizes
    this.setInterpolation(interpolation);
    this.repaintAll();
  };
  controller.on("toolChange", function (tool, toolInfo) {
    var newMode = drawingModes[toolInfo.strokeMode];

    // If we currently have any drawing modes active, switch them to the drawing mode of the new tool
    for (var i = 0; i < modeStack.modes.length; i++) {
      if (modeStack.modes[i] instanceof CPDrawingMode) {
        modeStack.modes[i].leave();
        modeStack.modes[i] = newMode;
        modeStack.modes[i].enter();
        break;
      }
    }
    curDrawMode = newMode;
  });
  controller.on("modeChange", function (mode) {
    var newMode;
    switch (mode) {
      case _ChickenPaint.default.M_DRAW:
        newMode = curDrawMode;
        break;
      case _ChickenPaint.default.M_FLOODFILL:
        newMode = floodFillMode;
        break;
      case _ChickenPaint.default.M_GRADIENTFILL:
        newMode = gradientFillMode;
        break;
      case _ChickenPaint.default.M_RECT_SELECTION:
        newMode = rectSelectionMode;
        break;
      case _ChickenPaint.default.M_MOVE_TOOL:
        newMode = moveToolMode;
        break;
      case _ChickenPaint.default.M_ROTATE_CANVAS:
        newMode = rotateCanvasMode;
        break;
      case _ChickenPaint.default.M_PAN_CANVAS:
        newMode = panMode;
        break;
      case _ChickenPaint.default.M_COLOR_PICKER:
        newMode = colorPickerMode;
        break;
      case _ChickenPaint.default.M_TRANSFORM:
        newMode = transformMode;
        break;
    }
    modeStack.setUserMode(newMode);
  });
  function onMaskViewChangeLayer() {
    artworkUpdateRegion = artwork.getBounds();
    that.repaintAll();
  }
  controller.on("maskViewOpened", function (newMaskView) {
    if (maskView) {
      maskView.off("changeLayer", onMaskViewChangeLayer);
    }
    maskView = newMaskView;
    maskView.on("changeLayer", onMaskViewChangeLayer);
    onMaskViewChangeLayer();
  });

  //
  // Modes system: modes control the way the GUI is reacting to the user input
  // All the tools are implemented through modes
  //

  defaultMode = new CPDefaultMode();
  colorPickerMode = new CPColorPickerMode();
  panMode = new CPPanCanvasMode();
  rotateCanvasMode = new CPRotateCanvasMode();
  floodFillMode = new CPFloodFillMode();
  gradientFillMode = new CPGradientFillMode();
  rectSelectionMode = new CPRectSelectionMode();
  moveToolMode = new CPMoveToolMode();
  transformMode = new CPTransformMode();

  // this must correspond to the stroke modes defined in CPToolInfo
  drawingModes = [new CPFreehandMode(), new CPLineMode(), new CPBezierMode()];
  curDrawMode = drawingModes[_CPBrushInfo.default.STROKE_MODE_FREEHAND];

  // The default mode will handle the events that no other modes are interested in
  modeStack.setDefaultMode(defaultMode);
  modeStack.setUserMode(curDrawMode);
  artworkCanvas.width = artwork.width;
  artworkCanvas.height = artwork.height;
  canvas.width = 800;
  canvas.height = 900;
  canvas.className = "chickenpaint-canvas";
  canvas.setAttribute("touch-action", "none");
  if (!canvasContext.setLineDash) {
    canvasContext.setLineDash = function () {}; // For IE 10 and older
  }

  canvas.addEventListener("contextmenu", function (e) {
    e.preventDefault();
  });
  canvas.addEventListener("mouseenter", function () {
    mouseIn = true;
  });
  canvas.addEventListener("mouseleave", function () {
    mouseIn = false;
    if (!mouseDown[BUTTON_PRIMARY] && !mouseDown[BUTTON_SECONDARY] && !mouseDown[BUTTON_WHEEL]) {
      that.repaintAll();
    }
  });
  canvas.addEventListener("pointerdown", handlePointerDown);
  canvas.addEventListener("pointermove", handlePointerMove);
  canvas.addEventListener("pointerup", handlePointerUp);
  canvas.addEventListener("wheel", handleMouseWheel, {
    passive: false
  });
  document.addEventListener("keydown", handleKeyDown);
  document.addEventListener("keyup", handleKeyUp);

  /* Workaround for Chrome Mac bug that causes canvas to be disposed and never recreated when tab is switched into the 
   * background https://bugs.chromium.org/p/chromium/issues/detail?id=588434
   */
  document.addEventListener("visibilitychange", function () {
    var oldHeight = canvas.height + (0, _jquery.default)(canvasContainerBottom).outerHeight();
    canvas.width = 1;
    canvas.height = 1;
    that.resize(oldHeight, true);
  }, false);
  window.addEventListener("scroll", function () {
    canvasClientRect = null;
  });
  canvas.addEventListener("mousedown", function (e) {
    if (e.button == BUTTON_WHEEL) {
      // Prevent middle-mouse scrolling in Firefox
      e.preventDefault();
    }
  });
  artwork.on("changeSelection", function () {
    // We could keep track of our last-painted selection rect and only invalidate that here
    that.repaintAll();
  });
  artwork.on("updateRegion", function (region) {
    artworkUpdateRegion.union(region);
    repaintRect(getRefreshArea(artworkUpdateRegion));
  });
  horzScroll.on("valueChanged", function (value) {
    var p = that.getOffset();
    that.setOffset(-value, p.y);
  });
  vertScroll.on("valueChanged", function (value) {
    var p = that.getOffset();
    that.setOffset(p.x, -value);
  });

  //初期状態で、ズームのアンチエイリアスをOnに
  this.setInterpolation(true);
  var canvasSpacingWrapper = document.createElement("div");
  canvasSpacingWrapper.className = 'chickenpaint-canvas-container-wrapper';
  canvasSpacingWrapper.appendChild(canvas);
  canvasContainerTop.className = 'chickenpaint-canvas-container-top';
  canvasContainerTop.appendChild(canvasSpacingWrapper);
  canvasContainerTop.appendChild(vertScroll.getElement());
  canvasContainerBottom.className = 'chickenpaint-canvas-container-bottom';
  canvasContainerBottom.appendChild(horzScroll.getElement());
  canvasContainer.appendChild(canvasContainerTop);
  canvasContainer.appendChild(canvasContainerBottom);
  controller.setCanvas(this);
}
CPCanvas.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPCanvas.prototype.constructor = CPCanvas;
module.exports = exports.default;

},{"../../lib/keymaster.js":68,"../ChickenPaint.js":1,"../engine/CPBrushInfo.js":8,"../engine/CPLayerGroup.js":17,"../engine/CPMaskView.js":19,"../languages/lang.js":54,"../util/CPBezier.js":57,"../util/CPColor.js":58,"../util/CPPolyfill.js":60,"../util/CPPolygon.js":61,"../util/CPRect.js":63,"../util/CPTransform.js":64,"../util/CPVector.js":65,"../util/CPWacomTablet.js":66,"../util/throttle-debounce.js":67,"./CPGUIUtils.js":33,"./CPScrollbar.js":41,"jquery":296,"wolfy87-eventemitter":314}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPCheckbox;
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPCheckbox(state, title) {
  var canvas = document.createElement('canvas'),
    canvasContext = canvas.getContext('2d'),
    that = this;
  this.state = state || false;
  function paint() {
    var width = canvas.width,
      height = canvas.height;
    canvasContext.clearRect(0, 0, width, height);
    canvasContext.beginPath();
    canvasContext.arc(width / 2 + 1, width / 2 + 1, Math.max(width / 2, 1) - 2, 0, Math.PI * 2);
    if (that.state) {
      canvasContext.fill();
    } else {
      canvasContext.stroke();
    }
  }
  this.setValue = function (b) {
    if (this.state != b) {
      this.state = b;
      this.emitEvent('valueChange', [b]);
      paint();
    }
  };
  this.getElement = function () {
    return canvas;
  };
  canvas.addEventListener("mousedown", function (e) {
    that.setValue(!that.state);
  });
  canvas.title = title || "";
  canvas.className = 'chickenpaint-checkbox';
  canvas.width = 20;
  canvas.height = 20;
  canvas.fillStyle = 'black';
  canvas.strokeStyle = 'black';
  paint();
}
;
CPCheckbox.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPCheckbox.prototype.constructor = CPCheckbox;
module.exports = exports.default;

},{"wolfy87-eventemitter":314}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPColorPalette;
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPColorSelect = _interopRequireDefault(require("./CPColorSelect.js"));
var _CPColorSlider = _interopRequireDefault(require("./CPColorSlider.js"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPColorPalette(cpController) {
  _CPPalette.default.call(this, cpController, "color", "Color (picker)");
  var colorSelect = new _CPColorSelect.default(cpController),
    colorSlider = new _CPColorSlider.default(cpController, colorSelect),
    colorShow = new CPColorShow(cpController),
    body = this.getBodyElement(),
    topSection = document.createElement("div");
  topSection.className = 'chickenpaint-colorpicker-top';
  topSection.appendChild(colorSelect.getElement());
  topSection.appendChild(colorSlider.getElement());
  body.appendChild(topSection);
  body.appendChild(colorShow.getElement());
}
function CPColorShow(controller) {
  var color = 0,
    element = document.createElement("div");
  function padLeft(string, padding, len) {
    while (string.length < len) {
      string = padding + string;
    }
    return string;
  }
  function paint() {
    element.style.backgroundColor = '#' + padLeft(Number(color).toString(16), "0", 6);
  }
  function mouseClick(e) {
    e.preventDefault();
    var colHex = "#" + padLeft(Number(color).toString(16), "0", 6);
    colHex = window.prompt((0, _lang._)("Please enter a color in hex format"), colHex);
    if (colHex != null) {
      try {
        if (colHex.match(/^#/) || colHex.match(/^$/)) {
          colHex = colHex.substring(1);
        }
        var newColor = parseInt(colHex, 16);
        controller.setCurColor(new _CPColor.default(newColor));
      } catch (e) {}
    }
  }
  this.getElement = function () {
    return element;
  };
  controller.on("colorChange", function (_color) {
    color = _color.getRgb();
    paint();
  });
  element.className = 'chickenpaint-colorpicker-show';
  element.addEventListener("click", mouseClick);
  paint();
}
CPColorPalette.prototype = Object.create(_CPPalette.default.prototype);
CPColorPalette.prototype.constructor = CPColorPalette;
module.exports = exports.default;

},{"../languages/lang.js":54,"../util/CPColor.js":58,"./CPColorSelect.js":29,"./CPColorSlider.js":30,"./CPPalette.js":39}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _CPColorBmp = _interopRequireDefault(require("../engine/CPColorBmp.js"));
var _CPGUIUtils = require("./CPGUIUtils.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                                                                                                                                                                                                  by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                  it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                  the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                  (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                  GNU General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                  along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                              */
var CONTROL_WIDTH = 128,
  CONTROL_HEIGHT = 128,
  PIXEL_SCALE = window.devicePixelRatio || 1,
  CANVAS_WIDTH = Math.round(CONTROL_WIDTH * PIXEL_SCALE),
  CANVAS_HEIGHT = Math.round(CONTROL_HEIGHT * PIXEL_SCALE);

/**
 *
 * @param controller
 * @param {CPColor} initialColor
 * @constructor
 */
var CPColorSelect = exports.default = /*#__PURE__*/function () {
  function CPColorSelect(controller, initialColor) {
    var _this = this;
    _classCallCheck(this, CPColorSelect);
    _defineProperty(this, "_controller", void 0);
    _defineProperty(this, "_canvas", void 0);
    _defineProperty(this, "_canvasContext", void 0);
    _defineProperty(this, "_imageData", void 0);
    _defineProperty(this, "_bitmapInvalid", true);
    _defineProperty(this, "_capturedMouse", false);
    _defineProperty(this, "_greyscale", false);
    _defineProperty(this, "color", new _CPColor.default(0));
    this._controller = controller;
    var canvas = document.createElement("canvas");
    this._canvas = canvas;
    canvas.className = 'chickenpaint-colorpicker-select';
    canvas.setAttribute("touch-action", "none");
    canvas.width = CANVAS_WIDTH;
    canvas.height = CANVAS_HEIGHT;
    canvas.style.width = CONTROL_WIDTH + "px";
    canvas.style.height = CONTROL_HEIGHT + "px";
    this._canvasContext = canvas.getContext("2d");
    this._imageData = this._canvasContext.createImageData(CANVAS_WIDTH, CANVAS_HEIGHT);

    // Workaround for Chrome bug https://bugs.chromium.org/p/chromium/issues/detail?id=1350157:
    this._canvasContext.getImageData(0, 0, 1, 1);
    this._handleEndDrag = this._endDrag.bind(this);
    this._handleMousePickColor = this._mousePickColor.bind(this);
    canvas.addEventListener("pointerdown", function (e) {
      return _this._startDrag(e);
    });
    if (initialColor) {
      this.color.copyFrom(initialColor);
    }
    controller.on("colorChange", function (c) {
      _this.color.copyFrom(c);
      _this._bitmapInvalid = true;
      _this.paint();
    });
    controller.on("colorModeChange", function (newMode) {
      _this._greyscale = newMode == "greyscale";
      _this._bitmapInvalid = true;
      _this.paint();
    });
    this.paint();
  }
  _createClass(CPColorSelect, [{
    key: "_makeBitmap",
    value: function _makeBitmap() {
      if (!this._bitmapInvalid) {
        return;
      }
      var pixIndex = 0,
        data = this._imageData.data;
      if (this._greyscale) {
        for (var y = 0; y < CANVAS_HEIGHT; y++) {
          var col = 255 - Math.round(y / (CANVAS_HEIGHT - 1) * 255);
          for (var x = 0; x < CANVAS_WIDTH; x++) {
            data[pixIndex + _CPColorBmp.default.RED_BYTE_OFFSET] = col;
            data[pixIndex + _CPColorBmp.default.GREEN_BYTE_OFFSET] = col;
            data[pixIndex + _CPColorBmp.default.BLUE_BYTE_OFFSET] = col;
            data[pixIndex + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = 0xFF;
            pixIndex += _CPColorBmp.default.BYTES_PER_PIXEL;
          }
        }
      } else {
        var _col = this.color.clone();
        for (var _y = 0; _y < CANVAS_HEIGHT; _y++) {
          _col.setValue(255 - ~~(_y / (CANVAS_HEIGHT - 1) * 255));
          for (var _x = 0; _x < CANVAS_WIDTH; _x++) {
            _col.setSaturation(Math.round(_x / (CANVAS_WIDTH - 1) * 255));
            data[pixIndex + _CPColorBmp.default.RED_BYTE_OFFSET] = _col.rgb >> 16 & 0xFF;
            data[pixIndex + _CPColorBmp.default.GREEN_BYTE_OFFSET] = _col.rgb >> 8 & 0xFF;
            data[pixIndex + _CPColorBmp.default.BLUE_BYTE_OFFSET] = _col.rgb & 0xFF;
            data[pixIndex + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = 0xFF;
            pixIndex += _CPColorBmp.default.BYTES_PER_PIXEL;
          }
        }
      }
      this._bitmapInvalid = false;
    }
  }, {
    key: "paint",
    value: function paint() {
      this._makeBitmap();
      this._canvasContext.putImageData(this._imageData, 0, 0);
      var cursorX = this.color.getSaturation() / 255 * (CANVAS_WIDTH - 1),
        cursorY = (255 - this.color.getValue()) / 255 * (CANVAS_HEIGHT - 1);
      (0, _CPGUIUtils.setContrastingDrawStyle)(this._canvasContext, "stroke");
      this._canvasContext.lineWidth = 1.5 * PIXEL_SCALE;
      this._canvasContext.beginPath();
      if (this._greyscale) {
        this._canvasContext.moveTo(0, cursorY);
        this._canvasContext.lineTo(CANVAS_WIDTH, cursorY);
      } else {
        this._canvasContext.arc(cursorX, cursorY, 5 * PIXEL_SCALE, 0, Math.PI * 2);
      }
      this._canvasContext.stroke();
      this._canvasContext.globalCompositeOperation = 'source-over';
    }
  }, {
    key: "_mousePickColor",
    value: function _mousePickColor(e) {
      var x = e.pageX - (0, _jquery.default)(this._canvas).offset().left,
        y = e.pageY - (0, _jquery.default)(this._canvas).offset().top,
        value = Math.max(Math.min(255 - ~~(y * 255 / (CONTROL_HEIGHT - 1)), 255), 0);
      if (this._greyscale) {
        this.color.setGreyscale(value);
      } else {
        var sat = Math.max(Math.min(~~(x * 255 / (CONTROL_WIDTH - 1)), 255), 0);
        this.color.setHsv(this.color.getHue(), sat, value);
      }
      this.paint();
      this._controller.setCurColor(this.color);
    }
  }, {
    key: "_endDrag",
    value: function _endDrag(e) {
      this._canvas.releasePointerCapture(e.pointerId);
      this._capturedMouse = false;
      this._canvas.removeEventListener("pointerup", this._handleEndDrag);
      this._canvas.removeEventListener("pointermove", this._handleMousePickColor);
    }
  }, {
    key: "_startDrag",
    value: function _startDrag(e) {
      if (!this._capturedMouse) {
        this._capturedMouse = true;
        this._canvas.setPointerCapture(e.pointerId);
        this._canvas.addEventListener("pointerup", this._handleEndDrag);
        this._canvas.addEventListener("pointermove", this._handleMousePickColor);
      }
      this._handleMousePickColor(e);
    }
  }, {
    key: "setHue",
    value: function setHue(hue) {
      if (this.color.getHue() != hue) {
        this.color.setHue(hue);
        this._controller.setCurColor(this.color);
      }
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this._canvas;
    }
  }]);
  return CPColorSelect;
}();
module.exports = exports.default;

},{"../engine/CPColorBmp.js":13,"../util/CPColor.js":58,"./CPGUIUtils.js":33,"jquery":296}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _CPColorBmp = _interopRequireDefault(require("../engine/CPColorBmp.js"));
var _CPGUIUtils = require("./CPGUIUtils.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                                                                                                                                                                                                                                  by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                  it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                  the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                  (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                                                                                                                                                  GNU General Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                  You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                  along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                              */
var WIDTH = 24,
  HEIGHT = 128;

/**
 * @param {ImageData} imageData
 */
function makeSliderBitmap(imageData) {
  var color = new _CPColor.default(0x00FFFF),
    pixIndex = 0,
    data = imageData.data;
  for (var y = 0; y < imageData.height; y++) {
    color.setHue(y * 359 / imageData.height);
    for (var x = 0; x < imageData.width; x++) {
      data[pixIndex + _CPColorBmp.default.RED_BYTE_OFFSET] = color.rgb >> 16 & 0xFF;
      data[pixIndex + _CPColorBmp.default.GREEN_BYTE_OFFSET] = color.rgb >> 8 & 0xFF;
      data[pixIndex + _CPColorBmp.default.BLUE_BYTE_OFFSET] = color.rgb & 0xFF;
      data[pixIndex + _CPColorBmp.default.ALPHA_BYTE_OFFSET] = 0xFF;
      pixIndex += _CPColorBmp.default.BYTES_PER_PIXEL;
    }
  }
}
var CPColorSlider = exports.default = /*#__PURE__*/function () {
  function CPColorSlider(controller, selecter, initialHue) {
    var _this = this;
    _classCallCheck(this, CPColorSlider);
    _defineProperty(this, "hue", void 0);
    _defineProperty(this, "selecter", void 0);
    _defineProperty(this, "_canvas", void 0);
    _defineProperty(this, "_canvasContext", void 0);
    _defineProperty(this, "_imageData", void 0);
    _defineProperty(this, "_capturedMouse", false);
    this.selecter = selecter;
    this.hue = initialHue || 0;
    var canvas = document.createElement("canvas");
    this._canvas = canvas;
    controller.on("colorChange", function (color) {
      _this.setHue(color.getHue());
    });
    controller.on("colorModeChange", function (mode) {
      canvas.style.display = mode == "greyscale" ? "none" : "block";
    });
    canvas.setAttribute("touch-action", "none");
    canvas.addEventListener("pointerdown", function (e) {
      return _this._startDrag(e);
    });
    canvas.width = WIDTH;
    canvas.height = HEIGHT;
    canvas.className = 'chickenpaint-colorpicker-slider';
    this._canvasContext = canvas.getContext("2d");
    this._imageData = this._canvasContext.createImageData(WIDTH, HEIGHT);

    // Workaround for Chrome bug https://bugs.chromium.org/p/chromium/issues/detail?id=1350157:
    this._canvasContext.getImageData(0, 0, 1, 1);
    this._handleEndDrag = this._endDrag.bind(this);
    this._handleMousePickColor = this._mousePickColor.bind(this);
    makeSliderBitmap(this._imageData);
    this.paint();
  }
  _createClass(CPColorSlider, [{
    key: "paint",
    value: function paint() {
      this._canvasContext.putImageData(this._imageData, 0, 0);
      var y = this.hue * HEIGHT / 360;
      (0, _CPGUIUtils.setContrastingDrawStyle)(this._canvasContext, "stroke");
      this._canvasContext.lineWidth = 1.5;
      this._canvasContext.beginPath();
      this._canvasContext.moveTo(0, y);
      this._canvasContext.lineTo(WIDTH, y);
      this._canvasContext.stroke();
      this._canvasContext.globalCompositeOperation = 'source-over';
    }
  }, {
    key: "_mousePickColor",
    value: function _mousePickColor(e) {
      var y = e.pageY - (0, _jquery.default)(this._canvas).offset().top,
        _hue = ~~(y * 360 / HEIGHT);
      this.hue = Math.max(0, Math.min(359, _hue));
      this.paint();
      if (this.selecter) {
        this.selecter.setHue(this.hue);
      }
    }
  }, {
    key: "_endDrag",
    value: function _endDrag(e) {
      this._canvas.releasePointerCapture(e.pointerId);
      this._capturedMouse = false;
      this._canvas.removeEventListener("pointerup", this._handleEndDrag);
      this._canvas.removeEventListener("pointermove", this._handleMousePickColor);
    }
  }, {
    key: "_startDrag",
    value: function _startDrag(e) {
      if (!this._capturedMouse) {
        this._capturedMouse = true;
        this._canvas.setPointerCapture(e.pointerId);
        this._canvas.addEventListener("pointerup", this._handleEndDrag);
        this._canvas.addEventListener("pointermove", this._handleMousePickColor);
      }
      this._handleMousePickColor(e);
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this._canvas;
    }
  }, {
    key: "setHue",
    value: function setHue(h) {
      this.hue = h;
      this.paint();
    }
  }]);
  return CPColorSlider;
}();
module.exports = exports.default;

},{"../engine/CPColorBmp.js":13,"../util/CPColor.js":58,"./CPGUIUtils.js":33,"jquery":296}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPColorSwatch;
var _jquery = _interopRequireDefault(require("jquery"));
var _lang = require("../languages/lang.js");
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _CPSlider = _interopRequireDefault(require("./CPSlider.js"));
var _CPColorSelect = _interopRequireDefault(require("./CPColorSelect.js"));
var _CPColorSlider = _interopRequireDefault(require("./CPColorSlider.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint

    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.

    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPColorSwatch(initialColor, initialAlpha, containerElement) {
  var that = this,
    color = new _CPColor.default(0),
    alpha = 255,
    element = document.createElement("div");
  function padLeft(string, padding, len) {
    while (string.length < len) {
      string = padding + string;
    }
    return string;
  }
  function paint() {
    element.style.backgroundColor = '#' + padLeft(Number(color.getRgb()).toString(16), "0", 6);
  }
  this.getElement = function () {
    return element;
  };
  this.setColor = function (_color) {
    if (!color.isEqual(_color)) {
      color.copyFrom(_color);
      paint();
      this.emitEvent("colorChange", [color]);
    }
  };
  this.setAlpha = function (_alpha) {
    if (_alpha != alpha) {
      alpha = _alpha;
      paint();
      this.emitEvent("alphaChange", [alpha]);
    }
  };
  this.getColorRgb = function () {
    return color.getRgb();
  };
  this.getAlpha = function () {
    return alpha;
  };
  this.setCurColor = this.setColor;
  function buildColorEditPanel() {
    var panel = document.createElement("div"),
      group = document.createElement("div"),
      select = new _CPColorSelect.default(that, color),
      slider = new _CPColorSlider.default(that, select, color.getHue()),
      alphaSlider = new _CPSlider.default(0, 255);
    panel.className = "chickenpaint-color-pick-panel";
    group.className = "chickenpaint-colorpicker-top";
    group.appendChild(select.getElement());
    group.appendChild(slider.getElement());
    panel.appendChild(group);
    alphaSlider.value = alpha;
    alphaSlider.title = function (alpha) {
      return (0, _lang._)("Opacity: ") + alpha;
    };
    alphaSlider.on("valueChange", function (alpha) {
      that.setAlpha(alpha);
    });
    panel.appendChild(alphaSlider.getElement());
    setTimeout(function () {
      alphaSlider.resize();
    }, 0);
    return panel;
  }
  element.className = 'chickenpaint-color-pick-swatch';
  if (initialColor) {
    color.copyFrom(initialColor);
  }
  if (initialAlpha) {
    alpha = initialAlpha;
  }
  var bootstrapPopover = new bootstrap.Popover(element, {
    html: true,
    content: function content() {
      window.addEventListener("mousedown", closeClickHandler);
      return buildColorEditPanel();
    },
    trigger: "manual",
    placement: "bottom",
    container: containerElement || false
  });

  // Clicking outside the popover will dismiss it
  var closeClickHandler = function closeClickHandler(e) {
    var colorpicker = e.target;
    var isColorPicker = colorpicker.closest('.popover-body') || colorpicker.classList.contains('chickenpaint-color-pick-panel') || colorpicker.classList.contains('chickenpaint-colorpicker-select') || colorpicker.classList.contains('chickenpaint-colorpicker-slider');
    e.preventDefault();
    // console.log("closeClickHandler",e);
    if (isColorPicker) {
      //カラーピッカーをクリックした時は表示したままにする
      return;
    }
    bootstrapPopover.hide();
  };
  element.addEventListener("click", function (e) {
    e.preventDefault();
    bootstrapPopover.toggle();
  });
  element.addEventListener("hidden.bs.popover", function () {
    window.removeEventListener("mousedown", closeClickHandler);
  });
  paint();
}
CPColorSwatch.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPColorSwatch.prototype.constructor = CPColorSwatch;
module.exports = exports.default;

},{"../languages/lang.js":54,"../util/CPColor.js":58,"./CPColorSelect.js":29,"./CPColorSlider.js":30,"./CPSlider.js":44,"jquery":296,"wolfy87-eventemitter":314}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPConfirmTransformDialog;
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _jquery = _interopRequireDefault(require("jquery"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
	ChickenPaint

	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.

	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPConfirmTransformDialog(parent, controller) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n\t            <div class=\"modal-dialog\">\n\t                <div class=\"modal-content\">\n\t                    <div class=\"modal-header\">\n\t                        <h5 class=\"modal-title\">".concat((0, _lang._)("Complete transform"), "</h5>\n\t                        <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n\t                        </button>\n\t                    </div>\n\t                    <div class=\"modal-body\">\n\t                        <p>\n\t\t\t\t\t\t\t").concat((0, _lang._)("You need to finish transforming this layer before you can do that. What would you like to do with the transform?"), "\n\t\t\t\t\t\t\t</p>\n\t                    </div>\n\t                    <div class=\"modal-footer\">\n\t                        <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Cancel"), "</button>\n\t                        <button type=\"button\" class=\"btn btn-light chickenpaint-reject-transform\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Undo transform"), "</button>\n\t                        <button type=\"button\" class=\"btn btn-primary chickenpaint-accept-transform\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Apply transform"), "</button>\n\t                    </div>\n\t                </div>\n\t            </div>\n\t        </div>\n\t    ")),
    that = this,
    applyButton = (0, _jquery.default)(".chickenpaint-accept-transform", dialog),
    rejectButton = (0, _jquery.default)(".chickenpaint-reject-transform", dialog);
  applyButton.on('click', function (e) {
    controller.actionPerformed({
      action: "CPTransformAccept"
    });
    that.emitEvent("accept");
  });
  rejectButton.on('click', function (e) {
    controller.actionPerformed({
      action: "CPTransformReject"
    });
    that.emitEvent("reject");
  });

  // Bootstrap 5 modal initialization
  var modal = new bootstrap.Modal(dialog[0]);
  this.show = function () {
    modal.show();
  };
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog.remove();
  });
  // Enterキーが押されたときの処理
  parent.addEventListener("keydown", function keydown_EnterKey(e) {
    if (e.key === "Enter") {
      // Enterキーが押されたら非表示にする
      modal.hide();
      controller.actionPerformed({
        action: "CPTransformAccept"
      }); //変形確定
      that.emitEvent("accept");
      parent.removeEventListener("keydown", keydown_EnterKey);
    }
  });

  // Fix the backdrop location in the DOM by reparenting it to the chickenpaint container
  parent.appendChild(dialog[0]);
}
CPConfirmTransformDialog.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPConfirmTransformDialog.prototype.constructor = CPConfirmTransformDialog;
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296,"wolfy87-eventemitter":314}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCheckerboardPattern = createCheckerboardPattern;
exports.setContrastingDrawStyle = setContrastingDrawStyle;
/**
 * Create a checkerboard HTML5 CanvasPattern (which can be used for fillStyle) using the given canvas context.
 * 
 * @param canvasContext
 * @returns {CanvasPattern}
 */
function createCheckerboardPattern(canvasContext) {
  var checkerboardCanvas = document.createElement("canvas"),
    checkerboardContext = checkerboardCanvas.getContext("2d"),
    imageData = checkerboardContext.createImageData(64, 64),
    data = imageData.data,
    pixelOffset = 0;
  for (var j = 0; j < 64; j++) {
    for (var i = 0; i < 64; i++) {
      if ((i & 0x8) != 0 ^ (j & 0x8) != 0) {
        // White
        data[pixelOffset++] = 0xff;
        data[pixelOffset++] = 0xff;
        data[pixelOffset++] = 0xff;
        data[pixelOffset++] = 0xff;
      } else {
        // Grey
        data[pixelOffset++] = 0xcc;
        data[pixelOffset++] = 0xcc;
        data[pixelOffset++] = 0xcc;
        data[pixelOffset++] = 0xff;
      }
    }
  }
  checkerboardCanvas.width = 64;
  checkerboardCanvas.height = 64;
  checkerboardContext.putImageData(imageData, 0, 0);
  return canvasContext.createPattern(checkerboardCanvas, 'repeat');
}

/**
 * Set the globalCompositeOperation and fill/stroke color up to maximize contrast for the drawn items
 * against arbitrary backgrounds.
 *
 * @param {CanvasRenderingContext2D} canvasContext
 * @param {string} kind - "stroke" or "fill" depending on which colour you'd like to set
 */
function setContrastingDrawStyle(canvasContext, kind) {
  kind = kind + "Style";
  canvasContext.globalCompositeOperation = 'exclusion';
  if (canvasContext.globalCompositeOperation == "exclusion") {
    // White + exclusion inverts the colors underneath, giving us good contrast
    canvasContext[kind] = 'white';
  } else {
    // IE Edge doesn't support Exclusion, so how about Difference with mid-grey instead
    // This is visible on black and white, but disappears on a grey background
    canvasContext.globalCompositeOperation = 'difference';
    canvasContext[kind] = '#888';

    // For super dumb browsers (only support source-over), at least don't make the cursor invisible on a white BG!
    if (canvasContext.globalCompositeOperation != "difference") {
      canvasContext[kind] = 'black';
    }
  }
}

},{}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPGridDialog;
var _jquery = _interopRequireDefault(require("jquery"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPGridDialog(parent, canvas) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">".concat((0, _lang._)("Grid options"), "</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <form>\n                                <div class=\"form-group\">\n                                    <label>").concat((0, _lang._)("Grid size"), "</label>\n                                    <input type=\"number\" class=\"form-control chickenpaint-grid-size\" value=\"\" autofocus>\n                                </div>\n                            </form>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Cancel"), "</button>\n                            <button type=\"button\" class=\"btn btn-primary chickenpaint-apply-grid-settings\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Ok"), "</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ")),
    gridSizeElem = (0, _jquery.default)(".chickenpaint-grid-size", dialog),
    applyButton = (0, _jquery.default)(".chickenpaint-apply-grid-settings", dialog);

  // Bootstrap 5: Modal コンストラクタを使用して modal を初期化
  var modal = new bootstrap.Modal(dialog[0]);
  this.show = function () {
    // ハンバガーメニューとモーダルの二重表示防止
    // chickenpaint-main-menu-contentのIDを持つcollapse要素を閉じる
    var collapseElement = document.getElementById('chickenpaint-main-menu-content');
    if (collapseElement && collapseElement.classList.contains('show')) {
      var bsCollapse = new bootstrap.Collapse(collapseElement, {
        toggle: false // すでに閉じている場合のエラーを防ぐ
      });

      bsCollapse.hide();
    }
    //モーダルを表示
    modal.show();
  };
  gridSizeElem.val(canvas.getGridSize());

  // Destroy the modal upon close
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog[0].remove();
  });
  applyButton[0].addEventListener('click', function (e) {
    var gridSize = parseInt(gridSizeElem.val(), 10);
    canvas.setGridSize(gridSize);
    var modal = bootstrap.Modal.getInstance(dialog[0]); // インスタンスを取得
    modal.hide(); // モーダルを手動で閉じる
  });

  dialog[0].addEventListener('shown.bs.modal', function (e) {
    // gridSizeElem.trigger('focus');
    gridSizeElem[0].focus();
  });

  // Enter キーが押されたときの処理を追加
  dialog[0].addEventListener('keydown', function (e) {
    if (e.key === "Enter") {
      e.preventDefault(); // デフォルトのフォーム送信を阻止
      // applyButton.trigger('click');
      applyButton[0].click();
    }
  });
  parent.appendChild(dialog[0]);
}
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPLayersPalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPBlend = _interopRequireDefault(require("../engine/CPBlend.js"));
var _CPSlider = _interopRequireDefault(require("./CPSlider.js"));
var _CPLayerGroup = _interopRequireDefault(require("../engine/CPLayerGroup.js"));
var _CPLayer = _interopRequireDefault(require("../engine/CPLayer.js"));
var _CPImageLayer = _interopRequireDefault(require("../engine/CPImageLayer.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /*
                                                                                                                                                                                        ChickenPaint
                                                                                                                                                                                        
                                                                                                                                                                                        ChickenPaint is a translation of ChibiPaint from Java to JavaScript
                                                                                                                                                                                        by Nicholas Sherlock / Chicken Smoothie.
                                                                                                                                                                                        
                                                                                                                                                                                        ChibiPaint is Copyright (c) 2006-2008 Marc Schefer
                                                                                                                                                                                    
                                                                                                                                                                                        ChickenPaint is free software: you can redistribute it and/or modify
                                                                                                                                                                                        it under the terms of the GNU General Public License as published by
                                                                                                                                                                                        the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                        (at your option) any later version.
                                                                                                                                                                                    
                                                                                                                                                                                        ChickenPaint is distributed in the hope that it will be useful,
                                                                                                                                                                                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                        GNU General Public License for more details.
                                                                                                                                                                                    
                                                                                                                                                                                        You should have received a copy of the GNU General Public License
                                                                                                                                                                                        along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                    */
function absorbTouch(e) {
  e.preventDefault();
  e.stopPropagation();
}
function createFontAwesomeIcon(iconName) {
  var icon = document.createElement("span");
  icon.className = "fa " + iconName;
  return icon;
}
function createChickenPaintIcon(iconName) {
  var icon = document.createElement("span");
  icon.className = "chickenpaint-icon chickenpaint-icon-" + iconName;
  return icon;
}

/**
 *
 * @param {HTMLInputElement} checkbox - Must have a unique ID set
 * @param {string} title
 *
 * @returns {HTMLElement}
 */
function wrapBootstrapCheckbox(checkbox, title) {
  var div = document.createElement("div"),
    label = document.createElement("label");
  label.tabIndex = -1;
  checkbox.tabIndex = -1;
  div.className = "form-check";
  checkbox.className = "form-check-input";
  label.className = "form-check-label";
  label.setAttribute("for", checkbox.id);
  label.appendChild(checkbox);
  label.appendChild(document.createTextNode(title));
  div.appendChild(checkbox);
  div.appendChild(label);
  return div;
}
function computeLayerPredicates(layer) {
  return {
    "image-layer": layer instanceof _CPImageLayer.default,
    "layer-group": layer instanceof _CPLayerGroup.default,
    "clipping-mask": layer instanceof _CPImageLayer.default && layer.clip,
    "no-clipping-mask": layer instanceof _CPImageLayer.default && !layer.clip,
    "no-clipping-mask-or-is-group": !(layer instanceof _CPImageLayer.default) || !layer.clip,
    "mask": layer && layer.mask !== null,
    "no-mask": layer && layer.mask === null,
    "mask-enabled": layer && layer.mask !== null && layer.maskVisible,
    "mask-disabled": layer && layer.mask !== null && !layer.maskVisible
  };
}
function CPLayersPalette(controller) {
  var _this = this;
  _CPPalette.default.call(this, controller, "layers", "Layers", {
    resizeHorz: true,
    resizeVert: true
  });
  var NOTIFICATION_HIDE_DELAY_MS_PER_CHAR = 70,
    NOTIFICATION_HIDE_DELAY_MIN = 3000,
    BUTTON_PRIMARY = 0,
    BUTTON_WHEEL = 1,
    BUTTON_SECONDARY = 2;
  var palette = this,
    artwork = controller.getArtwork(),
    /**
     * An array of layers in display order, with the layers inside collapsed groups not present.
     *
     * @type {CPLayer[]}
     */
    linearizedLayers = null,
    body = this.getBodyElement(),
    positionRoot = this.getElement(),
    // This element will be responsible for positioning the BS dropdown
    dropdownParent = positionRoot,
    layerWidget = new CPLayerWidget(),
    alphaSlider = new _CPSlider.default(0, 100, false, false, 208),
    blendCombo = document.createElement("select"),
    renameField = new CPRenameField(),
    cbSampleAllLayers = document.createElement("input"),
    cbLockAlpha = document.createElement("input"),
    notificationDismissTimer = false,
    layerActionButtons;

  /**
   *
   * @param {number} displayIndex
   * @returns {CPLayer}
   */
  function getLayerFromDisplayIndex(displayIndex) {
    return linearizedLayers[displayIndex];
  }

  /**
      *
      * @param {CPLayer} layer
      * @returns {int}
      */
  function getDisplayIndexFromLayer(layer) {
    return linearizedLayers.indexOf(layer);
  }
  function CPLayerWidget() {
    var LAYER_DRAG_START_THRESHOLD = 5,
      // Pixels we have to move a layer before it shows as "dragging"
      LAYER_IN_GROUP_INDENT = 16,
      CLASSNAME_LAYER_ACTIVE = "active",
      CLASSNAME_LAYER_VISIBLE = "chickenpaint-layer-visible",
      CLASSNAME_LAYER_HIDDEN = "chickenpaint-layer-hidden",
      CLASSNAME_LAYER_GROUP_EXPANDED = "chickenpaint-layer-group-expanded",
      CLASSNAME_LAYER_GROUP_COLLAPSED = "chickenpaint-layer-group-collapsed",
      CLASSNAME_LAYER_GROUP_TOGGLE = "chickenpaint-layer-group-toggle",
      CLASSNAME_LAYER_IMAGE_THUMBNAIL = "chickenpaint-layer-image-thumbnail",
      CLASSNAME_LAYER_MASK_THUMBNAIL = "chickenpaint-layer-mask-thumbnail",
      CLASSNAME_LAYER_THUMBNAIL = "chickenpaint-layer-thumbnail",
      DRAG_STATE_IDLE = 0,
      DRAG_STATE_PRE_DRAG = 1,
      // If we've put our cursor down but we're not sure if we're dragging or clicking yet
      DRAG_STATE_DRAGGING = 2,
      // When we're really dragging
      DRAG_STATE_PRE_PAN = 3,
      // Pen/touch is down, we could either click, drag or pan
      DRAG_STATE_PANNING = 4,
      LONG_PRESS_INTERVAL = 800;
    var drag = {
        /**
         *
         * @type {int}
         */
        state: DRAG_STATE_IDLE,
        /**
         * The image layer currently being dragged, or null if no drag is in progress.
         *
         * @type {?CPLayer}
         */
        layer: null,
        /**
         * The element of the layer being dragged
         *
         * @type {HTMLElement}
         */
        layerElem: null,
        /**
         * @type {number}
         */
        dragX: 0,
        /**
         * @type {number}
         */
        dragY: 0,
        /**
         * @type {number}
         */
        initialScrollTop: 0,
        dropTarget: null,
        dropBetweenMarkerElem: null,
        frameElem: null
      },
      widgetContainer = document.createElement("div"),
      layerContainer = document.createElement("div"),
      scrollContainer = layerContainer,
      //ドロップダウンメニュー関連項目のコメントアウト
      // dropdownLayerMenu = createLayerDropdownMenu(),
      // dropdownMousePos = {x: 0, y: 0},

      /**
       * @type {int} Rotation of image in 90 degree units
       */
      imageRotation = 0,
      /**
          * The layer we right-clicked on to open the dropdown
          *
          * @type {CPLayer}
          */
      dropdownLayer = null,
      /**
          * True if we right-clicked on the mask of the layer for the dropdown.
          * @type {boolean}
          */
      dropdownOnMask = false,
      longPressTimer = null;

    // function onDismissDropdown(e) {
    // 	// Firefox wrongly fires click events for the right mouse button!
    // 	if (!("button" in e) || e.button === BUTTON_PRIMARY) {
    // 		clearDropDown();

    // 		$(this).off("click", onDismissDropdown);
    // 	}
    // }

    /**
        * Get the element that represents the layer with the given display index.
        *
        * @param {number} displayIndex
        * @returns {HTMLElement}
        */
    function getElemFromDisplayIndex(displayIndex) {
      var elems = (0, _jquery.default)(".chickenpaint-layer", layerContainer);
      return elems.get(elems.length - 1 - displayIndex);
    }
    function getDisplayIndexFromElem(elem) {
      var layer = (0, _jquery.default)(elem).closest(".chickenpaint-layer");
      if (layer.length) {
        var elems = (0, _jquery.default)(".chickenpaint-layer", layerContainer);
        return elems.length - 1 - elems.index(layer);
      } else {
        return -1;
      }
    }

    /**
     * @typedef {Object} CPDropTarget
     *
     * @property {int} displayIndex - The index of the layer to insert near
     * @property {CPLayer} layer - The layer to insert near
     * @property {string} direction - "under", "over" or "inside", the direction to insert relative to the target
     */

    /**
        * Decides which drop target we should offer for the given mouse position.
        *
        * Returns null if no drop should be offered at the given position, otherwise returns an object with details
        * on the drop.
        *
        * @param {number} clientX
        * @param {number} clientY
        * @returns {?CPDropTarget}
     */
    function getDropTargetFromClientPos(clientX, clientY) {
      var layerElems = (0, _jquery.default)(".chickenpaint-layer", layerContainer),
        target = {
          layer: linearizedLayers[linearizedLayers.length - 1],
          displayIndex: linearizedLayers.length - 1,
          direction: "over"
        };
      for (var displayIndex = 0; displayIndex < layerElems.length; displayIndex++) {
        var targetElem = layerElems[layerElems.length - 1 - displayIndex],
          rect = targetElem.getBoundingClientRect();
        if (displayIndex === 0 && clientY > rect.bottom) {
          // Special support for positioning after the last element to help us escape the bottom of a group
          var lastLayer = artwork.getLayersRoot().layers[0];
          target = {
            layer: lastLayer,
            displayIndex: getDisplayIndexFromLayer(lastLayer),
            direction: "under"
          };
          break;
        } else if (clientY >= rect.top) {
          var targetLayer = getLayerFromDisplayIndex(displayIndex),
            targetHeight = rect.bottom - rect.top;
          target = {
            layer: targetLayer,
            displayIndex: displayIndex
          };
          if (targetLayer instanceof _CPLayerGroup.default) {
            if (clientY >= rect.top + targetHeight * 0.75) {
              if (targetLayer.expanded && targetLayer.layers.length > 0) {
                // Show the insert marker as above the top layer in the group
                target.layer = targetLayer.layers[targetLayer.layers.length - 1];
                target.displayIndex--;
                target.direction = "over";
              } else {
                target.direction = "under";
              }
            } else if (clientY >= rect.top + targetHeight * 0.25) {
              if (targetLayer.expanded && targetLayer.layers.length > 0) {
                // Show the insert marker as above the top layer in the group rather than on top of the group
                target.layer = targetLayer.layers[targetLayer.layers.length - 1];
                target.displayIndex--;
                target.direction = "over";
              } else {
                target.direction = "inside";
              }
            } else {
              target.direction = "over";
            }
          } else {
            if (clientY >= rect.top + targetHeight * 0.5) {
              target.direction = "under";
            } else {
              target.direction = "over";
            }
          }
          break;
        }
      }

      /*
       * If we're dropping into the same container, make sure we don't offer to drop the layer back to the
       * same position it was already in.
       */
      if (target.layer.parent == drag.layer.parent && (target.direction == "over" || target.direction == "under")) {
        var parentGroup = target.layer.parent,
          targetIndex = parentGroup.indexOf(target.layer);
        if (target.direction == "over" && parentGroup.layers[targetIndex + 1] == drag.layer || target.direction == "under" && parentGroup.layers[targetIndex - 1] == drag.layer || target.layer == drag.layer) {
          return null;
        }
      }

      /*
       * Make sure we don't try to drop a group as a child of itself, no group-ception!
       */
      if (drag.layer instanceof _CPLayerGroup.default && (target.layer == drag.layer && target.direction == "inside" || target.layer.hasAncestor(drag.layer))) {
        return null;
      }
      return target;
    }
    function updateDropMarker() {
      if (drag.state === DRAG_STATE_DRAGGING) {
        var positionRootBounds = positionRoot.getBoundingClientRect(),
          hideBetweenMarker = true,
          hideIntoMarker = true;
        drag.dropTarget = getDropTargetFromClientPos(drag.dragX, drag.dragY);
        if (drag.dropTarget) {
          var targetElem = getElemFromDisplayIndex(drag.dropTarget.displayIndex);
          switch (drag.dropTarget.direction) {
            case "over":
            case "under":
              layerContainer.appendChild(drag.dropBetweenMarkerElem);
              var layerRect,
                markerDepth = drag.dropTarget.layer.getDepth() - 1,
                markerLeft,
                layerBottom;

              // Position the marker in the correct position between the layers, and indent it to match the layer
              layerRect = targetElem.getBoundingClientRect();

              // Are we dropping below the layers in an expanded group? Extend the rect to enclose them
              if (drag.dropTarget.direction == "under" && drag.dropTarget.layer instanceof _CPLayerGroup.default && drag.dropTarget.layer.expanded) {
                // Find the display index after this group
                var childIndex;
                for (childIndex = drag.dropTarget.displayIndex - 1; childIndex >= 0; childIndex--) {
                  if (!linearizedLayers[childIndex].hasAncestor(drag.dropTarget.layer)) {
                    break;
                  }
                }
                layerBottom = getElemFromDisplayIndex(childIndex + 1).getBoundingClientRect().bottom;
              } else {
                layerBottom = layerRect.bottom;
              }
              markerLeft = layerRect.left - positionRootBounds.left + (markerDepth > 0 ? 26 + LAYER_IN_GROUP_INDENT * markerDepth : 0);
              drag.dropBetweenMarkerElem.style.left = markerLeft + "px";
              drag.dropBetweenMarkerElem.style.width = layerRect.right - positionRootBounds.left - markerLeft + "px";
              drag.dropBetweenMarkerElem.style.top = (drag.dropTarget.direction == "over" ? layerRect.top - 1 : layerBottom + 1) - positionRootBounds.top + "px";
              (0, _jquery.default)(".chickenpaint-layer-drop-target", layerContainer).removeClass("chickenpaint-layer-drop-target");
              hideBetweenMarker = false;
              break;
            case "inside":
              var layerElems = (0, _jquery.default)(".chickenpaint-layer", layerContainer);
              layerElems.each(function (index) {
                (0, _jquery.default)(this).toggleClass("chickenpaint-layer-drop-target", layerElems.length - 1 - index == drag.dropTarget.displayIndex);
              });
              hideIntoMarker = false;
              break;
          }
        }
        if (hideIntoMarker) {
          (0, _jquery.default)(".chickenpaint-layer-drop-target", layerContainer).removeClass("chickenpaint-layer-drop-target");
        }
        if (hideBetweenMarker) {
          (0, _jquery.default)(drag.dropBetweenMarkerElem).remove();
        }
        drag.frameElem.style.top = drag.dragY - positionRootBounds.top - parseInt(drag.frameElem.style.height, 10) / 2 + "px";
      } else {
        (0, _jquery.default)(drag.dropBetweenMarkerElem).remove();
        (0, _jquery.default)(drag.frameElem).remove();
      }
    }
    function createImageThumb(layer) {
      var thumbnail = layer.getImageThumbnail(),
        thumbCanvas = thumbnail.getAsCanvas(imageRotation);
      thumbCanvas.title = (0, _lang._)("Image");
      thumbCanvas.className = CLASSNAME_LAYER_THUMBNAIL + " " + CLASSNAME_LAYER_IMAGE_THUMBNAIL;

      // Thumbnails are actually displayed at 25px high, set the display width appropriately for the aspect ratio
      thumbCanvas.style.maxWidth = thumbCanvas.width / thumbCanvas.height * 25 + "px";
      if (layer == artwork.getActiveLayer() && !artwork.isEditingMask()) {
        thumbCanvas.className += " active";
      }
      return thumbCanvas;
    }
    function drawRedX(canvas) {
      var X_INSET = 5,
        Y_INSET = 5,
        X_LINE_THICKNESS = 3,
        context = canvas.getContext("2d");
      context.strokeStyle = "red";
      context.lineWidth = X_LINE_THICKNESS;
      context.moveTo(X_INSET, Y_INSET);
      context.lineTo(canvas.width - X_INSET, canvas.height - Y_INSET);
      context.moveTo(canvas.width - X_INSET, Y_INSET);
      context.lineTo(X_INSET, canvas.height - Y_INSET);
      context.stroke();
    }
    function createMaskThumb(layer) {
      var thumbnail = layer.getMaskThumbnail(),
        thumbCanvas = thumbnail.getAsCanvas(imageRotation);
      thumbCanvas.title = (0, _lang._)("Layer mask");
      thumbCanvas.className = CLASSNAME_LAYER_THUMBNAIL + " " + CLASSNAME_LAYER_MASK_THUMBNAIL;

      // Thumbnails are actually displayed at 25px high, set the display width appropriately for the aspect ratio
      thumbCanvas.style.maxWidth = thumbCanvas.width / thumbCanvas.height * 25 + "px";
      if (layer == artwork.getActiveLayer() && artwork.isEditingMask()) {
        thumbCanvas.className += " active";
      }
      if (!layer.maskVisible) {
        thumbCanvas.className += " disabled";
        drawRedX(thumbCanvas);
      }
      return thumbCanvas;
    }

    /**
     * Create a DOM element for the given layer
     *
     * @param {int} index
     * @param {CPLayer} layer
     */
    function buildLayer(index, layer) {
      var layerDiv = document.createElement("div"),
        eyeDiv = document.createElement("div"),
        mainDiv = document.createElement("div"),
        iconsDiv = document.createElement("div"),
        layerNameDiv = document.createElement("div"),
        statusDiv = document.createElement("div"),
        blendDiv = document.createElement("div");
      layerDiv.className = "chickenpaint-layer list-group-item";
      if (layer == artwork.getActiveLayer()) {
        layerDiv.className += " " + CLASSNAME_LAYER_ACTIVE;
      }
      eyeDiv.className = "chickenpaint-layer-eye";
      if (!layer.ancestorsAreVisible()) {
        eyeDiv.className += " chickenpaint-layer-eye-hidden-ancestors";
      }
      eyeDiv.style.marginRight = 2 + LAYER_IN_GROUP_INDENT * (layer.getDepth() - 1) + "px";
      if (layer.visible) {
        layerDiv.className += " " + CLASSNAME_LAYER_VISIBLE;
        eyeDiv.appendChild(createFontAwesomeIcon("icon-eye"));
      } else {
        layerDiv.className += " " + CLASSNAME_LAYER_HIDDEN;
        eyeDiv.appendChild(createFontAwesomeIcon("icon-eye-slash"));
      }
      layerDiv.appendChild(eyeDiv);
      mainDiv.className = "chickenpaint-layer-description";
      if (layer instanceof _CPImageLayer.default) {
        if (layer.clip) {
          layerDiv.className += " chickenpaint-layer-clipped";
          iconsDiv.appendChild(createFontAwesomeIcon("icon-level-down-alt fa-flip-horizontal"));
        }
        if (layer.lockAlpha) {
          var locked = createChickenPaintIcon("lock-alpha");
          locked.title = (0, _lang._)("Transparency locked");
          statusDiv.appendChild(locked);
        }
      } else if (layer instanceof _CPLayerGroup.default) {
        layerDiv.className += " chickenpaint-layer-group";
        if (layer.expanded) {
          layerDiv.className += " " + CLASSNAME_LAYER_GROUP_EXPANDED;
          iconsDiv.appendChild(createFontAwesomeIcon("icon-folder-open chickenpaint-layer-group-toggle"));
        } else {
          layerDiv.className += " " + CLASSNAME_LAYER_GROUP_COLLAPSED;
          iconsDiv.appendChild(createFontAwesomeIcon("icon-folder chickenpaint-layer-group-toggle"));
        }
      }
      if (iconsDiv.childNodes.length) {
        iconsDiv.className = "chickenpaint-layer-icons";
        layerDiv.appendChild(iconsDiv);
      }
      try {
        if (layer instanceof _CPImageLayer.default) {
          layerDiv.appendChild(createImageThumb(layer));
        }
        if (layer.mask) {
          layerDiv.appendChild(createMaskThumb(layer));
        }
      } catch (e) {
        // We don't expect this to ever happen but it'd be nice if everything keeps running if it does
        console.log("Failed to create layer thumb");
      }
      var layerName = layer.name && layer.name.length > 0 ? layer.name : "(unnamed " + (layer instanceof _CPLayerGroup.default ? "group" : "layer") + ")";
      layerNameDiv.innerText = layerName;
      layerNameDiv.setAttribute("title", layerName);
      layerNameDiv.className = "chickenpaint-layer-name";
      blendDiv.innerText = (0, _lang._)(_CPBlend.default.BLEND_MODE_DISPLAY_NAMES[layer.blendMode]) + ": " + layer.alpha + "%";
      blendDiv.className = "chickenpaint-layer-blend";
      mainDiv.appendChild(layerNameDiv);
      mainDiv.appendChild(blendDiv);
      layerDiv.appendChild(mainDiv);
      statusDiv.className = "chickenpaint-layer-status";
      layerDiv.appendChild(statusDiv);
      layerDiv.setAttribute("data-display-index", "" + index);
      // layerDiv.setAttribute("data-toggle", "dropdown");
      // layerDiv.setAttribute("data-target", "#chickenpaint-layer-pop");

      return layerDiv;
    }
    function showRenameBoxForLayer(displayIndex) {
      if (displayIndex > -1) {
        var layer = getLayerFromDisplayIndex(displayIndex),
          elem = getElemFromDisplayIndex(displayIndex);
        if (layer && elem) {
          renameField.show(layer, elem);
        }
      }
    }
    function onDoubleClick(e) {
      if (e.button === BUTTON_PRIMARY && (0, _jquery.default)(e.target).closest(".chickenpaint-layer-description").length > 0 && (0, _jquery.default)(e.target).closest("input").length === 0) {
        /* Double clicking the layer description should start editing it, but ignore double clicks inside
         * the rename textbox itself
         */
        showRenameBoxForLayer(getDisplayIndexFromElem(e.target));
        e.preventDefault();
      }
    }
    function showContextMenu(e) {
      var displayIndex = getDisplayIndexFromElem(e.target);
      if (displayIndex != -1) {
        //コンテキストメニューのBootstrap5対応ができなかったが
        //マウス使用時にレイヤー名を変更できないと困るので
        //右クリックでレイヤー名の変更になるように動作を変更した。
        showRenameBoxForLayer(getDisplayIndexFromElem(e.target));
        e.preventDefault();
      }
    }
    function onPointerDown(e) {
      var layerElem = (0, _jquery.default)(e.target).closest(".chickenpaint-layer")[0],
        displayIndex = getDisplayIndexFromElem(layerElem);
      if (displayIndex != -1) {
        var layer = getLayerFromDisplayIndex(displayIndex);
        if (e.button == BUTTON_PRIMARY && (0, _jquery.default)(e.target).closest(".chickenpaint-layer-eye").length) {
          controller.actionPerformed({
            action: "CPSetLayerVisibility",
            layer: layer,
            visible: !layer.visible
          });
        } else if (e.button == BUTTON_PRIMARY && layer instanceof _CPLayerGroup.default && (0, _jquery.default)(e.target).closest("." + CLASSNAME_LAYER_GROUP_TOGGLE).length) {
          controller.actionPerformed({
            action: "CPExpandLayerGroup",
            group: layer,
            expand: !layer.expanded
          });
        } else {
          var layerChanged = artwork.getActiveLayer() != layer;
          dropdownOnMask = (0, _jquery.default)(e.target).closest("." + CLASSNAME_LAYER_MASK_THUMBNAIL).length > 0 || layer instanceof _CPLayerGroup.default && layer.mask !== null && layerChanged;
          if (e.button == BUTTON_PRIMARY && e.shiftKey && !(e.ctrlKey || e.metaKey) && dropdownOnMask) {
            controller.actionPerformed({
              action: "CPSetMaskVisible",
              layer: layer,
              visible: !layer.maskVisible
            });
          } else {
            var selectMask, maskChanged;
            if (e.button != BUTTON_PRIMARY && !layerChanged) {
              /*
               * Right clicking within the currently selected layer does not result in the mask/image selection
               * moving (but it does change the type of dropdown menu we receive)
               */
              selectMask = artwork.isEditingMask();
            } else {
              selectMask = dropdownOnMask;
            }
            maskChanged = artwork.isEditingMask() != selectMask;
            if (layerChanged || maskChanged) {
              controller.actionPerformed({
                action: "CPSetActiveLayer",
                layer: layer,
                mask: selectMask
              });
            }
            if (selectMask && e.altKey) {
              controller.actionPerformed({
                action: "CPToggleMaskView"
              });
            } else if (selectMask && !e.shiftKey && (e.ctrlKey || e.metaKey)) {
              controller.actionPerformed({
                action: "CPApplyLayerMask"
              });
            } else if (selectMask && e.shiftKey && (e.ctrlKey || e.metaKey)) {
              controller.actionPerformed({
                action: "CPRemoveLayerMask"
              });
            } else if (e.button == BUTTON_PRIMARY) {
              if (e.pointerType === "pen" || e.pointerType === "touch") {
                drag.state = DRAG_STATE_PRE_PAN;
                drag.initialScrollTop = scrollContainer.scrollTop;
                if (longPressTimer) {
                  clearTimeout(longPressTimer);
                }
                longPressTimer = setTimeout(function () {
                  if (drag.state === DRAG_STATE_PRE_PAN) {
                    startLayerDrag();
                    drag.dragY = e.clientY;
                    updateDropMarker();
                  }
                }, LONG_PRESS_INTERVAL);
              } else {
                drag.state = DRAG_STATE_PRE_DRAG;
              }
              drag.dropTarget = null;
              drag.layer = layer;
              // We might have replaced the layer with a new element due to the CPSetActiveLayer, so fetch that again
              drag.layerElem = getElemFromDisplayIndex(displayIndex);
              drag.dragX = e.clientX;
              drag.dragY = e.clientY;
              layerContainer.setPointerCapture(e.pointerId);
              layerContainer.addEventListener("pointermove", onPointerDragged);
              layerContainer.addEventListener("pointerup", onPointerUp);
            } else if (e.button == BUTTON_SECONDARY && !layerChanged) {
              e.preventDefault();
              showContextMenu(e);
            }
          }
        }
      }
    }
    function onPointerUp(e) {
      switch (drag.state) {
        case DRAG_STATE_DRAGGING:
          (0, _jquery.default)(drag.layerElem).removeClass("chickenpaint-layer-dragging");
          if (drag.dropTarget) {
            if (drag.dropTarget.direction == "inside") {
              controller.actionPerformed({
                action: "CPRelocateLayer",
                layer: drag.layer,
                toGroup: drag.dropTarget.layer,
                toIndex: drag.dropTarget.layer.layers.length
              });
            } else {
              controller.actionPerformed({
                action: "CPRelocateLayer",
                layer: drag.layer,
                toGroup: drag.dropTarget.layer.parent,
                toIndex: drag.dropTarget.layer.parent.indexOf(drag.dropTarget.layer) + (drag.dropTarget.direction == "over" ? 1 : 0)
              });
            }
          }
          drag.dropTarget = null;
          drag.state = DRAG_STATE_IDLE;
          updateDropMarker();
          break;
        default:
          // We didn't start the drag so there is no indicator to remove
          drag.state = DRAG_STATE_IDLE;
          break;
      }
      if (longPressTimer) {
        clearTimeout(longPressTimer);
        longPressTimer = null;
      }
      layerContainer.releasePointerCapture(e.pointerId);
      layerContainer.removeEventListener("pointermove", onPointerDragged);
      layerContainer.removeEventListener("pointerup", onPointerUp);
    }
    function startLayerDrag() {
      drag.state = DRAG_STATE_DRAGGING;
      drag.frameElem = document.createElement("div");
      drag.frameElem.className = "chickenpaint-layer-drag-frame";
      drag.frameElem.style.width = (0, _jquery.default)(drag.layerElem).outerWidth(false) + "px";
      drag.frameElem.style.height = (0, _jquery.default)(drag.layerElem).outerHeight(false) + "px";
      drag.dropBetweenMarkerElem = document.createElement("div");
      drag.dropBetweenMarkerElem.className = "chickenpaint-layer-drop-between-mark";
      drag.layerElem.className += " chickenpaint-layer-dragging";
      layerContainer.appendChild(drag.frameElem);
    }
    function onPointerDragged(e) {
      var newDragY = e.clientY;
      switch (drag.state) {
        case DRAG_STATE_PRE_PAN:
          if (Math.abs(newDragY - drag.dragY) > LAYER_DRAG_START_THRESHOLD) {
            drag.state = DRAG_STATE_PANNING;

            // Fall through
          } else {
            break;
          }
        case DRAG_STATE_PANNING:
          scrollContainer.scrollTop = drag.initialScrollTop + drag.dragY - newDragY;
          break;
        case DRAG_STATE_PRE_DRAG:
          if (Math.abs(newDragY - drag.dragY) > LAYER_DRAG_START_THRESHOLD) {
            startLayerDrag();

            // Fall through
          } else {
            break;
          }
        case DRAG_STATE_DRAGGING:
          drag.dragY = newDragY;
          updateDropMarker();
          break;
      }
    }

    /**
     * Rebuild all layer elements from the cached linearizedLayers list
     */
    this.buildLayers = function () {
      // Cache the details of the layer structure
      linearizedLayers = artwork.getLayersRoot().getLinearizedLayerList(true);
      var layerElems = linearizedLayers.map(function (layer, index) {
          return buildLayer(index, layer);
        }),
        layerFrag = document.createDocumentFragment();
      (0, _jquery.default)(layerContainer).empty();
      for (var i = layerElems.length - 1; i >= 0; i--) {
        layerFrag.appendChild(layerElems[i]);
      }
      layerContainer.appendChild(layerFrag);
      updateDropMarker();
    };

    /**
        * The properties of the given layer have changed, rebuild it.
        *
        * @param {CPLayer} layer
        */
    this.layerChanged = function (layer) {
      var index = getDisplayIndexFromLayer(layer),
        layerElem = (0, _jquery.default)(getElemFromDisplayIndex(index));
      if (layerElem.length === 0 || layer instanceof _CPLayerGroup.default && (layer.expanded != (0, _jquery.default)(layerElem).hasClass(CLASSNAME_LAYER_GROUP_EXPANDED) || layer.visible != (0, _jquery.default)(layerElem).hasClass(CLASSNAME_LAYER_VISIBLE))) {
        // When these properties change, we might have to rebuild the group's children too, so just rebuild everything
        this.buildLayers();
      } else {
        layerElem.replaceWith(buildLayer(index, layer));
      }
    };
    function rebuildThumbnailForLayer(layerElem, layer, maskThumb) {
      try {
        if (maskThumb) {
          (0, _jquery.default)("." + CLASSNAME_LAYER_MASK_THUMBNAIL, layerElem).replaceWith(createMaskThumb(layer));
        } else {
          (0, _jquery.default)("." + CLASSNAME_LAYER_IMAGE_THUMBNAIL, layerElem).replaceWith(createImageThumb(layer));
        }
      } catch (e) {}
    }

    /**
     *
     * @param {int} rotation - 90 degree increments
     */
    this.setRotation90 = function (rotation) {
      if (imageRotation != rotation) {
        imageRotation = rotation;
        for (var i = 0; i < linearizedLayers.length; i++) {
          var layer = linearizedLayers[i],
            layerElem = (0, _jquery.default)(getElemFromDisplayIndex(i));
          if (layerElem.length > 0) {
            rebuildThumbnailForLayer(layerElem, layer, false);
            if (layer.mask) {
              rebuildThumbnailForLayer(layerElem, layer, true);
            }
          }
        }
      }
    };

    /**
     * The thumbnail of the given layer has been updated.
     *
     * @param {CPImageLayer} layer
     */
    this.layerImageThumbChanged = function (layer) {
      var index = getDisplayIndexFromLayer(layer),
        layerElem = (0, _jquery.default)(getElemFromDisplayIndex(index));
      if (layerElem.length > 0) {
        rebuildThumbnailForLayer(layerElem, layer, false);
      }
    };

    /**
     * The thumbnail of the given layer has been updated.
     *
     * @param {CPImageLayer} layer
     */
    this.layerMaskThumbChanged = function (layer) {
      var index = getDisplayIndexFromLayer(layer),
        layerElem = (0, _jquery.default)(getElemFromDisplayIndex(index));
      if (layerElem.length > 0) {
        if (layer.mask) {
          rebuildThumbnailForLayer(layerElem, layer, true);
        } else {
          (0, _jquery.default)("." + CLASSNAME_LAYER_MASK_THUMBNAIL, layerElem).remove();
        }
      }
    };

    /**
     * Call when the selected layer changes.
     * 
     * @param {CPLayer} newLayer
     * @param {boolean} maskSelected
     */
    this.activeLayerChanged = function (newLayer, maskSelected) {
      (0, _jquery.default)("." + CLASSNAME_LAYER_ACTIVE, layerContainer).removeClass(CLASSNAME_LAYER_ACTIVE);
      var layerElem = (0, _jquery.default)(getElemFromDisplayIndex(getDisplayIndexFromLayer(newLayer)));
      layerElem.addClass(CLASSNAME_LAYER_ACTIVE);
      (0, _jquery.default)("." + CLASSNAME_LAYER_IMAGE_THUMBNAIL, layerElem).toggleClass("active", !maskSelected);
      (0, _jquery.default)("." + CLASSNAME_LAYER_MASK_THUMBNAIL, layerElem).toggleClass("active", maskSelected);
    };
    this.resize = function () {
      palette.dismissNotification();
      this.buildLayers();
    };
    this.getElement = function () {
      return widgetContainer;
    };

    /**
     * Scroll the layer widget until the layer with the given index is fully visible, and return
     * the element for that layer.
     *
     * @param {int} displayIndex
     */
    this.revealLayer = function (displayIndex) {
      var layerElem = getElemFromDisplayIndex(displayIndex),
        layerRect = layerElem.getBoundingClientRect(),
        containerRect = layerContainer.getBoundingClientRect();
      scrollContainer.scrollTop = Math.max(Math.min(Math.max(scrollContainer.scrollTop,
      // Scroll down to reveal the bottom of the layer
      scrollContainer.scrollTop + layerRect.bottom - containerRect.bottom), scrollContainer.scrollTop + layerRect.top - containerRect.top), 0);
      return layerElem;
    };

    // function clearDropDown() {

    // 	if ($(dropdownParent).hasClass("show")) {
    // 		var collapseInstance = new bootstrap.Collapse(dropdownParent);
    // 		collapseInstance.hide();
    // 		$(dropdownParent)
    // 			.collapse("hide")
    // 			.off("click");
    // 	}
    // }

    //ドロップダウンメニュー関連項目のコメントアウト

    // function createLayerDropdownMenu() {

    //     const
    //         menu = document.createElement("div"),

    //         actions = [
    //             {
    //                 title: "Rename...",
    //                 action: "CPRenameLayer"
    //             },
    //             {
    //                 require: ["image-layer"],
    //                 title: "Delete layer",
    //                 action: "CPRemoveLayer"
    //             },
    //             {
    //                 require: ["layer-group"],
    //                 title: "Delete group",
    //                 action: "CPRemoveLayer"
    //             },
    //             {
    //                 require: ["image-layer", "no-clipping-mask"],
    //                 title: "Clip to the layer below",
    //                 action: "CPCreateClippingMask"
    //             },
    //             {
    //                 require: ["image-layer", "clipping-mask"],
    //                 title: "Unclip from the layer below",
    //                 action: "CPReleaseClippingMask"
    //             },
    //             {
    //                 require: ["no-mask"],
    //                 title: "Add mask",
    //                 action: "CPAddLayerMask"
    //             },
    //             {
    //                 require: ["mask"],
    //                 title: "Delete mask",
    //                 action: "CPRemoveLayerMask"
    //             },
    //             {
    //                 require: ["mask"],
    //                 title: "Apply mask",
    //                 action: "CPApplyLayerMask"
    //             },
    //             {
    //                 require: ["layer-group"],
    //                 title: "Merge group",
    //                 action: "CPGroupMerge"
    //             },
    //             {
    //                 require: ["mask-enabled"],
    //                 title: "Disable mask",
    //                 action: "CPSetMaskVisible",
    //                 actionData: {
    //                     visible: "false"
    //                 }
    //             },
    //             {
    //                 require: ["mask-disabled"],
    //                 title: "Enable mask",
    //                 action: "CPSetMaskVisible",
    //                 actionData: {
    //                     visible: "true"
    //                 }
    //            }
    //         ];

    //     menu.className = "dropdown-menu";

    //     for (let action of actions) {
    //         let
    //             menuItemElem = document.createElement("a");

    //         menuItemElem.className = "dropdown-item";

    //         if (action.require) {
    //             menuItemElem.className = menuItemElem.className + " " + action.require.map(requirement => "chickenpaint-action-require-" + requirement).join(" ");
    //         }
    //         menuItemElem.href = "#";
    //         menuItemElem.innerHTML = _(action.title);
    //         menuItemElem.setAttribute("data-action", action.action);

    //         if (action.actionData) {
    //             for (let key in action.actionData) {
    //                 if (action.actionData.hasOwnProperty(key)) {
    //                     menuItemElem.setAttribute("data-action-" + key, action.actionData[key]);
    //                 }
    //             }
    //         }

    //         menu.appendChild(menuItemElem);
    //     }

    //     return menu;
    // }

    // function onDropdownActionClick(e) {
    //     let
    //         action = e.target.getAttribute("data-action");

    //     if (!action) {
    //         return;
    //     }

    //     e.preventDefault(); // Don't jump to anchor

    //     /* Bootstrap will call this for us anyway when the click propagates out to the root
    //      * of the document. However in the meantime we could have rebuilt the layer DOM nodes
    //      * from scratch, breaking Bootstrap's un-pop code.
    //      *
    //      * So clear it up front now.
    //      */
    //     clearDropDown();

    //     controller.actionPerformed({
    //         action: "CPSetActiveLayer",
    //         layer: dropdownLayer,
    //         mask: artwork.isEditingMask()
    //     });

    //     let
    //         actionData = {
    //             action: action,
    //             layer: dropdownLayer
    //         },
    //         attributes = e.target.attributes;

    //     for (let i = 0; i < attributes.length; i++) {
    //         let
    //             matches = attributes[i].name.match(/^data-action-(.+)/);

    //         if (matches) {
    //             actionData[matches[1]] = JSON.parse(attributes[i].value);
    //         }
    //     }

    //     if (action === "CPRenameLayer") {
    //         showRenameBoxForLayer(getDisplayIndexFromLayer(dropdownLayer));
    //     } else {
    //         controller.actionPerformed(actionData);
    //     }
    // }

    dropdownParent.id = "chickenpaint-layer-pop";
    widgetContainer.className = "chickenpaint-layers-widget";
    widgetContainer.addEventListener("contextmenu", function (e) {
      return e.preventDefault();
    }, true /* Capture phase, prevent context menu on all children */);

    //ドロップダウンメニュー関連項目のコメントアウト
    // dropdownLayerMenu.addEventListener("click", onDropdownActionClick);

    layerContainer.className = "list-group";
    layerContainer.addEventListener("dblclick", onDoubleClick);
    layerContainer.addEventListener("pointerdown", onPointerDown);
    layerContainer.setAttribute("touch-action", "none");
    for (var _i = 0, _arr = ["ontouchstart", "ontouchmove", "ontouchend", "ontouchcancel"]; _i < _arr.length; _i++) {
      var eventName = _arr[_i];
      layerContainer.addEventListener(eventName, absorbTouch);
    }
    widgetContainer.appendChild(layerContainer);

    //ドロップダウンメニュー関連項目のコメントアウト
    // widgetContainer.appendChild(dropdownLayerMenu);
    // $(dropdownParent)
    //     .on("show.bs.dropdown", function(e) {
    //         let
    //             layerElem = $(e.relatedTarget)[0],
    //             $dropdownElem = $(dropdownParent).find(".dropdown-menu"),

    //             layerPos = layerElem.getBoundingClientRect(),
    //             positionRootPos = dropdownParent.getBoundingClientRect();

    //         // Convert the offset to palette-relative coordinates (since that's its offset parent)
    //         $dropdownElem.css({
    //             left: (dropdownMousePos.x - $dropdownElem.outerWidth(true) - positionRootPos.left + 1) + "px",
    //             top: ((layerPos.top - $dropdownElem.outerHeight(true) / 2) - positionRootPos.top) + "px"
    //         });

    //         /* Instead of Bootstrap's extremely expensive data API, we'll only listen for dismiss clicks on the
    //          * document *while the menu is open!*
    //          */
    //         $(document).on("click", onDismissDropdown);
    //     });
  }

  function updateAvailableBlendModes() {
    var activeLayer = artwork.getActiveLayer();
    while (blendCombo.lastChild) {
      blendCombo.removeChild(blendCombo.lastChild);
    }
    for (var blendMode = _CPBlend.default.LM_FIRST; blendMode <= _CPBlend.default.LM_LAST; blendMode++) {
      if (blendMode != _CPBlend.default.LM_MULTIPLY2 && (blendMode == activeLayer.blendMode || blendMode === _CPBlend.default.LM_PASSTHROUGH && activeLayer instanceof _CPLayerGroup.default || blendMode <= _CPBlend.default.LM_LAST_CHIBIPAINT)) {
        var option = document.createElement("option");
        option.appendChild(document.createTextNode((0, _lang._)(_CPBlend.default.BLEND_MODE_DISPLAY_NAMES[blendMode])));

        // Should we use the new LM_MULTIPLY2 blend mode in this spot instead of the legacy one?
        if (blendMode === _CPBlend.default.LM_MULTIPLY && activeLayer.blendMode !== blendMode && !activeLayer.useLegacyMultiply) {
          option.value = _CPBlend.default.LM_MULTIPLY2;
        } else {
          option.value = blendMode;
        }
        blendCombo.appendChild(option);
      }
    }
  }
  function createLayerActionButtons() {
    var buttons = [{
        title: "Add layer",
        icon: createFontAwesomeIcon("icon-file"),
        action: "CPAddLayer"
      }, {
        title: "Add group",
        icon: createFontAwesomeIcon("icon-folder"),
        action: "CPAddGroup"
      }, {
        title: "Merge down",
        icon: createFontAwesomeIcon("icon-download_FILL"),
        action: "CPLayerMergeDown",
        require: ["image-layer"]
      }, {
        title: "Merge group",
        icon: createFontAwesomeIcon("icon-collapse_all_FILL"),
        action: "CPGroupMerge",
        require: ["layer-group"]
      }, {
        title: "Clip to the layer below",
        icon: createFontAwesomeIcon("icon-level-down-alt fa-flip-horizontal"),
        action: "CPCreateClippingMask",
        require: "no-clipping-mask-or-is-group"
      }, {
        title: "Unclip from the layer below",
        icon: createFontAwesomeIcon("icon-level-down-alt fa-flip-horizontal"),
        action: "CPReleaseClippingMask",
        require: "clipping-mask"
      }, {
        title: "Add layer mask",
        icon: createChickenPaintIcon("mask"),
        action: "CPAddLayerMask",
        require: ["no-mask"]
      }, {
        title: "Apply mask",
        icon: createChickenPaintIcon("mask"),
        action: "CPApplyLayerMask",
        require: ["mask"]
      }, {
        title: "Duplicate",
        icon: createFontAwesomeIcon("icon-clone"),
        action: "CPLayerDuplicate"
      }, {
        title: "Delete layer",
        icon: createFontAwesomeIcon("icon-trash"),
        action: "CPRemoveLayer"
      }],
      layerButtonsList = document.createElement("ul");
    layerButtonsList.className = 'chickenpaint-layer-buttons list-unstyled';
    var _loop = function _loop() {
      var button = _buttons[_i2];
      var elem = document.createElement("li");
      elem.setAttribute("data-action", button.action);
      elem.className = 'chickenpaint-small-toolbar-button ' + (button.require ? "chickenpaint-action-require-" + button.require : "");
      elem.title = (0, _lang._)(button.title);
      elem.appendChild(button.icon);
      elem.addEventListener("click", function () {
        controller.actionPerformed({
          action: button.action
        });
      });
      layerButtonsList.appendChild(elem);
    };
    for (var _i2 = 0, _buttons = buttons; _i2 < _buttons.length; _i2++) {
      _loop();
    }
    return layerButtonsList;
  }
  function updateActiveLayerActionButtons() {
    var activeLayer = artwork.getActiveLayer(),
      facts = computeLayerPredicates(activeLayer);
    for (var _i3 = 0, _arr2 = ["mask", "no-mask", "clipping-mask", "no-clipping-mask-or-is-group", "image-layer", "layer-group"]; _i3 < _arr2.length; _i3++) {
      var requirement = _arr2[_i3];
      var elements = layerActionButtons.getElementsByClassName("chickenpaint-action-require-" + requirement);
      var _iterator = _createForOfIteratorHelper(elements),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var element = _step.value;
          element.style.display = facts[requirement] ? "inline-block" : "none";
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    var actions = layerActionButtons.querySelectorAll("[data-action]");
    actions.forEach(function (element) {
      var action = element.getAttribute("data-action");
      element.classList.toggle("disabled", !controller.isActionAllowed(action));
    });
  }
  function updateActiveLayerControls() {
    var activeLayer = artwork.getActiveLayer();
    if (activeLayer.getAlpha() != alphaSlider.value) {
      alphaSlider.setValue(activeLayer.getAlpha());
    }
    updateAvailableBlendModes();
    if (activeLayer.getBlendMode() != parseInt(blendCombo.value, 10)) {
      blendCombo.value = activeLayer.getBlendMode();
    }
    if (activeLayer.getLockAlpha() != cbLockAlpha.checked) {
      cbLockAlpha.checked = activeLayer.getLockAlpha();
    }
    updateActiveLayerActionButtons();
  }

  /**
   * Called when a layer has been added/removed.
   */
  function onChangeStructure() {
    artwork = this;

    // Fetch and rebuild all layers
    layerWidget.resize();
    updateActiveLayerControls();
  }

  /**
      * Called when the properties of one layer has been updated and we should rebuild/repaint it.
      *
      * @param {CPLayer} layer
      */
  function onChangeLayer(layer) {
    artwork = this;
    palette.dismissNotification();
    layerWidget.layerChanged(layer);
    updateActiveLayerControls();
  }

  /**
   * Called when the thumbnail of one layer has been updated.
   *
   * @param {CPLayer} layer
   */
  function onChangeLayerImageThumb(layer) {
    artwork = this;
    layerWidget.layerImageThumbChanged(layer);
  }

  /**
   * Called when the thumbnail of one layer has been updated.
   *
   * @param {CPLayer} layer
   */
  function onChangeLayerMaskThumb(layer) {
    artwork = this;
    layerWidget.layerMaskThumbChanged(layer);
  }

  /**
   * Called when the selected layer changes.
   *
   * @param {CPLayer} oldLayer
   * @param {CPLayer} newLayer
   * @param {boolean} maskSelected
   */
  function onChangeActiveLayer(oldLayer, newLayer, maskSelected) {
    layerWidget.activeLayerChanged(newLayer, maskSelected);
    updateActiveLayerControls();
  }
  function CPRenameField() {
    var layer = null,
      origName = "",
      textBox = document.createElement("input"),
      that = this;
    this.hide = function () {
      layer = null;
      var parentNameElem = (0, _jquery.default)(textBox).parent();
      if (parentNameElem) {
        (0, _jquery.default)(textBox).remove();
        parentNameElem.text(origName);
      }
    };
    this.renameAndHide = function () {
      if (layer && layer.name != textBox.value) {
        controller.actionPerformed({
          action: "CPSetLayerName",
          layer: layer,
          name: textBox.value
        });
      }
      this.hide();
    };
    this.show = function (_layer, _layerElem) {
      layer = _layer;
      origName = layer.name;
      textBox.value = origName;
      var layerNameElem = _layerElem.querySelector('.chickenpaint-layer-name');
      if (layerNameElem) {
        // 親ノードから削除されている場合にのみ処理を実行
        if (layerNameElem.parentNode) {
          // 現在の子ノードを取得
          var currentChild = layerNameElem.firstChild;
          // テキストノードが存在する場合にのみ削除
          if (currentChild && currentChild.nodeType === Node.TEXT_NODE) {
            layerNameElem.removeChild(currentChild);
            layerNameElem.appendChild(textBox);
          }
        }
      }
      textBox.select();
    };
    textBox.type = "text";
    textBox.className = "chickenpaint-layer-rename form-control input-sm";
    textBox.addEventListener("keydown", function (e) {
      // Prevent other keyhandlers (CPCanvas) from getting their grubby hands on the input
      e.stopPropagation();
    });
    textBox.addEventListener("keydown", function (e) {
      if (e.key === "Enter") {
        // Enter
        that.renameAndHide();
      }
      e.stopPropagation();
    });
    textBox.addEventListener("keyup", function (e) {
      if (e.key === "Escape") {
        // Escape
        that.hide();
      }
      e.stopPropagation();
    });
    textBox.addEventListener("blur", function (e) {
      if (layer) {
        that.renameAndHide();
      }
    });
  }
  var parentSetSize = this.setSize,
    parentSetWidth = this.setWidth,
    parentSetHeight = this.setHeight;
  this.setSize = function (w, h) {
    parentSetSize.call(this, w, h);
    this.dismissNotification();
    alphaSlider.resize();
  };
  this.setWidth = function (width) {
    parentSetWidth.call(this, width);
    alphaSlider.resize();
    layerWidget.resize();
  };
  this.setHeight = function (height) {
    parentSetHeight.call(this, height);
    layerWidget.resize();
  };

  /**
   * Set the rotation of the image thumbnails with respect to the underlying image data.
   *
   * @param {int} newRotation - 90 degree increments
   */
  this.setRotation90 = function (newRotation) {
    layerWidget.setRotation90(newRotation);
  };
  this.dismissNotification = function () {
    (0, _jquery.default)(".chickenpaint-layer[aria-describedby],.chickenpaint-slider[aria-describedby]", body).each(function (index, elem) {
      elem = (0, _jquery.default)(elem);
      var popoverInstance = bootstrap.Popover.getInstance(elem[0]);
      if (popoverInstance) {
        popoverInstance.dispose();
      }
    });
    if (notificationDismissTimer) {
      clearTimeout(notificationDismissTimer);
      notificationDismissTimer = false;
    }
  };
  this.showNotification = function (layer, message, where) {
    var notificationLayerIndex = getDisplayIndexFromLayer(layer),
      target;
    if (artwork.getActiveLayer() == layer && where == "opacity") {
      target = alphaSlider.getElement();
    } else {
      target = layerWidget.revealLayer(notificationLayerIndex);
    }
    _this.dismissNotification();
    var popoverInstance = new bootstrap.Popover(target, {
      html: false,
      content: message,
      placement: "left",
      trigger: "manual",
      fallbackPlacement: [],
      boundary: "window",
      container: palette.getElement()
    });
    popoverInstance.show();
    notificationDismissTimer = setTimeout(function () {
      notificationDismissTimer = false;
      _this.dismissNotification();
    }, Math.max(Math.round(message.length * NOTIFICATION_HIDE_DELAY_MS_PER_CHAR), NOTIFICATION_HIDE_DELAY_MIN));
  };
  blendCombo.className = "form-control form-control-sm";
  blendCombo.tabIndex = -1;
  blendCombo.title = (0, _lang._)("Layer blending mode");
  blendCombo.addEventListener("change", function (e) {
    controller.actionPerformed({
      action: "CPSetLayerBlendMode",
      blendMode: parseInt(blendCombo.value, 10)
    });
    blendCombo.blur();
  });
  // blendCombo.onfocus = ()=>{//フォーカスを検出したら
  // 	document.activeElement.blur();//フォーカスを外す
  // 	// console.log(document.activeElement);
  // }; 

  body.appendChild(blendCombo);
  alphaSlider.title = function (value) {
    return (0, _lang._)("Opacity") + ": " + value + "%";
  };
  alphaSlider.on("valueChange", function (value) {
    controller.actionPerformed({
      action: "CPSetLayerAlpha",
      alpha: value
    });
  });
  body.appendChild(alphaSlider.getElement());
  cbSampleAllLayers.id = "chickenpaint-chk-sample-all-layers";
  cbSampleAllLayers.type = "checkbox";
  cbSampleAllLayers.addEventListener("click", function (e) {
    artwork.setSampleAllLayers(cbSampleAllLayers.checked);
    document.activeElement.blur();
  });
  body.appendChild(wrapBootstrapCheckbox(cbSampleAllLayers, (0, _lang._)("Sample all layers")));
  cbLockAlpha.id = "chickenpaint-chk-lock-alpha";
  cbLockAlpha.type = "checkbox";
  cbLockAlpha.addEventListener("click", function (e) {
    controller.actionPerformed({
      action: "CPSetLayerLockAlpha",
      lock: cbLockAlpha.checked
    });
    document.activeElement.blur();
  });
  body.appendChild(wrapBootstrapCheckbox(cbLockAlpha, (0, _lang._)("Lock transparency")));
  body.appendChild(layerWidget.getElement());
  layerActionButtons = createLayerActionButtons();
  body.appendChild(layerActionButtons);
  artwork.on("changeActiveLayer", onChangeActiveLayer);
  artwork.on("changeLayer", onChangeLayer);
  artwork.on("changeStructure", onChangeStructure);
  artwork.on("changeLayerMaskThumb", onChangeLayerMaskThumb);
  artwork.on("changeLayerImageThumb", onChangeLayerImageThumb);
  controller.on("layerNotification", this.showNotification.bind(this));

  // Set initial values
  onChangeStructure.call(artwork);
}
CPLayersPalette.prototype = Object.create(_CPPalette.default.prototype);
CPLayersPalette.prototype.constructor = CPLayersPalette;
module.exports = exports.default;

},{"../engine/CPBlend.js":5,"../engine/CPImageLayer.js":15,"../engine/CPLayer.js":16,"../engine/CPLayerGroup.js":17,"../languages/lang.js":54,"./CPPalette.js":39,"./CPSlider.js":44,"jquery":296}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPMainGUI;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPCanvas = _interopRequireDefault(require("./CPCanvas.js"));
var _CPPaletteManager = _interopRequireDefault(require("./CPPaletteManager.js"));
var _CPMainMenu = _interopRequireDefault(require("./CPMainMenu.js"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPMainGUI(controller, uiElem) {
  var _this = this;
  var lowerArea = document.createElement("div"),
    canvas = new _CPCanvas.default(controller),
    paletteManager = new _CPPaletteManager.default(controller),
    menuBar,
    fullScreenMode = false,
    that = this;
  this.togglePalettes = function () {
    paletteManager.togglePalettes();
  };
  this.arrangePalettes = function () {
    // Give the browser a chance to do the sizing of the palettes before we try to rearrange them
    setTimeout(paletteManager.arrangePalettes.bind(paletteManager), 0);
  };
  this.constrainPalettes = function () {
    paletteManager.constrainPalettes();
  };
  this.showPalette = function (paletteName, show) {
    paletteManager.showPaletteByName(paletteName, show);
  };
  this.getSwatches = function () {
    return paletteManager.palettes.swatches.getSwatches();
  };
  this.setSwatches = function (swatches) {
    paletteManager.palettes.swatches.setSwatches(swatches);
  };
  this.getPaletteManager = function () {
    return paletteManager;
  };

  /**
   *
   * @param {int} rotation - in 90 degree increments
   */
  this.setRotation90 = function (rotation) {
    canvas.setRotation(rotation * Math.PI / 2);
    paletteManager.palettes.layers.setRotation90(rotation);
  };
  this.setFullScreenMode = function (value) {
    if (fullScreenMode !== value) {
      fullScreenMode = value;
      that.resize();
      that.arrangePalettes();
    }
  };
  this.resize = function () {
    var newHeight;
    var windowHeight = window.innerHeight,
      menuBarHeight = menuBar.getElement().getBoundingClientRect().height;
    if (fullScreenMode) {
      newHeight = windowHeight - menuBarHeight;
    } else {
      newHeight = Math.min(Math.max(windowHeight - menuBarHeight - 65, 500), 850);
    }
    canvas.resize(newHeight, false);
    that.constrainPalettes();
  };
  menuBar = new _CPMainMenu.default(controller, this);
  uiElem.appendChild(menuBar.getElement());
  lowerArea.className = 'chickenpaint-main-section';
  lowerArea.appendChild(canvas.getElement());
  lowerArea.appendChild(paletteManager.getElement());
  uiElem.appendChild(lowerArea);
  canvas.on("canvasRotated90", function (newAngle) {
    paletteManager.palettes.layers.setRotation90(newAngle);
  });

  // デバイスの向きの変更時にパレットの配置を初期化
  if (screen.orientation) {
    //非対応ブラウザ対策
    screen.orientation.addEventListener("change", function (e) {
      //何通りも、試してどれかが有効になる事を期待
      _this.resize();
      // パレット初期化
      controller.actionPerformed({
        action: "CPArrangePalettes"
      });
      setTimeout(function () {
        _this.resize();
        // パレット初期化
        controller.actionPerformed({
          action: "CPArrangePalettes"
        });
      }, 10);
      Promise.resolve().then(function () {
        _this.resize();
      }).then(function () {
        // パレット初期化
        controller.actionPerformed({
          action: "CPArrangePalettes"
        });
      });
    });
  }
  // ハンバガーメニューとモーダルの二重表示防止
  var collapseElement = document.getElementById('chickenpaint-main-menu-content');
  document.addEventListener('show.bs.modal', function () {
    // chickenpaint-main-menu-contentのIDを持つcollapse要素を閉じる
    if (collapseElement && collapseElement.classList.contains('show')) {
      var bsCollapse = new bootstrap.Collapse(collapseElement, {
        toggle: false // すでに閉じている場合のエラーを防ぐ
      });

      bsCollapse.hide();
    }
  });
  if (collapseElement) {
    var WidgetNav = document.querySelector('.chickenpaint .widget-nav');
    if (WidgetNav) {
      collapseElement.addEventListener('show.bs.collapse', function (e) {
        //ハンバガーメニューを表示する時に
        // .navbar-nav を非表示にする
        WidgetNav.classList.add('hidden');
      });
      collapseElement.addEventListener('hidden.bs.collapse', function (e) {
        //ハンバガーメニューを閉じる時に
        // .navbar-nav を表示する
        WidgetNav.classList.remove('hidden');
      });
    }
    window.addEventListener("resize", function () {
      // .navbar-nav を表示する
      WidgetNav.classList.remove('hidden');
    });
  }

  //Bootstrap5のコラプスでメニューバーが閉じる時にリサイズする
  document.addEventListener("hidden.bs.collapse", this.resize.bind(this));
  window.addEventListener("resize", this.resize.bind(this));
  controller.on("fullScreen", function (fullscreen) {
    return _this.setFullScreenMode(fullscreen);
  });
  controller.on("toolbarStyleChange", function (newStyle) {
    (0, _jquery.default)(uiElem).toggleClass("chickenpaint-toolbar-style-old", newStyle === "old");
  });
  controller.on("unsavedChanges", function (unsaved) {
    (0, _jquery.default)(uiElem).toggleClass("chickenpaint-unsaved", unsaved);
  });
  setTimeout(this.resize.bind(this), 0);
}
CPMainGUI.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPMainGUI.prototype.constructor = CPMainGUI;
module.exports = exports.default;

},{"./CPCanvas.js":26,"./CPMainMenu.js":37,"./CPPaletteManager.js":40,"jquery":296,"wolfy87-eventemitter":314}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPMainMenu;
var _jquery = _interopRequireDefault(require("jquery"));
var _keymaster = _interopRequireDefault(require("../../lib/keymaster.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

var MENU_ENTRIES = [{
  name: "File",
  mnemonic: "F",
  children: [{
    name: "Save to my computer",
    action: "CPSave",
    mnemonic: "S",
    shortcut: "ctrl+s"
  }, {
    name: "Save Oekaki",
    action: "CPSend",
    mnemonic: "S",
    shortcut: "ctrl+s"
  }]
}, {
  name: "Edit",
  mnemonic: "E",
  children: [{
    name: "Undo",
    action: "CPUndo",
    mnemonic: "U",
    shortcut: "ctrl+z"
  }, {
    name: "Redo",
    action: "CPRedo",
    mnemonic: "R",
    shortcut: "ctrl+y"
  }, {
    name: "Clear history",
    action: "CPClearHistory",
    mnemonic: "H",
    title: (0, _lang._)("Removes all undo/redo information to regain memory")
  }, {
    name: "-"
  }, {
    name: "Cut",
    action: "CPCut",
    mnemonic: "T",
    shortcut: "ctrl+x"
  }, {
    name: "Copy",
    action: "CPCopy",
    mnemonic: "C",
    shortcut: "ctrl+c"
  }, {
    name: "Copy merged",
    action: "CPCopyMerged",
    mnemonic: "Y",
    shortcut: "shift+ctrl+c"
  }, {
    name: "Paste",
    action: "CPPaste",
    mnemonic: "P",
    shortcut: "ctrl+v"
  }, {
    name: "-"
  }, {
    name: "Select all",
    action: "CPSelectAll",
    mnemonic: "A",
    shortcut: "ctrl+a"
  }, {
    name: "Deselect",
    action: "CPDeselectAll",
    mnemonic: "D",
    shortcut: "ctrl+d"
  }, {
    name: "-"
  }, {
    name: "Transform",
    action: "CPTransform",
    mnemonic: "T",
    shortcut: "ctrl+h"
  }]
}, {
  name: "Layers",
  mnemonic: "L",
  children: [{
    name: "Duplicate",
    action: "CPLayerDuplicate",
    mnemonic: "D",
    shortcut: "shift+ctrl+d"
  }, {
    name: "-"
  }, {
    name: "Merge down",
    action: "CPLayerMergeDown",
    mnemonic: "E",
    shortcut: "ctrl+e"
  }, {
    name: "Merge group",
    action: "CPGroupMerge",
    mnemonic: "G",
    shortcut: "shift+ctrl+g"
  }, {
    name: "Merge all layers",
    action: "CPLayerMergeAll",
    shortcut: "shift+ctrl+e",
    mnemonic: "A"
  }, {
    name: "-"
  }, {
    hideIfNotAvailable: true,
    name: "Add layer mask",
    action: "CPAddLayerMask"
  }, {
    hideIfNotAvailable: true,
    name: "Delete layer mask",
    action: "CPRemoveLayerMask",
    shortcut: "shift+m"
  }, {
    hideIfNotAvailable: true,
    name: "Apply layer mask",
    action: "CPApplyLayerMask",
    shortcut: "ctrl+m"
  }, {
    name: "-"
  }, {
    hideIfNotAvailable: true,
    name: "Clip to the layer below",
    action: "CPCreateClippingMask"
  }, {
    hideIfNotAvailable: true,
    name: "Unclip from the layer below",
    action: "CPReleaseClippingMask"
  }]
}, {
  name: "Effects",
  mnemonic: "E",
  children: [{
    name: "Clear",
    action: "CPClear",
    mnemonic: "D",
    shortcut: "del,backspace"
  }, {
    name: "Fill",
    action: "CPFill",
    mnemonic: "F",
    shortcut: "ctrl+f"
  }, {
    name: "Flip horizontal",
    action: "CPHFlip",
    mnemonic: "H",
    shortcut: "h"
  }, {
    name: "Flip vertical",
    action: "CPVFlip",
    mnemonic: "V"
  }, {
    name: "Invert",
    action: "CPFXInvert",
    mnemonic: "I",
    shortcut: "ctrl+i",
    title: (0, _lang._)("Invert the image colors")
  }, {
    name: "-"
  }, {
    name: "Box blur...",
    action: "CPFXBoxBlur",
    mnemonic: "B"
  }, {
    name: "-"
  }, {
    name: "Monochromatic noise",
    action: "CPMNoise",
    mnemonic: "M",
    title: (0, _lang._)("Fills the selection with noise")
  }, {
    name: "Color noise",
    action: "CPCNoise",
    mnemonic: "C",
    title: (0, _lang._)("Fills the selection with colored noise")
  }]
}, {
  name: "View",
  mnemonic: "V",
  children: [{
    name: "Full-screen mode",
    action: "CPFullScreen",
    mnemonic: "F",
    checkbox: true,
    checked: false
  }, {
    name: "-"
  }, {
    name: "Zoom in",
    action: "CPZoomIn",
    mnemonic: "I",
    shortcut: "ctrl+="
  }, {
    name: "Zoom out",
    action: "CPZoomOut",
    mnemonic: "O",
    shortcut: "ctrl+-"
  }, {
    name: "Zoom 100%",
    action: "CPZoom100",
    mnemonic: "1",
    shortcut: "ctrl+0"
  }, {
    action: "CPLinearInterpolation",
    name: "-"
  }, {
    name: "Smooth-out zoomed canvas",
    action: "CPLinearInterpolation",
    mnemonic: "L",
    title: (0, _lang._)("Linear interpolation is used to give a smoothed looked to the picture when zoomed in"),
    checkbox: true,
    checked: true //初期状態でズームのアンチエイリアスをOnに
  }, {
    name: "-"
  }, {
    name: "Show grid",
    action: "CPToggleGrid",
    mnemonic: "G",
    shortcut: "ctrl+g",
    checkbox: true,
    checked: false
  }, {
    name: "Grid options...",
    action: "CPGridOptions",
    mnemonic: "D"
  }]
}, {
  name: "Palettes",
  mnemonic: "P",
  children: [{
    name: "Rearrange",
    action: "CPArrangePalettes",
    title: (0, _lang._)("Rearrange the palette windows")
  }, {
    name: "Toggle palettes",
    action: "CPTogglePalettes",
    mnemonic: "P",
    shortcut: "tab",
    title: (0, _lang._)("Hides or shows all palettes")
  },
  // 古いアイコンは使わない。
  // {
  //     name: "Use old icons",
  //     action: "CPToolbarStyle",
  //     checkbox: true,
  //     checked: false
  // },
  {
    name: "-"
  }, {
    name: "Show tools",
    action: "CPPalTool",
    mnemonic: "T",
    checkbox: true,
    checked: true
  }, {
    name: "Show color",
    action: "CPPalColor",
    mnemonic: "C",
    checkbox: true,
    checked: true
  }, {
    name: "Show stroke",
    action: "CPPalStroke",
    mnemonic: "S",
    checkbox: true,
    checked: true
  }, {
    name: "Show misc",
    action: "CPPalMisc",
    mnemonic: "M",
    checkbox: true,
    checked: true
  }, {
    name: "Show swatches",
    action: "CPPalSwatches",
    mnemonic: "W",
    checkbox: true,
    checked: true
  }, {
    name: "Show textures",
    action: "CPPalTextures",
    mnemonic: "X",
    checkbox: true,
    checked: true
  }, {
    name: "Show tool options",
    action: "CPPalBrush",
    mnemonic: "B",
    checkbox: true,
    checked: true
  }, {
    name: "Show layers",
    action: "CPPalLayers",
    mnemonic: "L",
    checkbox: true,
    checked: true
  }]
}, {
  name: "Help",
  mnemonic: "H",
  children: [{
    name: "Tablet support",
    mnemonic: "T",
    action: "CPTabletSupport"
  }, {
    name: "Shortcuts",
    mnemonic: "S",
    action: "CPShortcuts"
  }, {
    name: "-"
  }, {
    name: "About",
    mnemonic: "A",
    action: "CPAbout"
  }]
}];

/**
 * 
 * @param {ChickenPaint} controller
 * @param {CPMainGui} mainGUI
 * @constructor
 */
function CPMainMenu(controller, mainGUI) {
  var bar = (0, _jquery.default)('<nav class="navbar navbar-expand-md bg-light">' + '<div class="navbar-upper"><a class="navbar-brand" href="#">ChickenPaint Be</a>' + '<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#chickenpaint-main-menu-content" aria-controls="chickenpaint-main-menu-content" aria-expanded="false" aria-label="Toggle main menu">' + '<span class="navbar-toggler-icon"></span>' + '</button></div>' + '<div class="collapse navbar-collapse" id="chickenpaint-main-menu-content">' + '<div class="navbar-nav">' + '</div>' + '</div>' + '<div class="widget-nav" id="chickenpaint-palette-toggler-content"></div>' + '</nav>');
  // macPlatform = /^Mac/i.test(navigator.platform),

  var macPlatform = navigator.userAgent.toLowerCase().includes('mac os');
  function menuItemClicked(target) {
    var action = target.data('action'),
      checkbox = target.data('checkbox'),
      selected;
    if (controller.isActionAllowed(action)) {
      if (checkbox) {
        target.toggleClass("selected");
        selected = target.hasClass("selected");
      } else {
        selected = false;
      }
      controller.actionPerformed({
        action: action,
        checkbox: checkbox,
        selected: selected
      });
    }
  }
  function presentShortcutText(shortcut) {
    shortcut = shortcut.toUpperCase();

    // Only show the first potential shortcut out of the comma-separated list
    shortcut = shortcut.replace(/(,.+)$/, "");

    // Although the keycode for zoom in is "=", we'll present it to the user as "+"
    shortcut = shortcut.replace("CTRL+=", "CTRL++");
    shortcut = shortcut.replace("⌘+=", "⌘++");
    if (macPlatform) {
      shortcut = shortcut.replace(/([^+])\+/g, "$1");
    } else {
      shortcut = shortcut.replace(/([^+])\+/g, "$1 ");
    }
    return shortcut;
  }
  function updateMenuStates(menuElem) {
    (0, _jquery.default)("[data-action]", menuElem).each(function () {
      var thisElem = (0, _jquery.default)(this),
        action = this.getAttribute("data-action"),
        actionAllowed = controller.isActionAllowed(action);
      thisElem.toggleClass("disabled", !actionAllowed).toggleClass("hidden", !actionAllowed && thisElem.data("hideIfNotAvailable") === true);
    });

    // Hide dividers if all of the menu options in the section they delineate were hidden
    (0, _jquery.default)(".dropdown-divider", menuElem).removeClass("hidden");
    var visibleElements = (0, _jquery.default)(".dropdown-item:not(.hidden),.dropdown-divider:not(.hidden)", menuElem),
      lastDivider = null;
    for (var i = 0; i < visibleElements.length; i++) {
      var thisElement = (0, _jquery.default)(visibleElements[i]);
      if (thisElement.hasClass("dropdown-divider")) {
        if (i === 0 || lastDivider) {
          // This divider immediately follows a previous divider, so we don't need it
          thisElement.addClass("hidden");
        } else {
          lastDivider = thisElement;
        }
      } else {
        lastDivider = null;
      }
    }
    if (lastDivider) {
      lastDivider.addClass("hidden");
    }
  }
  function fillMenu(menuElem, entries) {
    menuElem.append(entries.map(function (topLevelMenuEntry) {
      var topLevelMenuElem = (0, _jquery.default)('<div class="nav-item dropdown">' + '<a href="#" class="nav-link dropdown-toggle" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' + (0, _lang._)(topLevelMenuEntry.name) + '</a>' + '<ul class="dropdown-menu">' + '</ul>' + '</div>');
      var dropdownToggle = (0, _jquery.default)(".dropdown-toggle", topLevelMenuElem);
      var dropdownMenu = (0, _jquery.default)(".dropdown-menu", topLevelMenuElem);

      //data-bs-toggle="dropdown"を指定ずみのため、初期化不要
      // Bootstrap 5: ドロップダウンを初期化
      // var dropdown = new bootstrap.Dropdown(dropdownToggle[0]);
      dropdownToggle[0].addEventListener('show.bs.dropdown', function (e) {
        updateMenuStates(topLevelMenuElem);

        /* Instead of Bootstrap's extremely expensive data API, we'll only listen for dismiss clicks on the
         * document *while the menu is open!*
         */
        //メニューが表示されなくなってしまうのでコメントアウト
        // $(document).one("click", function () {
        // 	if (dropdownMenu.hasClass("show")) {
        // 		dropdown.hide(); // Bootstrap 5: ドロップダウンを非表示にする
        // 	}
        // });
      });

      dropdownMenu.append(topLevelMenuEntry.children.map(function (entry) {
        if (entry.action && !controller.isActionSupported(entry.action)) {
          return;
        }
        if (entry.action == "CPSend" && !controller.isActionSupported("CPContinue")) {
          // User won't be able to come back after saving, so make it sound more final
          entry.name = (0, _lang._)("Post Oekaki");
          entry.shortcut = "ctrl+p";
        }
        var entryElem;
        if (entry.name == '-') {
          entryElem = (0, _jquery.default)('<hr class="dropdown-divider"></hr>');
        } else {
          entryElem = (0, _jquery.default)('<a class="dropdown-item" href="#" data-action="' + entry.action + '"><span>' + (0, _lang._)(entry.name) + '</span></a>');
          if (entry.checkbox) {
            (0, _jquery.default)(entryElem).data("checkbox", true).toggleClass("selected", !!entry.checked);
          }
          if (entry.hideIfNotAvailable) {
            entryElem.data("hideIfNotAvailable", true);
          }
        }
        if (entry.title) {
          entryElem.attr('title', (0, _lang._)(entry.title));
        }
        if (entry.shortcut) {
          var menuLink = entryElem;
          var shortcutDesc = document.createElement("small");

          // Rewrite the shortcuts to Mac-style
          if (macPlatform) {
            entry.shortcut = entry.shortcut.replace(/SHIFT/im, "⇧");
            entry.shortcut = entry.shortcut.replace(/ALT/im, "⌥");
            entry.shortcut = entry.shortcut.replace(/CTRL/im, "⌘");
          }
          shortcutDesc.className = "chickenpaint-shortcut";
          shortcutDesc.textContent = presentShortcutText(entry.shortcut);
          menuLink.append(shortcutDesc);
          (0, _keymaster.default)(entry.shortcut, function (e) {
            menuItemClicked(menuLink);
            e.preventDefault();
            e.stopPropagation();
            return false;
          });
        }
        // entryElemをliタグで囲う
        entryElem = (0, _jquery.default)('<li>').append(entryElem);
        return entryElem;
      }));
      return topLevelMenuElem;
    }));
  }
  function fillWidgetTray(menuElem, entries) {
    menuElem.append(entries.filter(function (item) {
      return !!item.mnemonic && controller.isActionSupported(item.action);
    }).map(function (entry) {
      var widgetMenuElem = (0, _jquery.default)("<button class=\"widget-toggler selected\" type=\"button\" data-action=\"".concat(entry.action, "\" data-checkbox=\"true\" data-selected=\"").concat(!entry.checked, "\">") + '<span>' + entry.mnemonic + '</span>' + '</button>');
      widgetMenuElem.on('click', function (e) {
        menuItemClicked(widgetMenuElem);
        e.preventDefault();
      });
      return widgetMenuElem;
    }));
  }
  this.getElement = function () {
    return bar[0];
  };
  fillMenu((0, _jquery.default)(".navbar-nav", bar), MENU_ENTRIES);
  fillWidgetTray((0, _jquery.default)(".widget-nav", bar), MENU_ENTRIES[5].children);
  (0, _jquery.default)(bar).on('click', 'a:not(.dropdown-toggle)', function (e) {
    menuItemClicked((0, _jquery.default)(this));
    e.preventDefault();
  });

  // Since we don't use the data-api
  (0, _jquery.default)(".navbar-toggler", bar).on('click', function (e) {
    //ハンバーガーメニューをクリックした時
    //元のコードをbootstrap5形式に対応させようとするとエラーが出る
    //コメントアウトしても動作に支障は出ていない
    // $('.collapse', bar).collapse('toggle');
    e.preventDefault();
  });
  function onPaletteVisChange(paletteName, show) {
    // Toggle the tickbox of the corresponding menu entry to match the new palette visibility
    var palMenuEntry = (0, _jquery.default)('[data-action=\"CPPal' + paletteName.substring(0, 1).toUpperCase() + paletteName.substring(1) + '\"]', bar);
    palMenuEntry.toggleClass("selected", show);
  }
  mainGUI.getPaletteManager().on("paletteVisChange", onPaletteVisChange);

  // 古いアイコンは使わない。
  var fullScreenToggle = (0, _jquery.default)(".dropdown-item[data-action=CPFullScreen]", bar),
    toolbarStyleToggle = (0, _jquery.default)(".dropdown-item[data-action=CPToolbarStyle]", bar);
  controller.on("fullScreen", function (isFullscreen) {
    return fullScreenToggle.toggleClass("selected", isFullscreen);
  });
  fullScreenToggle.toggleClass("selected", controller.isFullScreen());
  controller.on("toolbarStyleChange", function (newStyle) {
    return toolbarStyleToggle.toggleClass("selected", newStyle === "old");
  });
  toolbarStyleToggle.toggleClass("selected", controller.getToolbarStyle() === "old");
}
module.exports = exports.default;

},{"../../lib/keymaster.js":68,"../languages/lang.js":54,"jquery":296}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPMiscPalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPMiscPalette(cpController) {
  _CPPalette.default.call(this, cpController, "misc", "Misc");
  var that = this,
    buttons = [{
      className: "chickenpaint-tool-zoom-in",
      command: "CPZoomIn",
      toolTip: "Zoom in"
    }, {
      className: "chickenpaint-tool-zoom-out",
      command: "CPZoomOut",
      toolTip: "Zoom out"
    }, {
      className: "chickenpaint-tool-zoom-100",
      command: "CPZoom100",
      toolTip: "Zoom 100%"
    }, {
      className: "chickenpaint-tool-flip-horizontal",
      command: "CPHFlip",
      toolTip: "Flip horizontal"
    }, {
      className: "chickenpaint-tool-undo",
      command: "CPUndo",
      toolTip: "Undo"
    }, {
      className: "chickenpaint-tool-redo",
      command: "CPRedo",
      toolTip: "Redo"
    }, {
      className: "chickenpaint-tool-send",
      command: "CPSend",
      toolTip: "Save Oekaki"
    }];
  function buildButtons() {
    var body = that.getBodyElement(),
      listElem = document.createElement("ul");
    listElem.className = "chickenpaint-misc-tools list-unstyled";
    for (var i in buttons) {
      var button = buttons[i],
        buttonElem = document.createElement("li"),
        buttonIcon = document.createElement("div");
      if (button.command == 'CPSend' && !cpController.isActionSupported("CPContinue")) {
        button.toolTip = "Post Oekaki";
        button.className = "chickenpaint-tool-send-and-end";
      }
      buttonElem.className = "chickenpaint-toolbar-button " + button.className;
      buttonElem.setAttribute("data-buttonIndex", i);
      buttonElem.setAttribute("title", (0, _lang._)(button.toolTip));
      buttonIcon.className = "chickenpaint-toolbar-button-icon";
      buttonElem.appendChild(buttonIcon);
      listElem.appendChild(buttonElem);
    }
    (0, _jquery.default)(listElem).on("mousedown", "li", function (e) {
      (0, _jquery.default)(this).addClass("selected");
    }).on("mouseup", "li", function (e) {
      (0, _jquery.default)(this).removeClass("selected");
    }).on("click", "li", function (e) {
      var button = buttons[parseInt(this.getAttribute("data-buttonIndex"), 10)];
      cpController.actionPerformed({
        action: button.command
      });
    });
    body.appendChild(listElem);
  }
  buildButtons();
}
CPMiscPalette.prototype = Object.create(_CPPalette.default.prototype);
CPMiscPalette.prototype.constructor = CPMiscPalette;
module.exports = exports.default;

},{"../languages/lang.js":54,"./CPPalette.js":39,"jquery":296}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPPalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

var DRAG_START_THRESHOLD = 5;
function distanceGreaterThan(a, b, threshold) {
  var dist = (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
  return dist > threshold * threshold;
}

/**
 * 
 * @param {ChickenPaint} cpController
 * @param {String} className
 * @param {String} title
 * @param {Object} [options]
 * @param {boolean} options.resizeVert
 * @param {boolean} options.resizeHorz
 * @param {boolean} options.collapseDownwards
 * 
 * @constructor
 */
function CPPalette(cpController, className, title, options) {
  // Use a shorter version of the title if needed and one is available
  if (cpController.getSmallScreenMode() && (0, _lang._)(title + " (shorter)") !== title + " (shorter)") {
    this.title = (0, _lang._)(title + " (shorter)");
  } else {
    this.title = (0, _lang._)(title);
  }
  options = options || {};
  this.name = className;
  this.resizeVert = options.resizeVert || false;
  this.resizeHorz = options.resizeHorz || false;
  var containerElement = document.createElement("div"),
    headElement = document.createElement("div"),
    collapseIcon = document.createElement("i"),
    closeButton = document.createElement("button"),
    bodyElement = document.createElement("div"),
    vertHandle = null,
    horzHandle = null,
    dragStartPos,
    dragAction,
    dragOffset,
    that = this;
  this.getElement = function () {
    return containerElement;
  };
  this.getBodyElement = function () {
    return bodyElement;
  };
  this.getWidth = function () {
    return (0, _jquery.default)(containerElement).outerWidth();
  };
  this.getHeight = function () {
    return (0, _jquery.default)(containerElement).outerHeight();
  };
  this.getX = function () {
    return parseInt(containerElement.style.left, 10) || 0;
  };
  this.getY = function () {
    return parseInt(containerElement.style.top, 10) || 0;
  };
  this.setLocation = function (x, y) {
    containerElement.style.left = x + "px";
    containerElement.style.top = y + "px";
  };
  this.setWidth = function (width) {
    containerElement.style.width = width + "px";
  };
  this.setHeight = function (height) {
    containerElement.style.height = height + "px";
  };
  this.setSize = function (width, height) {
    this.setWidth(width);
    this.setHeight(height);
  };
  this.setCollapseDownwards = function (collapseDownwards) {
    options.collapseDownwards = collapseDownwards;
  };

  /**
   * @param {boolean} [collapse] True to collapse, false to uncollapse, omit to toggle state
   */
  this.toggleCollapse = function (collapse) {
    var $containerElement = (0, _jquery.default)(containerElement);
    if (collapse === undefined) {
      collapse = !$containerElement.hasClass("collapsed");
    } else {
      if ($containerElement.hasClass("collapsed") == collapse) {
        return;
      }
    }
    var windowHeight = $containerElement.parents(".chickenpaint").find(".chickenpaint-canvas").height(),
      oldHeight = this.getHeight(),
      oldBottom = this.getY() + oldHeight;
    $containerElement.toggleClass("collapsed", collapse);
    (0, _jquery.default)(collapseIcon).toggleClass("icon-angle-down", !collapse).toggleClass("icon-angle-up", collapse);
    if (collapse) {
      // Move the header down to the old base position
      if (options.collapseDownwards) {
        this.setLocation(this.getX(), Math.min(oldBottom, windowHeight) - this.getHeight());
      }
    } else {
      var thisHeight = this.getHeight();
      if (options.collapseDownwards) {
        this.setLocation(this.getX(), Math.max(oldBottom - thisHeight, 0));
      } else {
        // Keep palettes inside the window when uncollapsing
        if (this.getY() + thisHeight > windowHeight) {
          this.setLocation(this.getX(), Math.max(windowHeight - thisHeight, 0));
        }
      }
    }
  };
  this.userIsDoneWithUs = function () {
    if (cpController.getSmallScreenMode()) {
      this.toggleCollapse(true);
    }
  };
  function paletteHeaderPointerMove(e) {
    if ((dragAction === "dragStart" || dragAction === "dragging") && e.buttons !== 0) {
      var newX = e.pageX - dragOffset.x,
        newY = e.pageY - dragOffset.y;
      if (dragAction == "dragStart") {
        if (distanceGreaterThan({
          x: newX,
          y: newY
        }, dragStartPos, DRAG_START_THRESHOLD)) {
          // Recognise this as a drag rather than a clink
          dragAction = "dragging";
        }
      }
      if (dragAction == "dragging") {
        that.setLocation(newX, newY);
      }
    }
  }
  function paletteHeaderPointerDown(e) {
    if (e.button == 0) {
      /* Left */
      e.stopPropagation();
      e.preventDefault(); // Avoid generating further legacy mouse events

      if (e.target.nodeName == "BUTTON") {
        // Close button was clicked
        that.emitEvent("paletteVisChange", [that, false]);
      } else {
        dragStartPos = {
          x: parseInt(containerElement.style.left, 10) || 0,
          y: parseInt(containerElement.style.top, 10) || 0
        };
        dragOffset = {
          x: e.pageX - (0, _jquery.default)(containerElement).position().left,
          y: e.pageY - (0, _jquery.default)(containerElement).position().top
        };
        if (cpController.getSmallScreenMode()) {
          // Wait for the cursor to move a certain amount before we classify this as a drag
          dragAction = "dragStart";
        } else {
          dragAction = "dragging";
        }
        e.target.setPointerCapture(e.pointerId);
      }
    }
  }
  function paletteHeaderPointerUp(e) {
    if (dragAction === "dragging" || dragAction === "dragStart") {
      if (dragAction === "dragStart") {
        // We clicked the header. Cancel the drag and toggle the palette instead
        e.stopPropagation();
        e.preventDefault();

        /* Don't move the dialog immediately, because otherwise a click event will be
         * dispatched on the element which ends up under the cursor afterwards.
         */
        setTimeout(function () {
          that.setLocation(dragStartPos.x, dragStartPos.y);
          that.toggleCollapse();
        }, 100);
      }
      dragAction = false;
      try {
        e.target.releasePointerCapture(e.pointerId);
      } catch (e) {
        // This can fail for a variety of reasons we don't care about and won't affect us
        console.error(e);
      }
    }
  }
  function vertHandlePointerMove(e) {
    if (dragAction == "vertResize") {
      that.setHeight(e.pageY - (0, _jquery.default)(containerElement).offset().top);
    }
  }
  function vertHandlePointerUp(e) {
    vertHandle.releasePointerCapture(e.pointerId);
    dragAction = false;
  }
  function vertHandlePointerDown(e) {
    dragAction = "vertResize";
    vertHandle.setPointerCapture(e.pointerId);
  }
  function addVertResizeHandle() {
    vertHandle = document.createElement("div");
    vertHandle.className = "chickenpaint-resize-handle-vert";
    vertHandle.addEventListener("pointerdown", vertHandlePointerDown);
    vertHandle.addEventListener("pointermove", vertHandlePointerMove);
    vertHandle.addEventListener("pointerup", vertHandlePointerUp);
    containerElement.appendChild(vertHandle);
  }
  function horzHandlePointerMove(e) {
    if (dragAction == "horzResize") {
      that.setWidth(e.pageX - (0, _jquery.default)(containerElement).offset().left);
    }
  }
  function horzHandlePointerUp(e) {
    horzHandle.releasePointerCapture(e.pointerId);
    dragAction = false;
  }
  function horzHandlePointerDown(e) {
    dragAction = "horzResize";
    horzHandle.setPointerCapture(e.pointerId);
  }
  function addHorzResizeHandle() {
    horzHandle = document.createElement("div");
    horzHandle.className = "chickenpaint-resize-handle-horz";
    horzHandle.addEventListener("pointerdown", horzHandlePointerDown);
    horzHandle.addEventListener("pointermove", horzHandlePointerMove);
    horzHandle.addEventListener("pointerup", horzHandlePointerUp);
    containerElement.appendChild(horzHandle);
  }
  collapseIcon.className = "collapse-icon fas icon-angle-down";
  closeButton.type = "button";
  closeButton.className = "btn btn-close";
  closeButton.textContent = "";
  closeButton.tabIndex = -1;
  containerElement.className = "chickenpaint-palette chickenpaint-palette-" + className;
  headElement.className = "chickenpaint-palette-head";
  headElement.setAttribute("touch-action", "none");
  var titleContainer = document.createElement("div"),
    titleElem = document.createElement("h5");
  titleContainer.className = 'modal-header';
  titleElem.className = 'modal-title';
  titleElem.appendChild(document.createTextNode(this.title));
  titleElem.appendChild(collapseIcon);
  titleContainer.appendChild(titleElem);
  titleContainer.appendChild(closeButton);
  headElement.appendChild(titleContainer);
  bodyElement.className = "chickenpaint-palette-body";
  containerElement.appendChild(headElement);
  containerElement.appendChild(bodyElement);
  if (this.resizeVert) {
    addVertResizeHandle();
  }
  if (this.resizeHorz) {
    addHorzResizeHandle();
  }
  headElement.addEventListener("pointerdown", paletteHeaderPointerDown);
  headElement.addEventListener("pointermove", paletteHeaderPointerMove);
  headElement.addEventListener("pointerup", paletteHeaderPointerUp);
}
CPPalette.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPPalette.prototype.constructor = _wolfy87Eventemitter.default;
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296,"wolfy87-eventemitter":314}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPPaletteManager;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _CPToolPalette = _interopRequireDefault(require("./CPToolPalette.js"));
var _CPMiscPalette = _interopRequireDefault(require("./CPMiscPalette.js"));
var _CPStrokePalette = _interopRequireDefault(require("./CPStrokePalette.js"));
var _CPColorPalette = _interopRequireDefault(require("./CPColorPalette.js"));
var _CPBrushPalette = _interopRequireDefault(require("./CPBrushPalette.js"));
var _CPLayersPalette = _interopRequireDefault(require("./CPLayersPalette.js"));
var _CPTexturePalette = _interopRequireDefault(require("./CPTexturePalette.js"));
var _CPSwatchesPalette = _interopRequireDefault(require("./CPSwatchesPalette.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPPaletteManager(cpController) {
  var palettes = {
      tool: new _CPToolPalette.default(cpController),
      misc: new _CPMiscPalette.default(cpController),
      stroke: new _CPStrokePalette.default(cpController),
      color: new _CPColorPalette.default(cpController),
      brush: new _CPBrushPalette.default(cpController),
      layers: new _CPLayersPalette.default(cpController),
      textures: new _CPTexturePalette.default(cpController),
      swatches: new _CPSwatchesPalette.default(cpController)
    },
    defaultCollapse = {
      tool: false,
      color: false,
      misc: false
    },
    collapseDownwards = {
      color: true,
      textures: true,
      layers: true
    },
    parentElem = document.createElement("div"),
    that = this;
  var paletteFrames = [],
    hiddenFrames = [];
  this.palettes = palettes;
  function getPaletteDisplayArea() {
    // Use the canvas as a positioning guide to avoid overlapping scrollbars
    var canvas = (0, _jquery.default)(parentElem).parents(".chickenpaint").find(".chickenpaint-canvas");
    return {
      width: canvas.width(),
      height: canvas.height()
    };
  }
  function showPalette(palette, show) {
    var palElement = palette.getElement();
    if (show) {
      if (!parentElem.contains(palElement)) {
        parentElem.appendChild(palElement);
      }
    } else {
      if (parentElem.contains(palElement)) {
        parentElem.removeChild(palElement);
      }
    }
    that.emitEvent("paletteVisChange", [palette.name, show]);

    // FIXME: focus hack
    // controller.canvas.grabFocus(); TODO
  }

  this.showPaletteByName = function (paletteName, show) {
    var palette = palettes[paletteName];
    if (palette) {
      showPalette(palette, show);
    }
  };
  this.togglePalettes = function () {
    if (hiddenFrames.length == 0) {
      (0, _jquery.default)("> .chickenpaint-palette", parentElem).each(function () {
        that.showPaletteByName(this.getAttribute("data-paletteName"), false);
        hiddenFrames.push(this);
      });
    } else {
      for (var i = 0; i < hiddenFrames.length; i++) {
        var frame = hiddenFrames[i];
        that.showPaletteByName(frame.getAttribute("data-paletteName"), true);
      }
      hiddenFrames = [];
    }
  };

  /**
   * Pop palettes that are currently outside the visible area back into view.
   */
  this.constrainPalettes = function () {
    var windowDim = getPaletteDisplayArea();
    for (var i in palettes) {
      var palette = palettes[i];

      /* Move palettes that are more than half out of the frame back into it */
      if (palette.getX() + palette.getWidth() / 2 > windowDim.width) {
        palette.setLocation(windowDim.width - palette.getWidth(), palette.getY());
      }
      if (palette.getY() + palette.getHeight() / 2 > windowDim.height) {
        palette.setLocation(palette.getX(), windowDim.height - palette.getHeight());
      }
    }

    //Move small palettes to the front so that they aren't completely hidden
    //palettes.swatches.moveToFront();

    //Special handling for the swatches palette being under the brush palette:
    var widthToSpare = windowDim.width - palettes.tool.getWidth() - palettes.misc.getWidth() - palettes.stroke.getWidth() - palettes.color.getWidth() - palettes.brush.getWidth() - 15 > 0;
    if (palettes.swatches.getX() + palettes.swatches.getWidth() == palettes.brush.getX() + palettes.brush.getWidth() && Math.abs(palettes.swatches.getY() - palettes.brush.getY()) < 20) {
      palettes.swatches.setLocation(palettes.brush.getX() - palettes.swatches.getWidth() - (widthToSpare ? 5 : 1), 0);
    }

    //Special handling for layers palette being too damn tall:
    if (palettes.layers.getY() + palettes.layers.getHeight() > windowDim.height) {
      palettes.layers.setHeight(Math.max(windowDim.height - palettes.layers.getY(), 200));
    }
  };

  /**
   * Rearrange the palettes from scratch into a useful arrangement.
   */
  this.arrangePalettes = function () {
    var windowDim = getPaletteDisplayArea(),
      haveWidthToSpare;
    if (cpController.getSmallScreenMode()) {
      palettes.tool.setLocation(0, 0);
      palettes.misc.setLocation(palettes.tool.getX() + palettes.tool.getWidth() + 1, 0);
      var BrushLocationY = windowDim.width - (palettes.tool.getWidth() + palettes.misc.getWidth() + palettes.brush.getWidth()) <= 16 ? palettes.misc.getY() + palettes.misc.getHeight() + 1 : 0;
      palettes.brush.setLocation(windowDim.width - palettes.brush.getWidth() - 15, BrushLocationY);

      // palettes.brush.setLocation(windowDim.width - palettes.brush.getWidth() - 15, palettes.misc.getY() + palettes.misc.getHeight() + 1);

      var layersY = 330;
      palettes.textures.setWidth(windowDim.width - palettes.textures.getX());
      palettes.layers.setLocation(palettes.brush.getX() + palettes.brush.getWidth() - palettes.layers.getWidth(), palettes.textures.getY() - palettes.layers.getHeight());
      var layerPaletteHeight = Math.max(palettes.textures.getY() - layersY - 1, 370);
      palettes.layers.setHeight(layerPaletteHeight);
      // palettes.layers.setHeight(palettes.textures.getY() - layersY - 1);
      palettes.layers.setWidth(218);
      palettes.stroke.setLocation(palettes.misc.getX(), palettes.misc.getY() + palettes.misc.getHeight() + 1);
      palettes.swatches.setLocation(palettes.stroke.getX(), palettes.stroke.getY() + palettes.stroke.getHeight() + 1);
    } else {
      haveWidthToSpare = windowDim.width - palettes.tool.getWidth() - palettes.misc.getWidth() - palettes.stroke.getWidth() - palettes.color.getWidth() - palettes.brush.getWidth() - 15 > 0;
      palettes.brush.setLocation(windowDim.width - palettes.brush.getWidth() - 15, 0);
      var bottomOfBrush = palettes.brush.getY() + palettes.brush.getHeight(),
        _layersY = windowDim.height - bottomOfBrush > 300 ? bottomOfBrush + 2 : bottomOfBrush;
      palettes.layers.setSize(palettes.brush.getWidth() + (haveWidthToSpare ? 30 : 0), windowDim.height - _layersY);
      palettes.layers.setLocation(palettes.brush.getX() + palettes.brush.getWidth() - palettes.layers.getWidth(), _layersY);
      palettes.tool.setLocation(0, 0);
      palettes.misc.setLocation(palettes.tool.getX() + palettes.tool.getWidth() + (haveWidthToSpare ? 5 : 1), 0);
      if (haveWidthToSpare) {
        palettes.stroke.setLocation(palettes.misc.getX() + palettes.misc.getWidth() + (haveWidthToSpare ? 5 : 1), 0);
      } else {
        palettes.stroke.setLocation(palettes.misc.getX(), palettes.misc.getY() + palettes.misc.getHeight() + 1);
      }
      palettes.swatches.setLocation(Math.max(palettes.brush.getX() - palettes.swatches.getWidth() - (haveWidthToSpare ? 5 : 1), palettes.tool.getX() + palettes.tool.getWidth()), 0);
      palettes.textures.setWidth(Math.min(palettes.layers.getX() - palettes.textures.getX(), 490));
    }
    palettes.textures.setLocation(palettes.color.getX() + palettes.color.getWidth() + 4, windowDim.height - palettes.textures.getHeight());
    palettes.color.setLocation(0, Math.max(palettes.tool.getY() + palettes.tool.getHeight(), windowDim.height - palettes.color.getHeight()));
  };
  cpController.on("smallScreen", function (smallScreenMode) {
    if (smallScreenMode) {
      for (var paletteName in palettes) {
        var palette = palettes[paletteName];
        palette.toggleCollapse(smallScreenMode && (!(paletteName in defaultCollapse) || defaultCollapse[paletteName]));
      }
    }
  });
  this.getElement = function () {
    return parentElem;
  };
  parentElem.className = "chickenpaint-palettes";
  for (var paletteName in palettes) {
    var palette = palettes[paletteName],
      palElement = palette.getElement();
    palette.on("paletteVisChange", function () {
      showPalette(this, false);
    });
    if (paletteName in collapseDownwards) {
      palette.setCollapseDownwards(true);
    }
    palElement.setAttribute("data-paletteName", paletteName);
    paletteFrames.push(palElement);
  }
  for (var _paletteName in palettes) {
    var _palElement = palettes[_paletteName].getElement();
    parentElem.appendChild(_palElement);
  }
}
CPPaletteManager.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPPaletteManager.prototype.constructor = CPPaletteManager;
module.exports = exports.default;

},{"./CPBrushPalette.js":25,"./CPColorPalette.js":28,"./CPLayersPalette.js":35,"./CPMiscPalette.js":38,"./CPStrokePalette.js":46,"./CPSwatchesPalette.js":47,"./CPTexturePalette.js":49,"./CPToolPalette.js":50,"jquery":296,"wolfy87-eventemitter":314}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPScrollbar;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @param vertical boolean
 */
function CPScrollbar(vertical) {
  var bar = document.createElement("div"),
    handle = document.createElement("div"),
    handleInner = document.createElement("div"),
    min = 0,
    max = 1,
    offset = 0,
    visibleRange = 1,
    blockIncrement = 10,
    unitIncrement = 1,
    valueIsAdjusting = false,
    handleSize = 1,
    dragging = false,
    dragLastOffset,
    that = this;
  function updateBar() {
    var longDimension = vertical ? (0, _jquery.default)(bar).height() : (0, _jquery.default)(bar).width();

    /* As the size of the document approaches the size of the container, handle size grows to fill the 
     * whole track:
     */
    handleSize = visibleRange / (max - min) * longDimension;
    var handleOffset = (offset - min) / (max - min) * (longDimension - handleSize);
    handleInner.style[vertical ? "height" : "width"] = handleSize + "px";
    handle.style[vertical ? "height" : "width"] = handleSize + "px";
    handle.style[vertical ? "top" : "left"] = handleOffset + "px";
  }
  this.setValues = function (_offset, _visibleRange, _min, _max) {
    offset = _offset;
    visibleRange = _visibleRange;
    min = _min;
    max = _max;
    updateBar();
  };
  this.setBlockIncrement = function (increment) {
    blockIncrement = increment;
  };
  this.setUnitIncrement = function (increment) {
    unitIncrement = increment;
  };
  this.getElement = function () {
    return bar;
  };
  this.getValueIsAdjusting = function () {
    return valueIsAdjusting;
  };
  function onBarClick(e) {
    if (this == bar) {
      var clickPos = vertical ? e.pageY - (0, _jquery.default)(bar).offset().top : e.pageX - (0, _jquery.default)(bar).offset().left,
        barPos = parseInt(handle.style[vertical ? "top" : "left"], 10);
      if (clickPos < barPos) {
        offset -= blockIncrement;
      } else {
        offset += blockIncrement;
      }
      that.emitEvent("valueChanged", [offset]);
      updateBar();
    }
  }
  function onHandlePress(e) {
    e.stopPropagation();
    dragLastOffset = vertical ? e.pageY - (0, _jquery.default)(bar).offset().top : e.pageX - (0, _jquery.default)(bar).offset().left;
    handle.setPointerCapture(e.pointerId);
    (0, _jquery.default)(handle).addClass("dragging");
    dragging = true;
  }
  function onHandleClick(e) {
    e.stopPropagation();
  }
  function onHandleDrag(e) {
    if (dragging) {
      valueIsAdjusting = true;
      var longDimension = vertical ? (0, _jquery.default)(bar).height() : (0, _jquery.default)(bar).width(),
        mouseOffset = vertical ? e.pageY - (0, _jquery.default)(bar).offset().top : e.pageX - (0, _jquery.default)(bar).offset().left;
      offset = offset + (mouseOffset - dragLastOffset) * (max - min) / (longDimension - handleSize);
      offset = Math.min(Math.max(offset, min), max);
      dragLastOffset = mouseOffset;
      that.emitEvent("valueChanged", [offset]);
      updateBar();
      valueIsAdjusting = false;
    }
  }
  function onHandleRelease(e) {
    e.stopPropagation();
    if (dragging) {
      try {
        handle.releasePointerCapture(e.pointerId);
      } catch (e) {}
      (0, _jquery.default)(handle).removeClass("dragging");
      dragging = false;
    }
  }
  bar.className = "chickenpaint-scrollbar " + (vertical ? "chickenpaint-scrollbar-vertical" : "chickenpaint-scrollbar-horizontal");
  handle.className = "chickenpaint-scrollbar-handle";
  handle.setAttribute("touch-action", "none");
  handleInner.className = "chickenpaint-scrollbar-handle-inner";
  handle.appendChild(handleInner);
  bar.appendChild(handle);
  handle.addEventListener("pointerdown", onHandlePress);
  handle.addEventListener("pointermove", onHandleDrag);
  handle.addEventListener("pointerup", onHandleRelease);
  handle.addEventListener("click", onHandleClick);
  bar.addEventListener("click", onBarClick);
}
CPScrollbar.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPScrollbar.prototype.constructor = CPScrollbar;
module.exports = exports.default;

},{"jquery":296,"wolfy87-eventemitter":314}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPSendDialog;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPSendDialog(controller, parent, resourceSaver) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade chickenpaint-send-dialog\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\" data-stage=\"saving\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">".concat((0, _lang._)("Saving drawing..."), "</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p class=\"chickenpaint-saving-progress-message\">").concat((0, _lang._)("Preparing your drawing to be saved, please wait..."), "</p>\n                            <pre class=\"chickenpaint-saving-error-message pre-scrollable\"></pre>\n                            <div class=\"progress\">\n                                <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div>\n                            </div>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-light chickenpaint-send-cancel\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Cancel"), "</button>\n                        </div>\n                    </div>\n                    <div class=\"modal-content\" data-stage=\"success-not-previously-posted\" style=\"display:none\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">").concat((0, _lang._)("Drawing saved!"), "</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p>").concat((0, _lang._)("Your drawing has been saved, would you like to post it to the forum now?"), "</p>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary chickenpaint-post-drawing\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Yes, post it now"), "</button>\n                            <button type=\"button\" class=\"btn btn-light chickenpaint-continue-drawing\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("No, keep drawing"), "</button>\n                            <button type=\"button\" class=\"btn btn-light chickenpaint-exit\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("No, quit and I'll finish it later"), "</button>\n                        </div>\n                    </div>\n                    <div class=\"modal-content\" data-stage=\"success-already-posted\" style=\"display:none\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Drawing saved!</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p>").concat((0, _lang._)("Your drawing has been saved, would you like to view it on the forum now?"), "</p>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary chickenpaint-post-drawing\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("Yes, view the post"), "</button>\n                            <button type=\"button\" class=\"btn btn-light chickenpaint-continue-drawing\" data-bs-dismiss=\"modal\">").concat((0, _lang._)("No, keep drawing"), "</button>\n                        </div>\n                    </div>\n                    <div class=\"modal-content\" data-stage=\"success-redirect\" style=\"display:none\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Drawing saved!</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p>").concat((0, _lang._)("Your drawing has been saved, redirecting you to view your new post now..."), "</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ")),
    progressMessageElem = (0, _jquery.default)(".chickenpaint-saving-progress-message", dialog),
    progressError = (0, _jquery.default)(".chickenpaint-saving-error-message", dialog),
    progressElem = (0, _jquery.default)(".progress-bar", dialog),
    that = this;
  resourceSaver.on("savingProgress", function (progress, message) {
    progress *= 100;
    progressMessageElem.text(message);
    (0, _jquery.default)(progressElem).attr("aria-valuenow", progress).css("width", progress + "%");
  });
  resourceSaver.on("savingComplete", function () {
    (0, _jquery.default)(".modal-content[data-stage='saving']", dialog).hide();
    if (controller.isActionSupported("CPContinue")) {
      if (controller.isActionSupported("CPExit")) {
        (0, _jquery.default)(".modal-content[data-stage='success-not-previously-posted']", dialog).show();
      } else {
        (0, _jquery.default)(".modal-content[data-stage='success-already-posted']", dialog).show();
      }
    } else {
      (0, _jquery.default)(".modal-content[data-stage='success-redirect']", dialog).show();
    }
  });
  resourceSaver.on("savingFailure", function (serverMessage) {
    progressElem.addClass("progress-bar-danger");
    var errorMessage = (0, _lang._)("Sorry, your drawing could not be saved, please try again later.");
    if (serverMessage) {
      serverMessage = serverMessage.replace(/^CHIBIERROR\s*/, "");
      if (serverMessage.length > 0) {
        errorMessage += "<br><br>".concat((0, _lang._)("The error returned from the server was"), ":");
        progressError.text(serverMessage).show();
      }
      progressMessageElem.html(errorMessage);
    }
  });
  (0, _jquery.default)(".chickenpaint-post-drawing", dialog).on('click', function () {
    controller.actionPerformed({
      action: "CPPost"
    });
  });
  (0, _jquery.default)(".chickenpaint-exit", dialog).toggle(controller.isActionSupported("CPExit")).on('click', function () {
    alert("When you want to come back and finish your drawing, just click the 'new drawing' button again and " + "you can choose to continue this drawing.");
    controller.actionPerformed({
      action: "CPExit"
    });
  });
  (0, _jquery.default)(".chickenpaint-send-cancel", dialog).on('click', function () {
    resourceSaver.cancel();
    // dialog.modal('hide');
  });

  // Destroy the modal upon close
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog.remove();
  });
  dialog.appendTo(parent);

  // Bootstrap 5のModalを初期化
  var modal = new bootstrap.Modal(dialog[0]);
  this.show = function () {
    modal.show();
    that.emitEvent("shown");
  };
}
CPSendDialog.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPSendDialog.prototype.constructor = CPSendDialog;
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296,"wolfy87-eventemitter":314}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPShortcutsDialog;
var _jquery = _interopRequireDefault(require("jquery"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

// const macPlatform = /^Mac/i.test(navigator.platform);
var macPlatform = navigator.userAgent.toLowerCase().includes('mac os');
var Ctrl = macPlatform ? "⌘" : "Ctrl";
function CPShortcutsDialog(parent) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade chickenpaint-shortcuts-dialog\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">".concat((0, _lang._)("Shortcuts"), "</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p>\n                                ").concat((0, _lang._)("Many of the menu options and painting tools have keyboard shortcuts which are written next to them or appear when you hover."), "\n                            </p>\n                            <p>\n                                ").concat((0, _lang._)("Here are some other shortcuts which are not as obvious!"), "\n                            </p>\n                            <div class=\"chickenpaint-shortcuts-sections\">\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Color swatches palette"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Use as the drawing color"), "\n                                                </dd>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Right"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Remove or replace a color swatch"), "\n                                                </dd>\n                                             </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Line drawing mode"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                   ").concat((0, _lang._)("Snap line to nearest 45 degrees"), "\n                                                </dd>\n                                             </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Painting tools"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">1</span> - <span class=\"chickenpaint-shortcut-key\">9</span> , <span class=\"chickenpaint-shortcut-key\">0</span></span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Change brush opacity"), "\n                                                </dd>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">[</span> , <span class=\"chickenpaint-shortcut-key\">]</span></span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Change brush size"), "\n                                                </dd>\n                                            </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Brush palette"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Right"), "</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut-alternate\">").concat((0, _lang._)("or"), "</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Adjust brush sliders more precisely"), "\n                                                </dd>\n                                            </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Drawing canvas"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Middle"), "</span> <span class=\"chickenpaint-shortcut-alternate\">").concat((0, _lang._)("or"), "</span> <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Space</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Move the canvas around"), "\n                                                </dd>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">R</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Rotate the canvas"), "\n                                                </dd>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Right"), "</span> <span class=\"chickenpaint-shortcut-alternate\">").concat((0, _lang._)("or"), "</span> <span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Alt</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Sample the color under the cursor"), "\n                                                </dd>\n                                             </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                                <div class=\"chickenpaint-shortcuts-section\">\n                                    <h5>").concat((0, _lang._)("Layers palette"), "</h5>\n                                    <ul class=\"chickenpaint-shortcuts-list list-unstyled\">\n                                        <li>\n                                            <dl>\n                                                <dt>\n                                                    <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Double click"), "</span> <span class=\"chickenpaint-shortcut-alternate\">").concat((0, _lang._)("or"), "</span> <span class=\"chickenpaint-shortcut\"><span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Right"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Rename layer"), "\n                                                </dd>\n                                                <dt>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Toggle mask enable/disable"), "\n                                                </dd>\n                                                <dt>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Alt</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Toggle mask View"), "\n                                                </dd>\n\t\t\t\t\t\t\t\t\t\t\t\t<dt>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">").concat(Ctrl, "</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Apply layer mask"), "\n                                                </dd>\n\t\t\t\t\t\t\t\t\t\t\t\t<dt>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">Shift</span></span> +\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"chickenpaint-shortcut\"><span class=\"chickenpaint-shortcut-key\">").concat(Ctrl, "</span> + <span class=\"fa icon-mouse-pointer\"></span> ").concat((0, _lang._)("Left"), "</span>\n                                                </dt>\n                                                <dd>\n                                                    ").concat((0, _lang._)("Delete layer mask"), "\n                                                </dd>\n                                             </dl>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            "));

  // Destroy the modal upon close
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog.remove();
  });

  // Initialize the modal using Bootstrap 5 methods
  var modalInstance = new bootstrap.Modal(dialog[0]);
  parent.appendChild(dialog[0]);
  this.show = function () {
    modalInstance.show();
  };
}
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPSlider;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * A simple slider control.
 */
function CPSlider(minValue, maxValue, centerMode, expMode) {
  var defaultWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 150;
  var PRECISE_DRAG_SCALE = 4,
    EXP_MODE_FACTOR = 1.5,
    DRAG_MODE_IDLE = 0,
    DRAG_MODE_NORMAL = 1,
    DRAG_MODE_PRECISE = 2;
  var canvas = document.createElement("canvas"),
    canvasContext = canvas.getContext("2d"),
    valueRange = maxValue - minValue,
    dragMode = DRAG_MODE_IDLE,
    dragPreciseX,
    doneInitialPaint = false,
    that = this;
  this.value = undefined;

  /**
   * Either a string to draw on the slider, or a function(value) which receives the current value of the slider and
   * should return the string to be painted to the slider.
   *
   * @name CPSlider#title
   * @default ""
   */
  this.title = "";
  centerMode = centerMode || false;
  function paint() {
    var width = canvas.width || defaultWidth;
    var height = canvas.height;
    var title = typeof that.title === "string" ? (0, _lang._)(that.title) : that.title(that.value);
    var textX = 3 * window.devicePixelRatio;
    var textY = canvas.height * 0.75;
    if (centerMode) {
      canvasContext.save();
      canvasContext.fillStyle = 'white';
      canvasContext.fillRect(0, 0, width, height);
      canvasContext.fillStyle = 'black';
      canvasContext.fillText(title, textX, textY);
      canvasContext.beginPath();
      if (that.value >= valueRange / 2) {
        canvasContext.rect(width / 2, 0, (that.value - valueRange / 2) * width / valueRange, height);
      } else {
        canvasContext.rect(that.value * width / valueRange, 0, (valueRange / 2 - that.value) * width / valueRange, height);
      }
      canvasContext.fill();
      canvasContext.clip();
      canvasContext.fillStyle = 'white';
      canvasContext.fillText(title, textX, textY);
      canvasContext.restore();
    } else {
      var barProp = (that.value - minValue) / valueRange,
        barWidth;
      if (expMode) {
        barProp = Math.pow(barProp, 1 / EXP_MODE_FACTOR);
      }
      barWidth = barProp * width;
      canvasContext.save();
      canvasContext.save();
      canvasContext.fillStyle = 'black';
      canvasContext.beginPath();
      canvasContext.rect(0, 0, barWidth, height);
      canvasContext.fill();
      canvasContext.clip();
      canvasContext.fillStyle = 'white';
      canvasContext.fillText(title, textX, textY);

      // Remove the clip region
      canvasContext.restore();
      canvasContext.fillStyle = 'white';
      canvasContext.beginPath();
      canvasContext.rect(barWidth, 0, width, height);
      canvasContext.fill();
      canvasContext.clip();
      canvasContext.fillStyle = 'black';
      canvasContext.fillText(title, textX, textY);
      canvasContext.restore();
    }
  }
  function mouseSelect(e) {
    var width = (0, _jquery.default)(canvas).width(),
      left = (0, _jquery.default)(canvas).offset().left,
      proportion = (e.pageX - left) / width;
    if (expMode) {
      // Give the user finer control over the low values
      proportion = Math.pow(Math.max(proportion, 0.0), EXP_MODE_FACTOR);
    }
    that.setValue(proportion * valueRange + minValue);
  }
  function pointerDragged(e) {
    switch (dragMode) {
      case DRAG_MODE_NORMAL:
        return mouseSelect(e);
      case DRAG_MODE_PRECISE:
        var title = that.title();
        //ブラシサイズと不透明度以外は細やかなスライダーの動作をしない
        if (!(title.includes((0, _lang._)("Brush size")) || title.includes((0, _lang._)("Opacity")))) {
          return mouseSelect(e);
        }
        var diff = (e.pageX - dragPreciseX) / PRECISE_DRAG_SCALE;
        if (diff !== 0) {
          var unrounded = that.value + diff;
          var rounded = Math.floor(unrounded);
          that.setValue(rounded);

          /* Tweak the "old mouseX" position such that the fractional part of the value we were unable to set
          	* will be accumulated
          	*/
          dragPreciseX = e.pageX - (unrounded - rounded) * PRECISE_DRAG_SCALE;
        }
        break;
    }
  }
  canvas.addEventListener("pointerup", function (e) {
    if (dragMode === DRAG_MODE_IDLE) {
      canvas.releasePointerCapture(e.pointerId);
      return canvas.removeEventListener("pointermove", pointerDragged);
    }
    if (dragMode !== DRAG_MODE_IDLE) {
      switch (dragMode) {
        case DRAG_MODE_NORMAL:
          if (e.button === 0 && !e.shiftKey) {
            dragMode = DRAG_MODE_IDLE;
          }
          break;
        case DRAG_MODE_PRECISE:
          if (e.button == 2 || e.button === 0 && e.shiftKey) {
            dragMode = DRAG_MODE_IDLE;
          }
          break;
        default:
          return;
      }
    }
    canvas.releasePointerCapture(e.pointerId);
    return canvas.removeEventListener("pointermove", pointerDragged);
  });
  this.setValue = function (_value) {
    _value = ~~Math.max(minValue, Math.min(maxValue, _value));
    if (this.value != _value) {
      this.value = _value;

      // The event listeners might like to update our title property at this point to reflect the new value
      this.emitEvent('valueChange', [this.value]);
      if (doneInitialPaint) {
        paint();
      } else {
        // We don't bother to do our canvas dimensioning until we're supplied with an initial value
        doneInitialPaint = true;
        this.resize();
      }
    }
  };

  /**
   * Get the DOM element for the slider component.
   */
  this.getElement = function () {
    return canvas;
  };
  this.resize = function () {
    canvas.width = (0, _jquery.default)(canvas).width() || defaultWidth;
    canvas.height = (0, _jquery.default)(canvas).height() || 20;
    if (window.devicePixelRatio > 1) {
      // Assume our width is set to 100% or similar, so we only need to the fix the height
      canvas.style.height = canvas.height + 'px';
      canvas.width = canvas.width * window.devicePixelRatio;
      canvas.height = canvas.height * window.devicePixelRatio;
    }
    canvasContext.font = canvas.height * 0.47 + 'pt sans-serif';
    paint();
  };
  canvas.addEventListener("pointerdown", function (e) {
    if (dragMode === DRAG_MODE_IDLE) {
      if (e.button === 2 || e.button === 0 && e.shiftKey) {
        dragMode = DRAG_MODE_PRECISE;
        dragPreciseX = e.pageX;
      } else {
        dragMode = DRAG_MODE_NORMAL;
        mouseSelect(e);
      }
      canvas.setPointerCapture(e.pointerId);
      canvas.addEventListener("pointermove", pointerDragged);
    }
  });
  canvas.addEventListener("contextmenu", function (e) {
    e.preventDefault();
  });
  canvas.setAttribute("touch-action", "none");
  canvas.className = 'chickenpaint-slider';
  if (!("devicePixelRatio" in window)) {
    // Old browsers
    window.devicePixelRatio = 1.0;
  }
}
CPSlider.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
CPSlider.prototype.constructor = CPSlider;
module.exports = exports.default;

},{"../languages/lang.js":54,"jquery":296,"wolfy87-eventemitter":314}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPSplashScreen;
function CPSplashScreen(uiParent, loader, resourcesRoot) {
  var MAX_SMOOTHIE_OFFSET = 170;
  var canvas = document.createElement("canvas"),
    canvasContext = canvas.getContext("2d"),
    cup = new Image(),
    lid = new Image(),
    outlines = new Image(),
    text = new Image(),
    shading = new Image(),
    highlights = new Image(),
    smoothie = new Image(),
    images = [cup, lid, outlines, text, shading, highlights, smoothie],
    loadedCount = 0,
    cupComposite,
    smoothieComposite,
    cupCompositeContext,
    smoothieCompositeContext,
    progress = 0.0,
    message = "",
    fontHeight = 14;
  var imageRoot = resourcesRoot + "splash/";
  for (var i = 0; i < images.length; i++) {
    images[i].onload = function () {
      loadedCount++;
      if (loadedCount == images.length) {
        repaint();
      }
    };
  }
  cup.src = imageRoot + "cup.png";
  highlights.src = imageRoot + "highlights.png";
  lid.src = imageRoot + "lid.png";
  outlines.src = imageRoot + "lines.png";
  shading.src = imageRoot + "shading.png";
  smoothie.src = imageRoot + "smoothie.png";
  text.src = imageRoot + "text.png";
  function buildSmoothieComposite(imgWidth, imgHeight, progress) {
    if (!smoothieComposite) {
      smoothieComposite = document.createElement("canvas");
      smoothieComposite.width = imgWidth;
      smoothieComposite.height = imgHeight;
      smoothieCompositeContext = smoothieComposite.getContext("2d");
    }

    // First draw the smoothie in its mask position:
    smoothieCompositeContext.globalCompositeOperation = "copy";
    smoothieCompositeContext.drawImage(smoothie, 0, 0);

    // Now shift the smoothie downwards and use the original position as a mask
    smoothieCompositeContext.globalCompositeOperation = "source-in";
    smoothieCompositeContext.drawImage(smoothie, 0, Math.round(progress * MAX_SMOOTHIE_OFFSET));
  }
  function buildCupComposite(imgWidth, imgHeight, progress) {
    if (!cupComposite) {
      cupComposite = document.createElement("canvas");
      cupComposite.width = imgWidth;
      cupComposite.height = imgHeight;
      cupCompositeContext = cupComposite.getContext("2d");
    }
    cupCompositeContext.globalCompositeOperation = "copy";
    cupCompositeContext.drawImage(cup, 0, 0);
    buildSmoothieComposite(imgWidth, imgHeight, progress);
    cupCompositeContext.globalCompositeOperation = "source-over";
    cupCompositeContext.drawImage(smoothieComposite, 0, 0);
    cupCompositeContext.drawImage(lid, 0, 0);
    cupCompositeContext.globalCompositeOperation = "screen";
    cupCompositeContext.drawImage(highlights, 0, 0);
    cupCompositeContext.globalCompositeOperation = "multiply";
    cupCompositeContext.drawImage(shading, 0, 0);
    return cupComposite;
  }
  function repaint() {
    var centerX = canvas.width / 2,
      centerY = canvas.height / 2;
    canvasContext.fillStyle = 'white';
    canvasContext.fillRect(0, 0, canvas.width, canvas.height);
    if (loadedCount == images.length) {
      var imgWidth = text.width,
        imgHeight = text.height,
        left = Math.round(centerX - imgWidth / 2),
        top = Math.round(centerY - imgHeight / 2);
      canvasContext.drawImage(text, left, top);
      buildCupComposite(imgWidth, imgHeight, progress);

      //The whole cup composite is slightly transparent
      canvasContext.globalAlpha = 0.88;
      canvasContext.drawImage(cupComposite, left, top);
      canvasContext.globalAlpha = 1.0;
      canvasContext.drawImage(outlines, left, top);
      centerY = Math.round(centerY + imgHeight / 2 + 2);
    }
    if (message != "") {
      canvasContext.fillStyle = "black";
      var lines = message.split("\n");
      for (var i = 0; i < lines.length; i++) {
        var line = lines[i],
          lineWidth = canvasContext.measureText(line).width;
        centerY += fontHeight * 2;
        canvasContext.fillText(line, centerX - lineWidth / 2, centerY);
      }
    }
  }
  function resize() {
    // Use the canvas dimensions set by the CSS styles
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    canvasContext.font = fontHeight + "pt sans-serif";
    repaint();
  }
  loader.on("loadingProgress", function (_progress, _message) {
    progress = _progress;
    message = _message;
    repaint();
  });
  loader.on("loadingFailure", function (_message) {
    progress = 0;
    message = _message;
    repaint();
  });
  loader.on("loadingComplete", function () {
    window.removeEventListener("resize", resize);
    uiParent.removeChild(canvas);
  });
  window.addEventListener("resize", resize);
  canvas.className = "chickenpaint-splash-screen";
  uiParent.appendChild(canvas);
  resize();
}
module.exports = exports.default;

},{}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPStrokePalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPBrushInfo = _interopRequireDefault(require("../engine/CPBrushInfo.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPStrokePalette(cpController) {
  _CPPalette.default.call(this, cpController, "stroke", "Stroke");
  var that = this,
    buttons = [{
      className: "chickenpaint-tool-freehand",
      command: "CPFreeHand",
      toolTip: (0, _lang._)("Free-hand"),
      selected: true
    }, {
      className: "chickenpaint-tool-line",
      command: "CPLine",
      toolTip: (0, _lang._)("Straight line")
    }, {
      className: "chickenpaint-tool-bezier",
      command: "CPBezier",
      toolTip: (0, _lang._)("Bezier curve")
    }],
    body = that.getBodyElement();
  function buildButtons() {
    var listElem = document.createElement("ul");
    listElem.className = "chickenpaint-stroke-tools list-unstyled";
    for (var i in buttons) {
      var button = buttons[i],
        buttonElem = document.createElement("li"),
        buttonIcon = document.createElement("div");
      buttonElem.className = "chickenpaint-toolbar-button " + button.className;
      buttonElem.setAttribute("data-buttonIndex", i);
      buttonElem.setAttribute("title", button.toolTip);
      if (button.selected) {
        buttonElem.className = buttonElem.className + " selected";
      }
      buttonIcon.className = "chickenpaint-toolbar-button-icon";
      buttonElem.appendChild(buttonIcon);
      listElem.appendChild(buttonElem);
    }
    (0, _jquery.default)(listElem).on("click", "li", function (e) {
      var button = buttons[parseInt(this.getAttribute("data-buttonIndex"), 10)];
      (0, _jquery.default)("li", listElem).removeClass("selected");
      (0, _jquery.default)(this).addClass("selected");
      cpController.actionPerformed({
        action: button.command
      });
      // that.userIsDoneWithUs();
      //ボタンクリック時にパレットを折りたたむ機能を削除
    });

    body.appendChild(listElem);
  }
  buildButtons();
  cpController.on("toolChange", function (tool, toolInfo) {
    (0, _jquery.default)(".chickenpaint-tool-freehand", body).toggleClass("selected", toolInfo.strokeMode == _CPBrushInfo.default.STROKE_MODE_FREEHAND);
    (0, _jquery.default)(".chickenpaint-tool-line", body).toggleClass("selected", toolInfo.strokeMode == _CPBrushInfo.default.STROKE_MODE_LINE);
    (0, _jquery.default)(".chickenpaint-tool-bezier", body).toggleClass("selected", toolInfo.strokeMode == _CPBrushInfo.default.STROKE_MODE_BEZIER);
  });
}
CPStrokePalette.prototype = Object.create(_CPPalette.default.prototype);
CPStrokePalette.prototype.constructor = CPStrokePalette;
module.exports = exports.default;

},{"../engine/CPBrushInfo.js":8,"../languages/lang.js":54,"./CPPalette.js":39,"jquery":296}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPSwatchesPalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _fileSaver = _interopRequireDefault(require("file-saver"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPColor = _interopRequireDefault(require("../util/CPColor.js"));
var _AdobeColorTable = _interopRequireDefault(require("../util/AdobeColorTable.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function padLeft(string, padding, len) {
  while (string.length < len) {
    string = padding + string;
  }
  return string;
}
function fileAPIsSupported() {
  return window.File && window.FileReader && window.FileList && window.Blob;
}
function CPSwatchesPalette(controller) {
  _CPPalette.default.call(this, controller, "swatches", "Color swatches");
  var INIT_COLORS = [0xffffff, 0x000000, 0xff0000, 0x00ff00, 0x0000ff, 0xffff00],
    modified = false,
    swatchPanel = document.createElement("ul"),
    buttonPanel = document.createElement("div"),
    fileInput,
    that = this;
  function CPColorSwatch(color) {
    var wrapper = document.createElement("div"),
      swatchElem = document.createElement("a"),
      swatchMenu = document.createElement("ul"),
      mnuRemove = document.createElement("a"),
      mnuSetToCurrent = document.createElement("a"),
      that = this;
    this.getElement = function () {
      return wrapper;
    };
    this.setColor = function (color) {
      swatchElem.setAttribute("data-color", color);
      swatchElem.style.backgroundColor = '#' + padLeft("" + Number(color).toString(16), "0", 6);
    };
    this.setColor(color);
    swatchElem.href = "#";
    swatchElem.className = "chickenpaint-color-swatch dropdown-toggle";
    //"data-bs-toggle"に設定しない 
    // swatchElem.setAttribute("data-bs-toggle", "dropdown");

    mnuRemove.className = "dropdown-item";
    mnuRemove.href = "#";
    mnuRemove.textContent = (0, _lang._)("Remove");
    mnuRemove.addEventListener("click", function (e) {
      e.preventDefault();
      (0, _jquery.default)(wrapper).remove();
      modified = true;
    });
    mnuSetToCurrent.className = "dropdown-item";
    mnuSetToCurrent.href = "#";
    mnuSetToCurrent.textContent = (0, _lang._)("Replace with current color");
    mnuSetToCurrent.addEventListener("click", function (e) {
      e.preventDefault();
      that.setColor(controller.getCurColor().getRgb());
      modified = true;
    });
    swatchMenu.className = "dropdown-menu";
    var liRemove = document.createElement("li");
    var liSetToCurrent = document.createElement("li");
    liRemove.appendChild(mnuRemove); //liで囲う
    liSetToCurrent.appendChild(mnuSetToCurrent); //liで囲う
    swatchMenu.appendChild(liRemove);
    swatchMenu.appendChild(liSetToCurrent);
    wrapper.className = "chickenpaint-color-swatch-wrapper";
    wrapper.appendChild(swatchElem);
    wrapper.appendChild(swatchMenu);
  }
  function clearSwatches() {
    while (swatchPanel.lastChild) {
      swatchPanel.removeChild(swatchPanel.lastChild);
    }
  }
  function addSwatch(color) {
    var swatch = new CPColorSwatch(color);
    swatchPanel.appendChild(swatch.getElement());
  }

  /**
   * Returns an array of colors in RGB 32-bit integer format
   */
  this.getSwatches = function () {
    var swatches = (0, _jquery.default)(".chickenpaint-color-swatch", swatchPanel),
      colors = new Array(swatches.length);
    for (var i = 0; i < swatches.length; i++) {
      colors[i] = parseInt(swatches.get(i).getAttribute("data-color"), 10);
    }
    return colors;
  };
  this.setSwatches = function (swatches) {
    clearSwatches();
    for (var i = 0; i < swatches.length; i++) {
      addSwatch(swatches[i]);
    }
    modified = true;
  };
  this.isModified = function () {
    return modified;
  };
  function loadSwatches() {
    fileInput.onchange = function () {
      var fileList = this.files;
      if (fileList.length < 1) return;
      var file = fileList[0],
        reader = new FileReader();
      reader.onload = function () {
        var swatches = new _AdobeColorTable.default().read(this.result);
        if (swatches != null && swatches.length > 0) {
          that.setSwatches(swatches);
        } else {
          alert((0, _lang._)("The swatches could not be read, did you select an .aco file?"));
        }
      };
      reader.readAsArrayBuffer(file);
    };
    fileInput.click();
  }
  function saveSwatches() {
    var aco = new _AdobeColorTable.default().write(that.getSwatches()),
      blob = new Blob([aco], {
        type: "application/octet-stream"
      });
    _fileSaver.default.saveAs(blob, "oekakiswatches.aco");
  }
  function initSwatchPanel() {
    swatchPanel.className = "chickenpaint-color-swatches list-unstyled";
    for (var i = 0; i < INIT_COLORS.length; i++) {
      swatchPanel.appendChild(new CPColorSwatch(INIT_COLORS[i]).getElement());
    }
    swatchPanel.addEventListener("click", function (e) {
      var swatch = e.target;
      if (!/^<a data-color=/i.test(swatch.outerHTML) || !/chickenpaint-color-swatch/.test(swatch.className)) {
        return; //<a data-color=で始まらない場合もreturn
      }
      //"data-bs-toggle"に設定していなければ必要ないため、コメントアウト
      //コンテキストメニューを閉じる
      // let dropdown = new bootstrap.Dropdown($(swatch)); // Bootstrap 5: ドロップダウンを初期化
      // dropdown.hide();

      if (e.button == 0 /* Left */ && swatch.getAttribute("data-color") !== undefined) {
        controller.setCurColor(new _CPColor.default(parseInt(swatch.getAttribute("data-color"), 10)));
        e.stopPropagation();
        e.preventDefault();
        // that.userIsDoneWithUs();
        //ボタンクリック時にパレットを折りたたむ機能を削除
      }
    });

    swatchPanel.addEventListener("contextmenu", function (e) {
      var swatch = e.target;
      if (!/^<a data-color=/i.test(swatch.outerHTML) || !/chickenpaint-color-swatch/.test(swatch.className)) {
        return; //<a data-color=で始まらない場合もreturn
      }

      e.preventDefault();
      var dropdown = new bootstrap.Dropdown((0, _jquery.default)(swatch)); // Bootstrap 5: ドロップダウンを初期化
      dropdown.toggle();

      // ドロップダウンメニュー内のクリックを検出して、メニューを閉じる
      document.addEventListener("click", function onDocumentClick(event) {
        dropdown.hide();
        document.removeEventListener("click", onDocumentClick);
      });
    });
  }
  function createIcon(iconName) {
    var icon = document.createElement("span");
    icon.className = "fa icon-" + iconName;
    return icon;
  }
  function initButtonsPanel() {
    var btnSettings = document.createElement("button"),
      btnAdd = document.createElement("button"),
      settingsMenu = document.createElement("ul"),
      mnuSave = document.createElement("a"),
      mnuLoad = document.createElement("a");
    btnAdd.type = "button";
    btnAdd.title = (0, _lang._)("Add the current brush color as a new swatch");
    btnAdd.className = "btn chickenpaint-small-toolbar-button chickenpaint-color-swatch-add";
    btnAdd.appendChild(createIcon("plus"));
    btnSettings.type = "button";
    btnSettings.className = "btn dropdown-toggle chickenpaint-small-toolbar-button chickenpaint-color-swatch-settings";
    //"data-bs-toggle"に設定 bs5
    btnSettings.setAttribute("data-bs-toggle", "dropdown");
    btnSettings.appendChild(createIcon("cog"));
    mnuSave.className = "dropdown-item";
    mnuSave.href = "#";
    mnuSave.textContent = (0, _lang._)("Save swatches to your computer...");
    mnuSave.addEventListener("click", function (e) {
      e.preventDefault();
      saveSwatches();
    });
    mnuLoad.className = "dropdown-item";
    mnuLoad.href = "#";
    mnuLoad.textContent = (0, _lang._)("Load swatches from your computer...");
    mnuLoad.addEventListener("click", function (e) {
      e.preventDefault();
      loadSwatches();
    });
    settingsMenu.className = "dropdown-menu";
    var limnuSave = document.createElement("li");
    var limnuLoad = document.createElement("li");
    limnuSave.appendChild(mnuSave); //liで囲う
    limnuLoad.appendChild(mnuLoad); //liで囲う
    settingsMenu.appendChild(limnuSave);
    settingsMenu.appendChild(limnuLoad);
    var btnSettingsContainer = document.createElement("div");
    btnSettingsContainer.className = "btn-group";
    btnSettingsContainer.appendChild(btnSettings);
    btnSettingsContainer.appendChild(settingsMenu);
    btnAdd.addEventListener("click", function (e) {
      addSwatch(controller.getCurColor().getRgb());
      modified = true;
    });
    buttonPanel.className = 'chickenpaint-color-swatches-buttons';

    // Don't offer to load/save swatches if we don't have the file API needed for reading them
    if (fileAPIsSupported()) {
      fileInput = document.createElement("input");
      fileInput.type = "file";
      fileInput.multiple = false;
      fileInput.style.display = "none";
      buttonPanel.appendChild(btnSettingsContainer);
      buttonPanel.appendChild(fileInput);
    }
    buttonPanel.appendChild(btnAdd);
  }
  initSwatchPanel();
  this.getBodyElement().appendChild(swatchPanel);
  initButtonsPanel();
  this.getBodyElement().appendChild(buttonPanel);
}
CPSwatchesPalette.prototype = Object.create(_CPPalette.default.prototype);
CPSwatchesPalette.prototype.constructor = CPSwatchesPalette;
module.exports = exports.default;

},{"../languages/lang.js":54,"../util/AdobeColorTable.js":55,"../util/CPColor.js":58,"./CPPalette.js":39,"file-saver":295,"jquery":296}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPTabletDialog;
var _jquery = _interopRequireDefault(require("jquery"));
var _CPWacomTablet = _interopRequireDefault(require("../util/CPWacomTablet.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPTabletDialog(parent) {
  var dialog = (0, _jquery.default)("<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Drawing tablet support</h5>\n                            <button type=\"button\" class=\"btn btn-close\" data-bs-dismiss=\"modal\" aria-label=\"btn btn-close\">\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p class=\"chickenpaint-tablet-there-are-two-options\">\n                                There are two ways you could use your tablet's pen pressure support with ChickenPaint.\n                            </p>\n                            <div class=\"chickenpaint-tablet-support chickenpaint-wacom-support\">\n                                <h5>\n                                    Plugin for Wacom tablets\n                                </h5>\n                                <div class=\"chickenpaint-supported-browsers\">\n                                    <div class=\"chickenpaint-supported-browser\">\n                                        <span class=\"icon-firefox\"></span>\n                                        Firefox (32-bit only)\n                                    </div>\n                                    <div class=\"chickenpaint-supported-browser\">\n                                        <span class=\"icon-safari\"></span>\n                                        Safari\n                                    </div>\n                                        <div class=\"chickenpaint-supported-browser\">\n                                        <span class=\"icon-opera\"></span>\n                                        Opera\n                                    </div>\n                                </div>\n                                <p class=\"chickenpaint-not-installed\">\n                                    The plugin for Wacom tablets doesn't seem to be installed in your browser yet.\n                                </p>\n                                <p class=\"chickenpaint-not-installed\">\n                                    Please make sure that you've installed the latest drivers for your tablet from the \n                                    <a href=\"http://www.wacom.com/en-us/support/product-support/drivers\" target=\"_blank\">Wacom drivers page</a>,\n                                    then restart your browser.\n                                </p>\n                                <p class=\"chickenpaint-not-supported\">\n                                    Your browser doesn't support the Wacom tablet plugin, please \n                                    try one of the browsers listed above instead.\n                                </p>\n                                <p class=\"chickenpaint-supported alert alert-success\">\n                                    The Wacom tablet plugin is installed and working.\n                                </p>\n                            </div>\n                            <div class=\"chickenpaint-tablet-support chickenpaint-pointerevents-support\">\n                                <h5>\n                                    Built-in support for most tablets.\n                                    <small>macOS, Windows 10 or newer</small>\n                                </h5>\n                                <div class=\"chickenpaint-supported-browsers\">\n\t\t\t\t\t\t\t\t\t<div class=\"chickenpaint-supported-browser\">\n\t\t\t\t\t\t\t\t\t<span class=\"icon-chrome\"></span>\n\t\t\t\t\t\t\t\t\t\tChrome\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"chickenpaint-supported-browser\">\n                                        <span class=\"icon-edge\"></span>\n                                        Edge (Windows 10)\n                                    </div>\n                                    <div class=\"chickenpaint-supported-browser\">\n                                        <span class=\"icon-firefox\"></span>\n                                        Firefox (<a href=\"https://github.com/satopian/ChickenPaint_Be/blob/main/help/Firefox%20pressure%20support.md\" target=\"_blank\" rel=\"noopener\">help <i class=\"fa icon-external-link-alt\"></i></a>)\n                                    </div>\n                                </div>\n                                <p class=\"chickenpaint-not-supported\">\n                                    Your browser doesn't have built-in support for drawing tablets, please try\n                                    one of the other browsers listed above.\n                                </p>\n                                <p class=\"chickenpaint-supported alert alert-success\">\n                                    Your browser has built-in support for drawing tablets!\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n       ");
  var wacomSupportElem = (0, _jquery.default)(".chickenpaint-wacom-support", dialog),
    peSupportElem = (0, _jquery.default)(".chickenpaint-pointerevents-support", dialog),
    bothOptionsElem = (0, _jquery.default)(".chickenpaint-tablet-there-are-two-options", dialog),
    wacomPresent = _CPWacomTablet.default.getRef().isTabletPresent(),
    peSupported = !!window.hasNativePointerEvents;
  wacomSupportElem.toggleClass("supported", wacomPresent);
  if (wacomPresent) {
    // Don't bother displaying info about Pointer Events if we have the Wacom plugin installed
    peSupportElem.hide();
    bothOptionsElem.hide();
  } else {
    // Chrome has dropped NPAPI support, so the Wacom plugin cannot be installed
    if (/Chrome/i.test(navigator.userAgent) && !/OPR/.test(navigator.userAgent) || /iPad/.test(navigator.userAgent) || /iPhone/.test(navigator.userAgent)) {
      wacomSupportElem.addClass("not-supported");
    }

    // Don't bother showing the Wacom plugin details if this browser supports pointer events
    if (peSupported) {
      wacomSupportElem.hide();
      bothOptionsElem.hide();
    }
  }
  peSupportElem.toggleClass("supported", peSupported);
  peSupportElem.toggleClass("not-supported", !peSupported);

  // Destroy the modal upon close
  dialog[0].addEventListener('hidden.bs.modal', function (e) {
    dialog.remove();
  });

  // Initialize the modal using Bootstrap 5 methods
  var modalInstance = new bootstrap.Modal(dialog[0]);
  parent.appendChild(dialog[0]);

  // Show method
  this.show = function () {
    modalInstance.show();
  };
}
module.exports = exports.default;

},{"../util/CPWacomTablet.js":66,"jquery":296}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPTexturePalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
var _CPGreyBmp = _interopRequireDefault(require("../engine/CPGreyBmp.js"));
var _CPLookUpTable = _interopRequireDefault(require("../engine/CPLookUpTable.js"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _CPSlider = _interopRequireDefault(require("./CPSlider.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * @param {HTMLInputElement} checkbox - Must have a unique ID set
 * @param {string} title
 *
 * @returns {HTMLElement}
 */
function wrapBootstrapCheckbox(checkbox, title) {
  var div = document.createElement("div"),
    label = document.createElement("label");
  div.className = "form-check";
  checkbox.className = "form-check-input";
  label.className = "form-check-label";
  label.setAttribute("for", checkbox.id);
  label.appendChild(checkbox);
  label.appendChild(document.createTextNode(title));
  div.appendChild(checkbox);
  div.appendChild(label);
  return div;
}
function loadTextures(textureFilename, width, height, textureCount, then) {
  var img = new Image(),
    textures = [];
  img.onload = function () {
    var canvas = document.createElement("canvas"),
      canvasContext = canvas.getContext("2d", {
        willReadFrequently: true
      });
    canvas.width = img.width;
    canvas.height = img.height;
    for (var i = 0; i < textureCount; i++) {
      canvasContext.drawImage(img, 0, i * height, width, height, 0, 0, width, height);
      try {
        var imageData = canvasContext.getImageData(0, 0, width, height),
          texture = new _CPGreyBmp.default(width, height, 8);

        // Take just the red channel from the image to form the new grayscale texture
        for (var j = 0; j < width * height; j++) {
          texture.data[j] = imageData.data[j * 4];
        }
        textures.push(texture);
      } catch (e) {
        // Quietly ignore errors that occur while loading the image (e.g. cross-origin security failures)
        console.log(e);
      }
    }
    then(textures);
  };
  img.src = textureFilename;
}
function CPTexturePalette(controller) {
  _CPPalette.default.call(this, controller, "textures", "Textures");
  var TEXTURE_PREVIEW_SIZE = 64,
    TEXTURE_SWATCH_BUTTON_SIZE = 32,
    /**
     * @type {CPGreyBmp}
     */
    selectedTexture,
    /**
     * @type {CPGreyBmp}
     */
    processedTexture,
    mirror = false,
    inverse = false,
    brightness = 0.0,
    contrast = 0.0,
    optionsPanel,
    texturesPanel = document.createElement("div"),
    body = this.getBodyElement();

  /**
   * Add an array of textures to the global texture list, and add swatches for them to the UI.
   */
  function addTextures(newTextures) {
    for (var i = 0; i < newTextures.length; i++) {
      var texture = newTextures[i],
        button = new CPTextureSwatch(texture, TEXTURE_SWATCH_BUTTON_SIZE, TEXTURE_SWATCH_BUTTON_SIZE);
      button.on("click", function () {
        selectedTexture = this.texture;
        updateSelectedTexture();
      });
      texturesPanel.appendChild(button.getElement());
    }
  }

  /**
   * Generate and return an array of procedurally-generated textures
   * 
   * @returns CPGreyBmp[]
   */
  function makeProceduralTextures() {
    var result = [null];
    var texture = new _CPGreyBmp.default(2, 2, 8);
    texture.data[0] = 0xFF;
    texture.data[3] = 0xFF;
    result.push(texture);
    result.push(makeDotTexture(2));
    result.push(makeDotTexture(3));
    result.push(makeDotTexture(4));
    result.push(makeDotTexture(6));
    result.push(makeDotTexture(8));
    result.push(makeVertLinesTexture(1, 2));
    result.push(makeVertLinesTexture(2, 4));
    result.push(makeHorizLinesTexture(1, 2));
    result.push(makeHorizLinesTexture(2, 4));
    result.push(makeCheckerBoardTexture(2));
    result.push(makeCheckerBoardTexture(4));
    result.push(makeCheckerBoardTexture(8));
    result.push(makeCheckerBoardTexture(16));
    return result;
  }

  /**
   * @param size int
   * 
   * @returns CPGreyBmp
   */
  function makeDotTexture(size) {
    var texture = new _CPGreyBmp.default(size, size, 8);
    for (var i = 1; i < size * size; i++) {
      texture.data[i] = 0xFF;
    }
    return texture;
  }

  /**
   * Make a checkerboard texture of the given dimensions.
   * 
   * @param size int
   * 
   * @returns CPGreyBmp
   */
  function makeCheckerBoardTexture(size) {
    var textureSize = 2 * size,
      texture = new _CPGreyBmp.default(textureSize, textureSize, 8);
    for (var i = 0; i < textureSize; i++) {
      for (var j = 0; j < textureSize; j++) {
        texture.data[i + j * textureSize] = (~~(i / size) + ~~(j / size)) % 2 == 0 ? 0 : 0xFF;
      }
    }
    return texture;
  }

  /**
   * Make a texture consisting of a series of evenly-spaced vertical lines
   * 
   * @param lineSize int
   * @param size int
   * 
   * @returns CPGreyBmp
   */
  function makeVertLinesTexture(lineSize, size) {
    var texture = new _CPGreyBmp.default(size, size, 8);
    for (var i = 0; i < size * size; i++) {
      if (~~(i % size) >= lineSize) {
        texture.data[i] = 0xFF;
      }
    }
    return texture;
  }

  /**
   * Make a texture consisting of a series of evenly-spaced horizontal lines
   *
   * @param lineSize int
   * @param size int
   * 
   * @returns CPGreyBmp
   */
  function makeHorizLinesTexture(lineSize, size) {
    var texture = new _CPGreyBmp.default(size, size, 8);
    for (var i = 0; i < size * size; i++) {
      if (i / size >= lineSize) {
        texture.data[i] = 0xFF;
      }
    }
    return texture;
  }
  function updateSelectedTexture() {
    if (selectedTexture != null) {
      processedTexture = selectedTexture.clone();
      if (mirror) {
        processedTexture.mirrorHorizontally();
      }
      var lut = new _CPLookUpTable.default();
      lut.loadBrightnessContrast(brightness, contrast);
      if (inverse) {
        lut.invert();
      }
      processedTexture.applyLUT(lut);
    } else {
      processedTexture = null;
    }
    controller.getArtwork().setBrushTexture(processedTexture);
    if (optionsPanel != null) {
      optionsPanel.updateTexture();
    }
  }
  function CPTextureOptionsPanel() {
    var panel = document.createElement("div"),
      cbInverse = document.createElement("input"),
      cbMirror = document.createElement("input"),
      slBrightness = new _CPSlider.default(0, 200, true),
      slContrast = new _CPSlider.default(0, 200, true),
      sampleSwatch = new CPTextureSwatch(null, TEXTURE_PREVIEW_SIZE, TEXTURE_PREVIEW_SIZE),
      btnCustomize = document.createElement("button"),
      textureControlsPanel;
    // Bootstrap Popover インスタンス
    var bootstrapPopover = new bootstrap.Popover(btnCustomize, {
      html: true,
      content: function content() {
        return textureControlsPanel;
      },
      trigger: "manual",
      placement: "right",
      // ツールチップの位置を右に指定
      container: body
    });
    function updatePopoverControls() {
      cbInverse.checked = inverse;
      cbMirror.checked = mirror;
      slBrightness.setValue(brightness * 100 + 100);
      slContrast.setValue(contrast * 100 + 100);
    }
    function buildTextureControlsPanel() {
      var panel = document.createElement("div");
      panel.className = "chickenpaint-texture-controls";
      cbInverse.id = "chickenpaint-chk-texture-invert";
      cbInverse.type = "checkbox";
      cbInverse.addEventListener("click", function (e) {
        inverse = this.checked;
        updateSelectedTexture();
      });
      panel.appendChild(wrapBootstrapCheckbox(cbInverse, (0, _lang._)("Inverse")));
      cbMirror.id = "chickenpaint-chk-texture-mirror";
      cbMirror.type = "checkbox";
      cbMirror.addEventListener("click", function (e) {
        mirror = this.checked;
        updateSelectedTexture();
      });
      panel.appendChild(wrapBootstrapCheckbox(cbMirror, (0, _lang._)("Mirror")));
      slBrightness.title = function (value) {
        return (0, _lang._)("Brightness") + ": " + (value - 100) + "%";
      };
      slBrightness.on("valueChange", function (value) {
        brightness = (value - 100) / 100.0;
        updateSelectedTexture();
      });
      panel.appendChild(slBrightness.getElement());
      slContrast.title = function (value) {
        return (0, _lang._)("Contrast") + ": " + (value - 100) + "%";
      };
      slContrast.on("valueChange", function (value) {
        contrast = (value - 100) / 100;
        updateSelectedTexture();
      });
      panel.appendChild(slContrast.getElement());
      var okayButton = document.createElement("button"),
        resetButton = document.createElement("button");
      okayButton.textContent = "Ok";
      okayButton.className = "btn btn-primary btn-sm";
      okayButton.type = "button";
      okayButton.addEventListener("click", function (e) {
        bootstrapPopover.hide();
      });
      panel.appendChild(okayButton);
      panel.appendChild(document.createTextNode(" "));
      resetButton.textContent = "Reset";
      resetButton.className = "btn btn-secondary btn-sm";
      resetButton.type = "button";
      resetButton.addEventListener("click", function (e) {
        brightness = 0;
        contrast = 0;
        mirror = false;
        inverse = false;
        updatePopoverControls();
        updateSelectedTexture();
      });
      panel.appendChild(resetButton);
      updatePopoverControls();
      return panel;
    }

    // TODO use events instead
    this.updateTexture = function () {
      btnCustomize.disabled = processedTexture == null;
      sampleSwatch.setTexture(processedTexture);
    };
    this.getElement = function () {
      return panel;
    };
    panel.className = "chickenpaint-texture-options";
    panel.appendChild(sampleSwatch.getElement());
    btnCustomize.type = "button";
    btnCustomize.className = "btn btn-light btn-sm";
    btnCustomize.setAttribute("data-bs-toggle", "popover");
    btnCustomize.setAttribute("data-bs-placement", "right");
    btnCustomize.textContent = (0, _lang._)("Customize");
    textureControlsPanel = buildTextureControlsPanel();
    btnCustomize.addEventListener("click", function () {
      bootstrapPopover.toggle();
    });
    panel.appendChild(btnCustomize);
    this.updateTexture();
  }

  /**
      *
      * @param {CPGreyBmp} texture
      * @param {int} width
      * @param {int} height
      * @constructor
      */
  function CPTextureSwatch(texture, width, height) {
    var canvas = document.createElement("canvas"),
      canvasContext = canvas.getContext("2d"),
      that = this;

    /**
        * @param {CPGreyBmp} texture
        */
    this.setTexture = function (texture) {
      this.texture = texture;
      this.paint();
    };
    this.getElement = function () {
      return canvas;
    };
    this.paint = function () {
      if (this.texture != null) {
        canvasContext.fillStyle = canvasContext.createPattern(this.texture.getAsCanvas(), "repeat");
      } else {
        canvasContext.fillStyle = 'white';
      }
      canvasContext.fillRect(0, 0, canvas.width, canvas.height);
    };
    canvas.addEventListener("click", function () {
      that.emit("click");
    });
    canvas.width = width;
    canvas.height = height;
    this.setTexture(texture);
  }
  CPTextureSwatch.prototype = Object.create(_wolfy87Eventemitter.default.prototype);
  CPTextureSwatch.prototype.constructor = CPTextureSwatch;
  optionsPanel = new CPTextureOptionsPanel();
  body.appendChild(optionsPanel.getElement());
  texturesPanel.className = 'chickenpaint-texture-swatches';
  body.appendChild(texturesPanel);
  addTextures(makeProceduralTextures());
  loadTextures(controller.getResourcesRoot() + "gfx/textures32.png", 32, 32, 2, function (loadedTextures) {
    addTextures(loadedTextures);
  });
}
CPTexturePalette.prototype = Object.create(_CPPalette.default.prototype);
CPTexturePalette.prototype.constructor = CPTexturePalette;
module.exports = exports.default;

},{"../engine/CPGreyBmp.js":14,"../engine/CPLookUpTable.js":18,"../languages/lang.js":54,"./CPPalette.js":39,"./CPSlider.js":44,"jquery":296,"wolfy87-eventemitter":314}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPToolPalette;
var _jquery = _interopRequireDefault(require("jquery"));
var _keymaster = _interopRequireDefault(require("../../lib/keymaster.js"));
var _CPPalette = _interopRequireDefault(require("./CPPalette.js"));
var _ChickenPaint = _interopRequireDefault(require("../ChickenPaint.js"));
var _lang = require("../languages/lang.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPToolPalette(cpController) {
  _CPPalette.default.call(this, cpController, "tool", "Tools");
  var that = this,
    buttons = [{
      className: "chickenpaint-tool-rect-selection",
      command: "CPRectSelection",
      toolTip: "Marquee",
      shortcut: "m",
      mode: _ChickenPaint.default.M_RECT_SELECTION
    }, {
      className: "chickenpaint-tool-move",
      command: "CPMoveTool",
      toolTip: "Move tool",
      shortcut: "v",
      mode: _ChickenPaint.default.M_MOVE_TOOL
    }, {
      className: "chickenpaint-tool-flood-fill",
      command: "CPFloodFill",
      toolTip: "Flood fill",
      shortcut: "f",
      mode: _ChickenPaint.default.M_FLOODFILL
    }, {
      className: "chickenpaint-tool-gradient-fill",
      command: "CPGradientFill",
      toolTip: "Gradient fill",
      shortcut: "g",
      mode: _ChickenPaint.default.M_GRADIENTFILL
    }, {
      className: "chickenpaint-tool-color-picker",
      command: "CPColorPicker",
      toolTip: "Color picker",
      shortcut: "i",
      mode: _ChickenPaint.default.M_COLOR_PICKER
    }, {
      className: "chickenpaint-tool-blur",
      command: "CPBlur",
      toolTip: "Blur",
      shortcut: "u",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_BLUR
    }, {
      className: "chickenpaint-tool-pencil",
      command: "CPPencil",
      toolTip: "Pencil",
      shortcut: "n",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_PENCIL
    }, {
      className: "chickenpaint-tool-pen",
      command: "CPPen",
      toolTip: "Pen",
      selected: true,
      // TODO a better mechanism for the controller to let us know the initial tool
      shortcut: "b",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_PEN
    }, {
      className: "chickenpaint-tool-airbrush",
      command: "CPAirbrush",
      toolTip: "Airbrush",
      shortcut: "a",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_AIRBRUSH
    }, {
      className: "chickenpaint-tool-water",
      command: "CPWater",
      toolTip: "Waterpaint",
      shortcut: "w",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_WATER
    }, {
      className: "chickenpaint-tool-eraser",
      command: "CPEraser",
      toolTip: "Eraser",
      shortcut: "e",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_ERASER
    }, {
      className: "chickenpaint-tool-soft-eraser",
      command: "CPSoftEraser",
      toolTip: "Soft eraser",
      shortcut: "s",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_SOFTERASER
    }, {
      className: "chickenpaint-tool-smudge",
      command: "CPSmudge",
      toolTip: "Smudge",
      shortcut: "d",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_SMUDGE
    }, {
      className: "chickenpaint-tool-blender",
      command: "CPBlender",
      toolTip: "Blender",
      shortcut: "c",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_BLENDER
    }, {
      className: "chickenpaint-tool-dodge",
      command: "CPDodge",
      toolTip: "Dodge (tool)",
      shortcut: "o",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_DODGE
    }, {
      className: "chickenpaint-tool-burn",
      command: "CPBurn",
      toolTip: "Burn (tool)",
      shortcut: "p",
      mode: _ChickenPaint.default.M_DRAW,
      tool: _ChickenPaint.default.T_BURN
    }, {
      className: "chickenpaint-tool-rotate-canvas",
      command: "CPRotateCanvas",
      commandDoubleClick: "CPResetCanvasRotation",
      toolTip: "Rotate canvas",
      mode: _ChickenPaint.default.M_ROTATE_CANVAS
    }, {
      className: "chickenpaint-tool-pan-canvas",
      command: "CPPanCanvas",
      toolTip: "Grab canvas",
      mode: _ChickenPaint.default.M_PAN_CANVAS
    }],
    listElem = document.createElement("ul");
  function buttonClicked(e) {
    if (this.nodeName == "LI") {
      var button = buttons[parseInt(this.getAttribute("data-buttonIndex"), 10)];
      cpController.actionPerformed({
        action: button.command
      });
      // that.userIsDoneWithUs();
      //ボタンクリック時にパレットを折りたたむ機能を削除
    }
  }

  function buildButtons() {
    var body = that.getBodyElement();
    listElem.className = "chickenpaint-tools list-unstyled";
    for (var i in buttons) {
      (function (i) {
        var button = buttons[i],
          buttonElem = document.createElement("li"),
          buttonIcon = document.createElement("div");
        buttonElem.className = "chickenpaint-toolbar-button " + button.className;
        buttonElem.setAttribute("data-buttonIndex", i);
        buttonElem.setAttribute('data-mode', button.mode);
        if (button.tool !== undefined) {
          buttonElem.setAttribute('data-tool', button.tool);
        }
        buttonElem.title = (0, _lang._)(button.toolTip);
        if (button.shortcut) {
          buttonElem.title += " (" + button.shortcut.toUpperCase() + ")";
          (0, _keymaster.default)(button.shortcut, function () {
            buttonClicked.call(buttonElem);
            return false;
          });
        }
        if (button.selected) {
          buttonElem.className = buttonElem.className + " selected";
        }
        buttonIcon.className = "chickenpaint-toolbar-button-icon";
        buttonElem.appendChild(buttonIcon);
        listElem.appendChild(buttonElem);
      })(i);
    }
    (0, _jquery.default)(listElem).on("click", "li", buttonClicked).on("dblclick", "li", function (e) {
      var button = buttons[parseInt(this.getAttribute("data-buttonIndex"), 10)];
      if (button.commandDoubleClick) {
        cpController.actionPerformed({
          action: button.commandDoubleClick
        });
      }
    });
    body.appendChild(listElem);
  }
  cpController.on("modeChange", function (newMode) {
    var body = that.getBodyElement();
    (0, _jquery.default)("li", body).removeClass("selected");
    if (newMode == _ChickenPaint.default.M_DRAW) {
      (0, _jquery.default)("li[data-tool=" + cpController.getCurTool() + "]", body).addClass("selected");
    } else {
      (0, _jquery.default)("li[data-mode=" + newMode + "]", body).addClass("selected");
    }
  });
  cpController.on("toolChange", function (newTool) {
    var body = that.getBodyElement();
    if (cpController.getCurMode() == _ChickenPaint.default.M_DRAW) {
      (0, _jquery.default)("li", body).removeClass("selected");
      (0, _jquery.default)("li[data-tool=" + newTool + "]", body).addClass("selected");
    }
  });
  buildButtons();
}
CPToolPalette.prototype = Object.create(_CPPalette.default.prototype);
CPToolPalette.prototype.constructor = CPToolPalette;
module.exports = exports.default;

},{"../../lib/keymaster.js":68,"../ChickenPaint.js":1,"../languages/lang.js":54,"./CPPalette.js":39,"jquery":296}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _wolfy87Eventemitter = _interopRequireDefault(require("wolfy87-eventemitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DEFAULTS = {
    toolbarStyle: "new"
  },
  LOCAL_STORAGE_KEY_NAME = "chickenpaint-prefs";
var CPUserPreferences = exports.default = /*#__PURE__*/function (_EventEmitter) {
  _inherits(CPUserPreferences, _EventEmitter);
  var _super = _createSuper(CPUserPreferences);
  function CPUserPreferences() {
    var _this;
    _classCallCheck(this, CPUserPreferences);
    _this = _super.call(this);
    /**
     * Either "new" or "old"
     */
    _defineProperty(_assertThisInitialized(_this), "toolbarStyle", void 0);
    _this.setDefaults();
    return _this;
  }
  _createClass(CPUserPreferences, [{
    key: "setDefaults",
    value: function setDefaults() {
      for (var propertyName in DEFAULTS) {
        if (DEFAULTS.hasOwnProperty(propertyName)) {
          this.set(propertyName, DEFAULTS[propertyName]);
        }
      }
    }
  }, {
    key: "load",
    value: function load() {
      var parsed = {};
      try {
        parsed = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY_NAME));
      } catch (e) {
        console.error(e);
      }
      if (!parsed || _typeof(parsed) !== "object") {
        parsed = {};
      }
      for (var propertyName in DEFAULTS) {
        if (DEFAULTS.hasOwnProperty(propertyName)) {
          // Emit an event for every property even if we only load the default for this prop:
          try {
            this.set(propertyName, parsed.hasOwnProperty(propertyName) ? parsed[propertyName] : DEFAULTS[propertyName]);
          } catch (e) {
            console.error(e);
          }
        }
      }
    }
  }, {
    key: "save",
    value: function save() {
      try {
        var differsFromDefaults = false;
        for (var propertyName in DEFAULTS) {
          if (DEFAULTS.hasOwnProperty(propertyName)) {
            if (this[propertyName] != DEFAULTS[propertyName]) {
              differsFromDefaults = true;
              break;
            }
          }
        }
        if (differsFromDefaults) {
          localStorage.setItem(LOCAL_STORAGE_KEY_NAME, JSON.stringify({
            toolbarStyle: this.toolbarStyle
          }));
        } else {
          localStorage.removeItem(LOCAL_STORAGE_KEY_NAME);
        }
      } catch (e) {
        // Can't do anything about it if user has LocalStorage disabled
        console.error(e);
      }
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this[name] = value;
      this.emitEvent(name, [value]);
    }
  }, {
    key: "get",
    value: function get(name) {
      return this[name];
    }
  }]);
  return CPUserPreferences;
}(_wolfy87Eventemitter.default);
module.exports = exports.default;

},{"wolfy87-eventemitter":314}],52:[function(require,module,exports){
module.exports={
  "Dodge (tool)": "Dodge",
  "Burn (tool)": "Burn",
  "Color (picker)": "Color",
  
  "Color swatches (shorter)": "Swatches"
}
},{}],53:[function(require,module,exports){
module.exports={
  "File": "ファイル",
    "Save to my computer": "PCに保存",
    "Post Oekaki": "お絵かきを投稿",

  "Edit": "編集",
    "Undo": "取り消し",
    "Redo": "やり直し",
    "Cut": "切り取り",
    "Copy": "コピー",
    "Clear history": "履歴消去",
    "Copy merged": "結合コピー",
    "Paste": "貼り付け",
    "Select all": "すべて選択",
    "Deselect": "選択解除",
    "Transform": "変形",
  
  "Layers": "レイヤー",
    "Duplicate": "複製",
    "Merge down": "下のレイヤーと結合",
    "Merge group": "グループ結合",
    "Merge all layers":  "全レイヤー結合",
    "Add layer mask": "レイヤーマスク追加",
    "Delete mask": "レイヤーマスク削除",
    "Delete layer mask": "レイヤーマスク削除",
    "Apply mask": "レイヤーマスク適用",
    "Apply layer mask": "レイヤーマスク適用",
    "Disable mask": "レイヤーマスク無効化",
    "Enable mask": "レイヤーマスク有効化",
    "Clip to the layer below": "下のレイヤーでクリッピング",
    "Unclip from the layer below" : "クリッピング解除",    

  "Effects": "効果",
    "Clear": "消去",
    "Fill": "塗り潰し",
    "Flip horizontal": "左右反転",
    "Flip vertical": "上下反転",
    "Invert": "ネガポジ反転",
    "Box blur...": "ぼかし",
    "Box blur": "ぼかし",
    "Blur amount (pixels)": "ぼかし量(ピクセル単位)",
    "Iterations (1-8, larger gives smoother blur)": "反復(1-8,大きいほどぼかしが滑らか)",
    "Monochromatic noise": "単色ノイズ",
    "Color noise": "カラーノイズ",

  "View": "表示",
    "Full-screen mode": "フルスクリーンモード",
    "Zoom in": "拡大",
    "Zoom out": "縮小",
    "Zoom 100%": "100%",
    "Smooth-out zoomed canvas":  "ズームをなめらかに表示する",
    "Show grid": "グリッドを表示",
    "Grid options...": "グリッドの設定",
  
  "Palettes": "パレット",
    "Rearrange":  "初期化",
    "Toggle palettes":  "表示非表示切り替え",
    "Use old icons": "古いアイコン",
  
    "Show tool options": "ツールオプション",
    "Show color": "カラー",
    "Show layers":  "レイヤー",
    "Show misc": "操作",
    "Show stroke": "ストローク",
    "Show swatches": "カラーセット",
    "Show textures": "テクスチャ",
    "Show tools": "ツール",
  
  "Help": "ヘルプ",
    "Tablet support":  "タブレットサポート",
    "Shortcuts": "ショートカット",
    "About": "ChickenPaint Beについて",
  
	"Removes all undo/redo information to regain memory": "履歴をクリアしてメモリを開放します",
	"Clears the selected area":	"消去",
	"Invert the image colors": "ネガポジ反転",
	"Blur effect": "ぼかしフィルタ",
	"Fills the selection with noise": "単色ノイズで塗り潰し",
	"Fills the selection with colored noise": "カラーノイズで塗り潰し",
	"Linear interpolation is used to give a smoothed looked to the picture when zoomed in":
	"画像の拡大時に補完して滑らかに表示します",
	"Rearrange the palette windows": "パレットを再配置",
	"Hides or shows all palettes": "パレットの表示/非表示",

	"You're about to clear the current Undo/Redo history.\nThis operation cannot be undone, are you sure you want to do that?":"アンドゥ・リドゥの履歴を消去しようとしています。\nこの操作は元に戻すことができません。本当に実行しますか?",

"Misc": "操作",
  
  "Round Pixelated": "円ピクセル",
  "Round Hard Edge": "円ハードエッジ",
  "Round Soft": "円ソフト",
  "Square Pixelated": "角ピクセル",
  "Square Hard Edge": "角ハードエッジ",

  "Color (picker)": "カラー",
  
  "Tool options": "ツールオプション",
    "Brush size": "ブラシサイズ",
    "Opacity": "不透明度",
    "Color": "色補充", 
    "Blend": "混色",
    "Spacing": "間隔",
    "Scattering": "散乱",
    "Smoothing": "手ぶれ補正",
  
  "Color swatches": "カラーセット",
  "Color swatches (shorter)": "カラーセット",
    "Remove": "削除",
    "Replace with current color": "選択中の色に置き換え",
    "Save swatches to your computer...": "カラーセットをPCに保存",
    "Load swatches from your computer...": "カラーセットをPCから読み込み",
    "Add the current brush color as a new swatch": "選択中の色を追加",

  "Sample all layers": "全レイヤー混合",
  "Lock transparency": "透明部分を保護",
  
  "Textures": "テクスチャ",
    "Customize": "カスタマイズ",
    "Inverse": "ネガポジ反転",
    "Mirror": "左右反転",
    "Brightness": "輝度",
    "Contrast": "コントラスト",
    "Reset": "リセット",
  
	"Layer blending mode": "合成モード",
    "Normal": "通常",
    "Multiply": "乗算",
    "Add": "加算",
    "Screen": "スクリーン",
    "Lighten": "比較(明)",
    "Darken": "比較(暗)",
    "Subtract": "減算",
    "Dodge": "覆い焼き",
    "Burn": "焼き込み",
    "Overlay": "オーバーレイ",
    "Hard Light": "ハードライト",
    "Soft Light": "ソフトライト",
    "Vivid Light": "ビビッドライト",
    "Linear Light": "リニアライト",
    "Pin Light": "ピンライト",
    "Passthrough": "通過",
    
  "Stroke": "ストローク",
    "Free-hand": "フリーハンド",
    "Straight line": "直線",
    "Bezier curve": "Bz（ベジェ）曲線",
  
  "Tools": "ツール",
    "Marquee": "選択範囲",
    "Move tool": "移動",
    "Flood fill": "塗り潰し",
    "Gradient fill": "グラデーション",
    "Color picker": "スポイト",
    "Rotate canvas":  "キャンバスの回転",
    "Grab canvas": "キャンバスの位置",
    "Pencil": "鉛筆",
    "Pen": "ペン",
    "Airbrush": "エアブラシ",
    "Waterpaint": "水彩",
    "Eraser": "消しゴム",
    "Soft eraser": "薄消し",
    "Smudge": "指先",
    "Blender" : "混色",
    "Dodge (tool)": "覆い焼き",
    "Burn (tool)": "焼き込み",
    "Blur": "ぼかし",

  "Grid options": "グリッドの設定",
    "Grid size": "グリッドサイズ",
  
  "Rename...": "名前を変更",
  "Add layer": "新規レイヤー",
  "Delete layer": "レイヤー削除",
  "Add group": "新規グループ",
  "Delete group": "グループ削除",
  "Add mask": "レイヤーマスク追加",
  
  "Gradient": "グラデーション作成",
  "Transform style": "変形スタイル", 
  "Apply transform": "変形確定",
  "Complete transform": "変形を完了",
  "Undo transform": "取り消し",
  "You need to finish transforming this layer before you can do that. What would you like to do with the transform?":
   "続行するために変形を完了します。",
  "Smooth": "スムーズ",
  "Sharp": "シャープ",
  "Opacity: ":"不透明度:",

  "Please enter a color in hex format": "16進形式で色を入力してください（#xxxxxxの形）",
  
  "Cancel": "キャンセル",
  "Ok": "OK",
  "Okay": "OK",
  "OK": "OK",

  "Whoops! This layer is currently hidden": "非表示レイヤーです。",
  "Whoops! This layer's opacity is currently 0%": "レイヤーの不透明度が0%です",
  "Whoops! You can't draw on a group": "グループフォルダには描けません",
  "Whoops! All of the selected pixels are transparent!": "レイヤーが空です",
 
  "Image": "画像",
  "Layer mask": "レイヤーマスク",

  "Sorry, you can't remove the last remaining layer in the drawing.": "最後の1つなので削除できません。",
 
  "Are you sure you want to send your drawing to the server and finish drawing now?": "お絵かきをサーバーに送信します。終了してもよろしいですか？",
  "Your drawing has unsaved changes! Are you sure to want to navigate away?": "お絵かきに未保存の変更があります。終了してもよろしいですか？",


"Many of the menu options and painting tools have keyboard shortcuts which are written next to them or appear when you hover.":
 "利用可能なキーボードショートカットのいくつかはメニューの横やツールチップに表示されています。",

"Here are some other shortcuts which are not as obvious!": "この一覧はそれ以外のショートカットをまとめたものです。",

"Right" : "右",
"Left" : "左",
"Middle": "中",
"or": "または",
"Double click": "ダブルクリック",

"Color swatches palette": "カラーセット",
"Use as the drawing color": "パレットの色を取得",
"Remove or replace a color swatch": "パレットの変更･削除",

"Line drawing mode": "直線モード",
"Snap line to nearest 45 degrees": "45°単位でスナップ",

"Painting tools": "ツール",
"Change brush opacity": "ブラシの不透明度",
"Change brush size": "ブラシサイズ",

"Brush palette": "ブラシパレット",
"Adjust brush sliders more precisely": "ブラシスライダーをより細かく調整",

"Drawing canvas": "キャンバス",

"Move the canvas around": "キャンバスを移動",
"Rotate the canvas": "キャンバスの回転",

"Sample the color under the cursor": "キャンバスの色をスポイト",
"Layers palette": "レイヤーパレット",
"Rename layer": "レイヤー名変更",
"Toggle mask enable/disable": "マスクの有効/無効切り替え",
"Toggle mask View":"マスクの表示/非表示切り替え",


  "Save Oekaki": "保存",
  
  "Saving drawing...": "お絵かきを保存中…",
  "Preparing your drawing to be saved, please wait...": "お絵かきを保存する準備をしています。しばらくお待ちください…",
  "Drawing saved!": "お絵かきを保存しました！",

  "Your drawing has been saved, would you like to post it to the forum now?": "お絵かきが保存されました。フォーラムへ投稿しますか？",
  "Yes, post it now": "はい、投稿します",
  "No, keep drawing": "まだ描きます",
  "No, quit and I'll finish it later": "アプリを終了して続きを後で描く",

  "Your drawing has been saved, would you like to view it on the forum now?": "お絵かきが保存されました。フォーラムへ投稿しますか？",
  "Yes, view the post": "はい、投稿します。",

  "Your drawing has been saved, redirecting you to view your new post now...": "お絵かきが保存されました。投稿先に移動します。",

  "Sorry, your drawing could not be saved, please try again later.": "お絵かきが保存できませんでした。再度投稿してみてください。",

  "The error returned from the server was": "サーバから返って来たエラー"
}

},{}],54:[function(require,module,exports){
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._ = _;
exports.currentLanguage = currentLanguage;
exports.guessLanguage = guessLanguage;
exports.setLanguage = setLanguage;
var en = _interopRequireWildcard(require("./en.json"));
var ja = _interopRequireWildcard(require("./ja.json"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var languages = {
  ja: ja,
  en: en
};
var currentLang = en,
  currentLangName = "en";
function setLanguage(languageCode) {
  //取得した言語がja-jpなら、jaのみにする
  languageCode = languageCode.split(/[-_]/, 1)[0].toLowerCase();
  if (languageCode in languages) {
    currentLang = languages[languageCode];
    currentLangName = languageCode;
  } else {
    currentLang = en;
    currentLangName = "en";
  }
}
function currentLanguage() {
  return currentLangName;
}
function guessLanguage() {
  try {
    if (typeof navigator !== "undefined") {
      var navLanguages = navigator.languages;
      if (!Array.isArray(navLanguages)) {
        navLanguages = [navLanguages];
      }
      var _iterator = _createForOfIteratorHelper(navLanguages),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var language = _step.value;
          var matches = /^(..)([-_].+)?$/.exec(language);
          if (matches) {
            matches[1] = matches[1].toLowerCase();
            if (matches[1] in languages) {
              setLanguage(language);
              return;
            }
            if (matches[1] === "en") {
              setLanguage("en");
              return;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  } catch (e) {
    // We don't care about failures here because we're only doing this as a best-effort anyway
    console.error(e);
  }
}
function _(originalText) {
  if (originalText in currentLang) {
    return currentLang[originalText];
  }
  return originalText;
}

},{"./en.json":52,"./ja.json":53}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AdobeColorTable;
var _ArrayDataStream = _interopRequireDefault(require("./ArrayDataStream.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* 
 * By Nicholas Sherlock <n.sherlock@gmail.com>
 * 
 * Released under the WTFPLv2 https://en.wikipedia.org/wiki/WTFPL
 */

var ACO_COLORSPACE_RGB = 0,
  ACO_COLORSPACE_HSB = 1,
  ACO_COLORSPACE_CMYK = 2,
  ACO_COLORSPACE_LAB = 7,
  ACO_COLORSPACE_GRAYSCALE = 8;
function AdobeColorTable() {}

/**
 * Read an .aco (Adobe COlor) swatches file and return an array of RGB colors.
 * 
 * Supports version 1 palettes, only RGB format.
 * 
 * @param {Uint8Array} input - The .aco file contents
 * @return {?Object[]} An array of colours, or null if the file was not supported.
 */
AdobeColorTable.prototype.read = function (input) {
  if (input == null) {
    return null;
  }
  var stream = new _ArrayDataStream.default(new Uint8Array(input)),
    version,
    count,
    result = [];
  version = stream.readU16BE();
  if (version != 1) {
    return null;
  }
  count = stream.readU16BE();
  for (var i = 0; i < count; i++) {
    var colorSpace = stream.readU16BE();
    if (colorSpace != ACO_COLORSPACE_RGB) {
      continue; // Drop unsupported colours silently
    }

    // Scale back down from 16-bit to 8-bit
    var r = stream.readU16BE() * 255 / 65535,
      g = stream.readU16BE() * 255 / 65535,
      b = stream.readU16BE() * 255 / 65535;
    stream.readU16BE(); // third value unused

    result.push(r << 16 | g << 8 | b);
  }
  return result;
};

/**
 * Write an .aco (Adobe COlor) swatches file of the given array of RGB colours (colors are integers with the
 * blue channel in the least-significant position).
 */
AdobeColorTable.prototype.write = function (colours) {
  var buffer = new Uint8Array(2 * 2 + colours.length * 10),
    stream = new _ArrayDataStream.default(buffer);
  stream.writeU16BE(1); // Version 1
  stream.writeU16BE(colours.length); // Number of colours

  for (var i = 0; i < colours.length; i++) {
    var colour = colours[i];
    stream.writeU16BE(ACO_COLORSPACE_RGB);

    // Scale up colours to 16-bits (65535/255 = 257)
    stream.writeU16BE((colour >> 16 & 0xFF) * 257);
    stream.writeU16BE((colour >> 8 & 0xFF) * 257);
    stream.writeU16BE((colour & 0xFF) * 257);
    stream.writeU16BE(0);
  }
  return stream.getAsDataArray();
};
module.exports = exports.default;

},{"./ArrayDataStream.js":56}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ArrayDataStream;
/**
 * A tool for presenting a Uint8Array as a stream for reading and writing some simple data types.
 * 
 * By Nicholas Sherlock <n.sherlock@gmail.com> 2016, released under the WTFPL license.
 */

var EOF = -1;
function signExtend16Bit(word) {
  //If sign bit is set, fill the top bits with 1s to sign-extend
  return word & 0x8000 ? word | 0xFFFF0000 : word;
}
function signExtend8Bit(byte) {
  //If sign bit is set, fill the top bits with 1s to sign-extend
  return byte & 0x80 ? byte | 0xFFFFFF00 : byte;
}

/**
 * Create a stream on existing array of unsigned byte data (i.e. hopefully Uint8Array).
 * 
 * @param {Uint8Array} data - Array to stream data from
 * @param {int=} start - The index of the byte in the array that will be read first, or leave undefined to begin at the
 *              beginning of the array
 * @param {int=} end - The index of the end of the stream, or leave undefined to use the end of the array as the end of
 *            the stream.
 */
function ArrayDataStream(data, start, end) {
  this.data = data;
  this.eof = false;
  this.start = start === undefined ? 0 : start;
  this.end = end === undefined ? data.length : end;
  this.pos = this.start;
}
;

/**
 * Read a single byte from the stream and turn it into a JavaScript string (assuming ASCII).
 * 
 * @returns {String|number} String containing one character, or EOF if the end of file was reached (eof flag
 * is set).
 */
ArrayDataStream.prototype.readChar = function () {
  if (this.pos < this.end) {
    return String.fromCharCode(this.data[this.pos++]);
  }
  this.eof = true;
  return EOF;
};

/**
 * Read one unsigned byte from the stream
 * 
 * @returns {number} Unsigned byte, or EOF if the end of file was reached (eof flag is set).
 */
ArrayDataStream.prototype.readByte = function () {
  if (this.pos < this.end) {
    return this.data[this.pos++];
  }
  this.eof = true;
  return EOF;
};

//Synonym:
ArrayDataStream.prototype.readU8 = ArrayDataStream.prototype.readByte;
ArrayDataStream.prototype.readS8 = function () {
  return signExtend8Bit(this.readByte());
};
ArrayDataStream.prototype.unreadChar = function (c) {
  this.pos--;
};
ArrayDataStream.prototype.peekChar = function () {
  if (this.pos < this.end) {
    return String.fromCharCode(this.data[this.pos]);
  }
  this.eof = true;
  return EOF;
};
ArrayDataStream.prototype.readString = function (length) {
  var chars = new Array(length),
    i;
  for (i = 0; i < length; i++) {
    chars[i] = this.readChar();
  }
  return chars.join("");
};
ArrayDataStream.prototype.readS16 = function () {
  var b1 = this.readByte(),
    b2 = this.readByte();
  return signExtend16Bit(b1 << 8 | b2);
};
ArrayDataStream.prototype.readU16BE = function () {
  var b1 = this.readByte(),
    b2 = this.readByte();
  return b1 << 8 | b2;
};
ArrayDataStream.prototype.readU16LE = function () {
  var b1 = this.readByte(),
    b2 = this.readByte();
  return b2 << 8 | b1;
};
ArrayDataStream.prototype.readU32BE = function () {
  var b1 = this.readByte(),
    b2 = this.readByte(),
    b3 = this.readByte(),
    b4 = this.readByte();
  return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
};
ArrayDataStream.prototype.readU32LE = function () {
  var b1 = this.readByte(),
    b2 = this.readByte(),
    b3 = this.readByte(),
    b4 = this.readByte();
  return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
};
ArrayDataStream.prototype.readBytes = function (count) {
  var result = this.data.subarray(this.pos, this.pos + count);
  this.pos += count;
  if (this.pos > this.end) {
    this.eof = true;
  }
  return result;
};
ArrayDataStream.prototype.skip = function (numBytes) {
  this.pos += numBytes;
  if (this.pos > this.end) {
    this.eof = true;
  }
};
ArrayDataStream.prototype.seek = function (offset) {
  this.pos = offset;
};
ArrayDataStream.prototype.writeBytes = function (arr) {
  for (var i = 0; i < arr.length; i++) {
    this.data[this.pos++] = arr[i];
  }
};
ArrayDataStream.prototype.writeByte = function (b) {
  this.data[this.pos++] = b;
};

//Synonym:
ArrayDataStream.prototype.writeU8 = ArrayDataStream.prototype.writeByte;
ArrayDataStream.prototype.writeU16LE = function (u) {
  this.data[this.pos++] = u;
  this.data[this.pos++] = u >> 8;
};
ArrayDataStream.prototype.writeU16BE = function (u) {
  this.data[this.pos++] = u >> 8;
  this.data[this.pos++] = u;
};
ArrayDataStream.prototype.writeU32BE = function (u) {
  this.data[this.pos++] = u >> 24;
  this.data[this.pos++] = u >> 16;
  this.data[this.pos++] = u >> 8;
  this.data[this.pos++] = u;
};
ArrayDataStream.prototype.writeU32LE = function (u) {
  this.data[this.pos++] = u;
  this.data[this.pos++] = u >> 8;
  this.data[this.pos++] = u >> 16;
  this.data[this.pos++] = u >> 24;
};
ArrayDataStream.prototype.writeDoubleBE = function (d) {
  var bytes = new Uint8Array(new Float64Array([d]).buffer);
  for (var i = bytes.length - 1; i >= 0; i--) {
    this.writeByte(bytes[i]);
  }
};
ArrayDataStream.prototype.writeFloatBE = function (d) {
  var bytes = new Uint8Array(new Float32Array([d]).buffer);
  for (var i = bytes.length - 1; i >= 0; i--) {
    this.writeByte(bytes[i]);
  }
};

/**
 * Write an ASCII string to the stream
 */
ArrayDataStream.prototype.writeString = function (s) {
  for (var i = 0; i < s.length; i++) {
    this.data[this.pos++] = s.charCodeAt(i);
  }
};

/**
 * Write the given unsigned 32-bit integer to the stream in big-endian order using the given byte width.
 * No error checking is performed to ensure that the supplied width is correct for the integer.
 * 
 * Omit the width parameter to have it determined automatically for you.
 * 
 * @param u Unsigned integer to be written
 * @param width Number of bytes to write to the stream
 */
ArrayDataStream.prototype.writeUnsignedIntBE = function (u, width) {
  if (width === undefined) {
    width = this.measureUnsignedInt(u);
  }

  // Each case falls through:
  //noinspection FallThroughInSwitchStatementJS
  switch (width) {
    case 5:
      this.writeU8(Math.floor(u / 4294967296));
    // Need to use division to access >32 bits of floating point var
    case 4:
      this.writeU8(u >> 24);
    case 3:
      this.writeU8(u >> 16);
    case 2:
      this.writeU8(u >> 8);
    case 1:
      this.writeU8(u);
      break;
    default:
      throw "Bad UINT size " + width;
  }
};

/**
 * Return the number of bytes needed to hold the non-zero bits of the given unsigned integer.
 */
ArrayDataStream.prototype.measureUnsignedInt = function (val) {
  // Force to 32-bit unsigned integer
  if (val < 1 << 8) {
    return 1;
  } else if (val < 1 << 16) {
    return 2;
  } else if (val < 1 << 24) {
    return 3;
  } else if (val < 4294967296) {
    return 4;
  } else {
    return 5;
  }
};

/**
 * Return a view on the portion of the buffer from the beginning to the current seek position as a Uint8Array.
 */
ArrayDataStream.prototype.getAsDataArray = function () {
  if (this.pos < this.data.byteLength) {
    return this.data.subarray(0, this.pos);
  } else if (this.pos == this.data.byteLength) {
    return this.data;
  } else {
    throw "ArrayDataStream's pos lies beyond end of buffer";
    // Chance is pretty good that you overflowed the end of the buffer during writing and your file is trash 
  }
};

ArrayDataStream.prototype.EOF = EOF;
module.exports = exports.default;

},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPBezier;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPBezier() {
  var _this = this;
  // How to use this class:
  //
  // 1 - set the 4 points coordinates (x0-3, y0-3)
  // two options:
  // 2a - call init() with desired dt then read the current coordinate (Bx, By) and use nextPoint() to compute the
  // next point
  // 2b - use one of the "compute" methods to compute the values for the whole curve in one step

  // The 4 points coordinates
  this.x0 = this.y0 = this.x1 = this.y1 = this.x2 = this.y2 = this.x3 = this.y3 = 0.0;

  // used to compute the Bezier curve with the forward differences method
  var Bx, dBx, ddBx, dddBx, By, dBy, ddBy, dddBy;
  var init = function init(dt) {
    // Implements a fast degree-3 Bezier curve using the forward differences method
    //
    // Reference for this algorithm:
    // "Curves and Surfaces for Computer Graphics" by David Salomon, page 189
    var q1 = 3.0 * dt,
      q2 = q1 * dt,
      q3 = dt * dt * dt,
      q4 = 2.0 * q2,
      q5 = 6.0 * q3,
      q6x = _this.x0 - 2.0 * _this.x1 + _this.x2,
      q6y = _this.y0 - 2.0 * _this.y1 + _this.y2,
      q7x = 3.0 * (_this.x1 - _this.x2) - _this.x0 + _this.x3,
      q7y = 3.0 * (_this.y1 - _this.y2) - _this.y0 + _this.y3;
    Bx = _this.x0;
    By = _this.y0;
    dBx = (_this.x1 - _this.x0) * q1 + q6x * q2 + q7x * q3;
    dBy = (_this.y1 - _this.y0) * q1 + q6y * q2 + q7y * q3;
    ddBx = q6x * q4 + q7x * q5;
    ddBy = q6y * q4 + q7y * q5;
    dddBx = q7x * q5;
    dddBy = q7y * q5;
  };

  /**
   * Fill the given x,y arrays with a series of points on the curve.
   * 
   * @param {Number[]} x
   * @param {Number[]} y
   *
   * @param {int} elements Count of elements to fill x and y arrays
   */
  this.compute = function (x, y, elements) {
    init(1.0 / elements);
    x[0] = Bx;
    y[0] = By;
    for (var i = 1; i < elements; i++) {
      Bx += dBx;
      By += dBy;
      dBx += ddBx;
      dBy += ddBy;
      ddBx += dddBx;
      ddBy += dddBy;
      x[i] = Bx;
      y[i] = By;
    }
  };
}
module.exports = exports.default;

},{}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPColor;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * @param {int} rgb
 * @param {Object} hsv
 */
function convertRgbToHsv(rgb, hsv) {
  var r = rgb >> 16 & 0xff,
    g = rgb >> 8 & 0xff,
    b = rgb & 0xff;

  // Value
  hsv.value = Math.max(r, Math.max(g, b));

  // Saturation
  var mini = Math.min(r, Math.min(g, b));
  if (hsv.value == 0) {
    hsv.saturation = 0;
  } else {
    hsv.saturation = ~~((hsv.value - mini) / hsv.value * 255);
  }

  // Hue
  if (hsv.saturation == 0) {
    hsv.hue = 0;
  } else {
    var cr = (hsv.value - r) / (hsv.value - mini),
      cg = (hsv.value - g) / (hsv.value - mini),
      cb = (hsv.value - b) / (hsv.value - mini);
    var _hue = 0;
    if (hsv.value == r) {
      _hue = cb - cg;
    }
    if (hsv.value == g) {
      _hue = 2 + cr - cb;
    }
    if (hsv.value == b) {
      _hue = 4 + cg - cr;
    }
    _hue *= 60;
    if (_hue < 0) {
      _hue += 360;
    }
    hsv.hue = ~~_hue;
  }
}

/**
 *
 * @param {Object} hsv
 * @returns {int}
 */
function convertHsvToRgb(hsv) {
  // no saturation means it's just a shade of grey
  if (hsv.saturation == 0) {
    return hsv.value << 16 | hsv.value << 8 | hsv.value;
  } else {
    var f = hsv.hue / 60;
    f = f - Math.floor(f);
    var s = hsv.saturation / 255,
      m = ~~(hsv.value * (1 - s)),
      n = ~~(hsv.value * (1 - s * f)),
      k = ~~(hsv.value * (1 - s * (1 - f)));
    switch (~~(hsv.hue / 60)) {
      case 0:
        return hsv.value << 16 | k << 8 | m;
      case 1:
        return n << 16 | hsv.value << 8 | m;
      case 2:
        return m << 16 | hsv.value << 8 | k;
      case 3:
        return m << 16 | n << 8 | hsv.value;
      case 4:
        return k << 16 | m << 8 | hsv.value;
      case 5:
        return hsv.value << 16 | m << 8 | n;
      default:
        return 0;
      // invalid hue
    }
  }
}

/**
 *
 * @param {int} rgb - Initial color
 * @constructor
 */
function CPColor(rgb) {
  /**
   * Color in RGB byte order (no alpha component)
   *
   * @type {int}
   */
  this.rgb = 0;

  /**
   * Hue 0-359 degrees
   *
   * @type {int}
   */
  this.hue = 0;

  /**
   * Color saturation 0 - 255
   * @type {int}
   */
  this.saturation = 0;

  /**
   * Brightness 0 - 255
   *
   * @type {int}
   */
  this.value = 0;
  this.setRgb(rgb || 0);
}
CPColor.prototype.getRgb = function () {
  return this.rgb;
};
CPColor.prototype.getSaturation = function () {
  return this.saturation;
};
CPColor.prototype.getHue = function () {
  return this.hue;
};
CPColor.prototype.getValue = function () {
  return this.value;
};
CPColor.prototype.setRgbComponents = function (r, g, b) {
  this.setRgb(r << 16 | g << 8 | b);
};
CPColor.prototype.setRgb = function (rgb) {
  this.rgb = rgb;
  convertRgbToHsv(rgb, this);
};
CPColor.prototype.setHsv = function (hue, saturation, value) {
  this.hue = hue;
  this.saturation = saturation;
  this.value = value;
  this.rgb = convertHsvToRgb(this);
};
CPColor.prototype.setHue = function (hue) {
  this.hue = hue;
  this.rgb = convertHsvToRgb(this);
};
CPColor.prototype.setSaturation = function (saturation) {
  this.saturation = saturation;
  this.rgb = convertHsvToRgb(this);
};
CPColor.prototype.setValue = function (value) {
  this.value = value;
  this.rgb = convertHsvToRgb(this);
};
CPColor.prototype.setGreyscale = function (value) {
  this.rgb = CPColor.greyToRGB(value);
  this.hue = 0;
  this.saturation = 0;
  this.value = value;
};
CPColor.prototype.clone = function () {
  var result = new CPColor(0);
  result.copyFrom(this);
  return result;
};

/**
 *
 * @param {CPColor} that
 */
CPColor.prototype.copyFrom = function (that) {
  this.rgb = that.rgb;
  this.hue = that.hue;
  this.saturation = that.saturation;
  this.value = that.value;
};

/**
 *
 * @param {CPColor} color
 * @returns {boolean}
 */
CPColor.prototype.isEqual = function (color) {
  return this.rgb == color.rgb && this.hue == color.hue && this.saturation == color.saturation && this.value == color.value;
};
CPColor.greyToRGB = function (grey) {
  return grey | grey << 8 | grey << 16;
};
module.exports = exports.default;

},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPColorFloat;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * An RGB color with floating point values for each channel (between 0.0 and 1.0)
 *
 * @param {number} r
 * @param {number} g
 * @param {number} b
 *
 * @constructor
 */
function CPColorFloat(r, g, b) {
  this.r = r;
  this.g = g;
  this.b = b;
}
CPColorFloat.prototype.toInt = function () {
  return Math.max(0, Math.min(255, Math.round(this.r * 255))) << 16 | Math.max(0, Math.min(255, Math.round(this.g * 255))) << 8 | Math.max(0, Math.min(255, Math.round(this.b * 255)));
};
CPColorFloat.prototype.mixWith = function (color, alpha) {
  this.r = this.r * (1.0 - alpha) + color.r * alpha;
  this.g = this.g * (1.0 - alpha) + color.g * alpha;
  this.b = this.b * (1.0 - alpha) + color.b * alpha;
};
CPColorFloat.prototype.clone = function () {
  return new CPColorFloat(this.r, this.g, this.b);
};
CPColorFloat.createFromInt = function (color) {
  return new CPColorFloat((color >>> 16 & 0xff) / 255, (color >>> 8 & 0xff) / 255, (color & 0xff) / 255);
};
module.exports = exports.default;

},{}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCanvasInterpolationSupported = isCanvasInterpolationSupported;
exports.isCanvasSupported = isCanvasSupported;
exports.isEventSupported = isEventSupported;
exports.isFlexboxSupported = isFlexboxSupported;
exports.setCanvasInterpolation = setCanvasInterpolation;
var _Canvas = require("./Canvas.js");
/*
	ChickenPaint

	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.

	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function getCanvasInterpolationPropName(canvasContext) {
  var browserProperties = ["imageSmoothingEnabled", "mozImageSmoothingEnabled", "webkitImageSmoothingEnabled", "msImageSmoothingEnabled"];
  for (var i = 0; i < browserProperties.length; i++) {
    if (browserProperties[i] in canvasContext) {
      return browserProperties[i];
    }
  }
  return null;
}
function isCanvasInterpolationSupported() {
  var canvas = (0, _Canvas.createCanvas)(0, 0),
    canvasContext = canvas.getContext("2d");
  return !!getCanvasInterpolationPropName(canvasContext);
}
function setCanvasInterpolation(canvasContext, enabled) {
  var propName = getCanvasInterpolationPropName(canvasContext);
  if (propName) {
    canvasContext[propName] = enabled;
  }
}
function isEventSupported(eventName) {
  var isSupported = (eventName in window);
  if (!isSupported) {
    var el = document.createElement('div');
    el.setAttribute(eventName, 'return;');
    isSupported = typeof el[eventName] == 'function';
  }
  return isSupported;
}
function isCanvasSupported() {
  var elem = (0, _Canvas.createCanvas)(0, 0);
  return !!(elem.getContext && elem.getContext('2d'));
}
function isFlexboxSupported() {
  return (typeof document.body.style.flexBasis == "string" || typeof document.body.style.msFlexDirection == "string") && !/Presto/.test(navigator.userAgent);
}

},{"./Canvas.js":2}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPPolygon;
var _CPTransform = _interopRequireDefault(require("./CPTransform.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
	ChickenPaint

	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.

	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPPolygon(points) {
  this.points = points || [];
}
CPPolygon.prototype.clone = function () {
  var result = new CPPolygon(new Array(this.points.length));
  for (var i = 0; i < this.points.length; i++) {
    // Deep clone
    result.points[i] = {
      x: this.points[i].x,
      y: this.points[i].y
    };
  }
  return result;
};

/**
 * Get a new polygon which is the result of transforming the points of this polygon with the given affine transform.
 *
 * @param {CPTransform} affineTransform
 * @returns {CPPolygon}
 */
CPPolygon.prototype.getTransformed = function (affineTransform) {
  var result = new CPPolygon(new Array(this.points.length));
  for (var i = 0; i < this.points.length; i++) {
    result.points[i] = affineTransform.getTransformedPoint(this.points[i]);
  }
  return result;
};

/**
 * Get the average of all the points in the polygon (the "center").
 *
 * @returns {{x: number, y: number}}
 */
CPPolygon.prototype.getCenter = function () {
  var centerX = this.points[0].x,
    centerY = this.points[0].y;
  for (var i = 1; i < this.points.length; i++) {
    centerX += this.points[i].x;
    centerY += this.points[i].y;
  }
  return {
    x: centerX / this.points.length,
    y: centerY / this.points.length
  };
};

/**
 * From https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
 *
 * @param point
 * @returns {boolean}
 */
CPPolygon.prototype.containsPoint = function (point) {
  var i,
    j,
    contained = false;
  for (i = 0, j = this.points.length - 1; i < this.points.length; j = i++) {
    if (this.points[i].y > point.y != this.points[j].y > point.y && point.x < (this.points[j].x - this.points[i].x) * (point.y - this.points[i].y) / (this.points[j].y - this.points[i].y) + this.points[i].x) {
      contained = !contained;
    }
  }
  return contained;
};
module.exports = exports.default;

},{"./CPTransform.js":64}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPRandom;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPRandom() {
  var nextNextGaussian,
    haveNextNextGaussian = false;

  /**
   * Definition from Java, mean of 0.0 and standard deviation 1.0.
   */
  this.nextGaussian = function () {
    if (haveNextNextGaussian) {
      haveNextNextGaussian = false;
      return nextNextGaussian;
    } else {
      var v1, v2, s;
      do {
        v1 = 2 * Math.random() - 1; // between -1.0 and 1.0
        v2 = 2 * Math.random() - 1; // between -1.0 and 1.0
        s = v1 * v1 + v2 * v2;
      } while (s >= 1 || s == 0);
      var multiplier = Math.sqrt(-2 * Math.log(s) / s);
      nextNextGaussian = v2 * multiplier;
      haveNextNextGaussian = true;
      return v1 * multiplier;
    }
  };
}
;
module.exports = exports.default;

},{}],63:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPRect;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPRect(left, top, right, bottom) {
  /*
  if (left === undefined || top === undefined || right === undefined || bottom === undefined) {
      throw "Bad rect";
  }
  
  if (~~left !== left || ~~top !== top || ~~right !== right || ~~bottom !== bottom) {
      throw "Bad rect";
  }
  */

  this.left = left;
  this.top = top;
  this.right = right;
  this.bottom = bottom;
}
CPRect.prototype.makeEmpty = function () {
  this.left = 0;
  this.top = 0;
  this.right = 0;
  this.bottom = 0;
};
CPRect.prototype.union = function (that) {
  if (this.isEmpty()) {
    this.set(that);
  } else if (!that.isEmpty()) {
    this.left = Math.min(this.left, that.left);
    this.top = Math.min(this.top, that.top);
    this.right = Math.max(this.right, that.right);
    this.bottom = Math.max(this.bottom, that.bottom);
  }
};
CPRect.prototype.getUnion = function (that) {
  var result = this.clone();
  result.union(that);
  return result;
};

/**
 * Get the intersection (possibly empty) of this rectangle and that.
 *
 * @param {CPRect} that
 * @returns {CPRect}
 */
CPRect.prototype.getIntersection = function (that) {
  return new CPRect(Math.max(this.left, that.left), Math.max(this.top, that.top), Math.min(this.right, that.right), Math.min(this.bottom, that.bottom));
};

/**
 * Clip this rectangle to fit within `that`.
 * 
 * @returns {CPRect} A reference to this rectangle for chaining
 */
CPRect.prototype.clipTo = function (that) {
  if (!this.isEmpty()) {
    if (that.isEmpty()) {
      this.makeEmpty();
    } else {
      this.left = Math.min(Math.max(this.left, that.left), that.right);
      this.top = Math.min(Math.max(this.top, that.top), that.bottom);
      this.right = Math.max(Math.min(this.right, that.right), that.left);
      this.bottom = Math.max(Math.min(this.bottom, that.bottom), that.top);
    }
  }
  return this;
};
CPRect.prototype.containsPoint = function (p) {
  return !(p.x < this.left || p.y < this.top || p.x >= this.right || p.y >= this.bottom);
};
CPRect.prototype.isInside = function (that) {
  return this.left >= that.left && this.top >= that.top && this.right <= that.right && this.bottom <= that.bottom;
};

/**
 * Use this rectangle as bounds to clip the placement of the area of srcRect at the position of dstRect inside
 * our bounds.
 *
 * dstRect has its right and bottom set by this operation to match the area that would be copied from the source.
 * srcRect has its coordinates tweaked to match the area that will be copied.
 */
CPRect.prototype.clipSourceDest = function (srcRect, dstRect) {
  dstRect.right = dstRect.left + srcRect.getWidth();
  dstRect.bottom = dstRect.top + srcRect.getHeight();
  if (this.isEmpty() || dstRect.left >= this.right || dstRect.top >= this.bottom || dstRect.right <= this.left || dstRect.bottom <= this.top) {
    srcRect.makeEmpty();
    dstRect.makeEmpty();
  } else {
    // bottom/right
    if (dstRect.right > this.right) {
      srcRect.right -= dstRect.right - this.right;
      dstRect.right = this.right;
    }
    if (dstRect.bottom > this.bottom) {
      srcRect.bottom -= dstRect.bottom - this.bottom;
      dstRect.bottom = this.bottom;
    }

    // top/left
    if (dstRect.left < this.left) {
      srcRect.left += this.left - dstRect.left;
      dstRect.left = this.left;
    }
    if (dstRect.top < this.top) {
      srcRect.top += this.top - dstRect.top;
      dstRect.top = this.top;
    }
  }
};
CPRect.prototype.getWidth = function () {
  return this.right - this.left;
};
CPRect.prototype.getHeight = function () {
  return this.bottom - this.top;
};
CPRect.prototype.getArea = function () {
  return this.getWidth() * this.getHeight();
};
CPRect.prototype.isEmpty = function () {
  return this.right <= this.left || this.bottom <= this.top;
};

/**
 * Set this rectangle's coordinates to a copy of that ones.
 *
 * @param {CPRect} thatRect
 */
CPRect.prototype.set = function (thatRect) {
  this.left = thatRect.left;
  this.top = thatRect.top;
  this.right = thatRect.right;
  this.bottom = thatRect.bottom;
};

/**
 * Get an independent copy of this rectangle.
 *
 * @returns {CPRect}
 */
CPRect.prototype.clone = function () {
  return new CPRect(this.left, this.top, this.right, this.bottom);
};

/**
 * Move the rectangle by the given offset
 *
 * @param {number} x
 * @param {number} y
 *
 * @returns {CPRect} This rectangle for chaining
 */
CPRect.prototype.translate = function (x, y) {
  this.left += x;
  this.right += x;
  this.top += y;
  this.bottom += y;
  return this;
};
CPRect.prototype.getTranslated = function (x, y) {
  var result = this.clone();
  result.translate(x, y);
  return result;
};
CPRect.prototype.moveTo = function (x, y) {
  this.translate(x - this.left, y - this.top);
};
CPRect.prototype.equals = function (that) {
  return this.left == that.left && this.right == that.right && this.top == that.top && this.bottom == that.bottom;
};

/**
 * Add h pixels to both the left and right sides of the rectangle, and v pixels to both the top and bottom sides.
 *  
 * @param h
 * @param v
 */
CPRect.prototype.grow = function (h, v) {
  // TODO checks for rectangles with zero-extent
  this.left -= h;
  this.right += h;
  this.top -= v;
  this.bottom += v;
};
CPRect.prototype.toString = function () {
  return "(" + this.left + "," + this.top + "," + this.right + "," + this.bottom + ")";
};

/**
 * Convert the rectangle into an array of points of the corners of the rectangle (clockwise starting from the top left
 * point).
 */
CPRect.prototype.toPoints = function () {
  return [{
    x: this.left,
    y: this.top
  }, {
    x: this.right,
    y: this.top
  }, {
    x: this.right,
    y: this.bottom
  }, {
    x: this.left,
    y: this.bottom
  }];
};

/**
 * Round the rectangle coordinates to the nearest integer.
 *
 * @returns {CPRect} This rectangle for chaining
 */
CPRect.prototype.roundNearest = function () {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  return this;
};

/**
 * Round the rectangle coordinates to integers so that the old rectangle is contained by the new one.
 *
 * @returns {CPRect} This rectangle for chaining
 */
CPRect.prototype.roundContain = function () {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  return this;
};

/**
 * Create an AABB CPRect which encloses the given array of points.
 *
 * @param {{x: number, y: number}[]} points
 *
 * @returns {CPRect}
 */
CPRect.createBoundingBox = function (points) {
  if (points.length === 0) {
    return new CPRect(0, 0, 0, 0);
  }
  var result = new CPRect(points[0].x, points[0].y, points[0].x, points[0].y);
  for (var i = 1; i < points.length; i++) {
    result.left = Math.min(result.left, points[i].x);
    result.top = Math.min(result.top, points[i].y);
    result.right = Math.max(result.right, points[i].x);
    result.bottom = Math.max(result.bottom, points[i].y);
  }
  return result;
};

/**
 * Subtract that rectangle from this one and return an array of CPRects to represent the resulting area (possibly
 * empty).
 *
 * @param {CPRect} that
 * @returns {CPRect[]}
 */
CPRect.prototype.subtract = function (that) {
  return CPRect.subtract(this, that);
};

/**
 * Subtract the second rectangle or array of rectangles from the first one, and return an array of CPRects to represent
 * the resulting area (possibly empty).
 *
 * @param {(CPRect|CPRect[])} rectsA
 * @param {(CPRect|CPRect[])} rectsB
 * @returns {CPRect[]}
 */
CPRect.subtract = function (rectsA, rectsB) {
  if (rectsA instanceof CPRect) {
    rectsA = [rectsA];
  }
  if (rectsB instanceof CPRect) {
    rectsB = [rectsB];
  }
  var result = rectsA.slice(0);
  for (var i = 0; i < rectsB.length; i++) {
    // Don't re-examine any new rectangles we push onto the result, since we know they don't intersect this rectB:
    var rectB = rectsB[i],
      resultLength = result.length;
    for (var j = 0; j < resultLength; j++) {
      var rectA = result[j];
      if (!rectA) {
        continue;
      }
      var intersection = rectA.getIntersection(rectB);
      if (!intersection.isEmpty()) {
        var newRects = [];
        if (rectA.top < rectB.top) {
          newRects.push(new CPRect(rectA.left, rectA.top, rectA.right, intersection.top));
        }
        if (rectA.bottom > rectB.bottom) {
          newRects.push(new CPRect(rectA.left, intersection.bottom, rectA.right, rectA.bottom));
        }
        if (rectA.left < rectB.left) {
          newRects.push(new CPRect(rectA.left, intersection.top, intersection.left, intersection.bottom));
        }
        if (rectA.right > rectB.right) {
          newRects.push(new CPRect(intersection.right, intersection.top, rectA.right, intersection.bottom));
        }
        newRects = newRects.filter(function (rect) {
          return !rect.isEmpty();
        });

        // Replace the original rectangle in the array with the new fragments
        if (newRects.length > 0) {
          result[j] = newRects[0];
          for (var k = 1; k < newRects.length; k++) {
            result.push(newRects[k]);
          }
        } else {
          result[j] = null;
        }
      }
    }
  }
  return result.filter(function (rect) {
    return rect != null;
  });
};

/**
 * Create a union of the given rectangles, and return an array of non-overlapping CPRects to represent
 * the resulting shape (possibly empty).
 *
 * @param {(CPRect|CPRect[])} rects
 * @returns {CPRect[]}
 */
CPRect.union = function (rects) {
  var result;
  if (rects instanceof CPRect) {
    result = [rects];
  } else {
    result = rects.slice(0); // Clone to avoid damaging the original array

    for (var i = 0; i < result.length; i++) {
      // Intersect this rectangle with all the others
      var rectA = result[i],
        resultLength = result.length;
      if (!rectA) {
        continue;
      }

      // Don't re-examine any new rectangles we push onto the result
      for (var j = i + 1; j < resultLength; j++) {
        var rectB = result[j];
        if (!rectB) {
          continue;
        }
        var intersection = rectA.getIntersection(rectB);
        if (!intersection.isEmpty()) {
          /* We need to eliminate the overlap between these rectangles. Subtract rectA from rectB and leave
           * rectA alone.
           */

          var newRects = CPRect.subtract(rectB, rectA);

          // Replace rectB with one of the fragments
          result[j] = newRects[0];

          // And add the rest of the fragments to the end
          for (var k = 1; k < newRects.length; k++) {
            result.push(newRects[k]);
          }
        }
      }
    }
  }
  return result.filter(function (rect) {
    return rect && !rect.isEmpty();
  });
};

/* 
 * Chrome is initially eager to optimize CPRect and users assuming that all the fields are SMIs, then later on decides
 * that they should be tagged numbers after all. This causes all the blending operation functions to be reoptimized
 * a couple of times. 
 * 
 * Avoid that mess by starting things off with floats in the members.  
 */
if ((typeof window === "undefined" ? "undefined" : _typeof(window)) == "object") {
  window.cpRectGarbage = new CPRect(1.5, 2.5, 3.5, 4.5);
}
module.exports = exports.default;

},{}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPTransform;
// Modifications by Nicholas Sherlock. Original docs below:

// Last updated November 2011
// By Simon Sarris
// www.simonsarris.com
// sarris@acm.org
//
// Free to use and distribute at will
// So long as you are nice to people, etc

// Simple class for keeping track of the current transformation matrix

// For instance:
//    var t = new Transform();
//    t.rotate(5);
//    var m = t.m;
//    ctx.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);

// Is equivalent to:
//    ctx.rotate(5);

// But now you can retrieve it :)

// Remember that this does not account for any CSS transforms applied to the canvas

function CPTransform() {
  this.setToIdentity();
}
CPTransform.prototype.setToIdentity = function () {
  /* Matrix components are stored in this order in 'm':
   * [0 2 4]
   * [1 3 5]
   * [x x x]
   *
   * Last row is always 0, 0, 1 so we don't store it.
   */
  this.m = [1, 0, 0, 1, 0, 0];
};

/**
 * Multiply this matrix with the given transformation one like so:
 *
 * [this] = [this] * [matrix]
 *
 * @param {CPTransform} matrix
 */
CPTransform.prototype.multiply = function (matrix) {
  var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1],
    m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1],
    m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3],
    m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3],
    dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4],
    dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
  this.m[0] = m11;
  this.m[1] = m12;
  this.m[2] = m21;
  this.m[3] = m22;
  this.m[4] = dx;
  this.m[5] = dy;
};

/**
 * Multiply this matrix with the given transformation one like so:
 *
 * [this] = [matrix] * [this]
 *
 * @param {CPTransform} matrix
 */
CPTransform.prototype.preMultiply = function (matrix) {
  var m11 = matrix.m[0] * this.m[0] + matrix.m[2] * this.m[1],
    m12 = matrix.m[1] * this.m[0] + matrix.m[3] * this.m[1],
    m21 = matrix.m[0] * this.m[2] + matrix.m[2] * this.m[3],
    m22 = matrix.m[1] * this.m[2] + matrix.m[3] * this.m[3],
    dx = matrix.m[0] * this.m[4] + matrix.m[2] * this.m[5] + matrix.m[4],
    dy = matrix.m[1] * this.m[4] + matrix.m[3] * this.m[5] + matrix.m[5];
  this.m[0] = m11;
  this.m[1] = m12;
  this.m[2] = m21;
  this.m[3] = m22;
  this.m[4] = dx;
  this.m[5] = dy;
};
CPTransform.prototype.invert = function () {
  var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]),
    m0 = this.m[3] * d,
    m1 = -this.m[1] * d,
    m2 = -this.m[2] * d,
    m3 = this.m[0] * d,
    m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]),
    m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
  this.m[0] = m0;
  this.m[1] = m1;
  this.m[2] = m2;
  this.m[3] = m3;
  this.m[4] = m4;
  this.m[5] = m5;
};
CPTransform.prototype.getInverted = function () {
  var result = new CPTransform();
  result.m[0] = this.m[0];
  result.m[1] = this.m[1];
  result.m[2] = this.m[2];
  result.m[3] = this.m[3];
  result.m[4] = this.m[4];
  result.m[5] = this.m[5];
  result.invert();
  return result;
};

/**
 * Multiply this transform by a rotation matrix for the given angle:
 *
 * [ cos(a) -sin(a) 0]
 * [ sin(a)  cos(a) 0]
 * [   0       0    1]
 */
CPTransform.prototype.rotate = function (rad) {
  var c = Math.cos(rad),
    s = Math.sin(rad),
    m11 = this.m[0] * c + this.m[2] * s,
    m12 = this.m[1] * c + this.m[3] * s,
    m21 = this.m[0] * -s + this.m[2] * c,
    m22 = this.m[1] * -s + this.m[3] * c;
  this.m[0] = m11;
  this.m[1] = m12;
  this.m[2] = m21;
  this.m[3] = m22;
};
CPTransform.prototype.rotateAroundPoint = function (rad, x, y) {
  this.translate(x, y);
  this.rotate(rad);
  this.translate(-x, -y);
};

/**
 * Multiply this transform by a translation matrix:
 *
 * [1  0  x]
 * [0  1  y]
 * [0  0  1]
 *
 * @param x
 * @param y
 */
CPTransform.prototype.translate = function (x, y) {
  this.m[4] += this.m[0] * x + this.m[2] * y;
  this.m[5] += this.m[1] * x + this.m[3] * y;
};

/**
 * Multiply this transform by a scale matrix:
 *
 * [sx 0  0]
 * [0  sy 0]
 * [0  0  1]
 *
 * @param sx
 * @param sy
 */
CPTransform.prototype.scale = function (sx, sy) {
  this.m[0] *= sx;
  this.m[1] *= sx;
  this.m[2] *= sy;
  this.m[3] *= sy;
};
CPTransform.prototype.scaleAroundPoint = function (sx, sy, px, py) {
  this.translate(px, py);
  this.scale(sx, sy);
  this.translate(-px, -py);
};

/**
 * Multiply this transform by a shear matrix:
 *
 * [1  sx 0]
 * [sy 1  0]
 * [0  0  1]
 *
 * @param {number} x
 * @param {number} y
 */
CPTransform.prototype.shear = function (x, y) {
  var m11 = this.m[0] + this.m[2] * y,
    m12 = this.m[1] + this.m[3] * y,
    m21 = this.m[2] + this.m[0] * x,
    m22 = this.m[3] + this.m[1] * x;
  this.m[0] = m11;
  this.m[1] = m12;
  this.m[2] = m21;
  this.m[3] = m22;
};
CPTransform.prototype.getTransformedPoint = function (p) {
  return {
    x: p.x * this.m[0] + p.y * this.m[2] + this.m[4],
    y: p.x * this.m[1] + p.y * this.m[3] + this.m[5]
  };
};
CPTransform.prototype.transformPoints = function (points) {
  for (var i = 0; i < points.length; i++) {
    points[i] = this.getTransformedPoint(points[i]);
  }
};
CPTransform.prototype.getTranslateX = function () {
  return this.m[4];
};
CPTransform.prototype.getTranslateY = function () {
  return this.m[5];
};
CPTransform.prototype.clone = function () {
  var result = new CPTransform();
  result.m[0] = this.m[0];
  result.m[1] = this.m[1];
  result.m[2] = this.m[2];
  result.m[3] = this.m[3];
  result.m[4] = this.m[4];
  result.m[5] = this.m[5];
  return result;
};
CPTransform.prototype.getDeterminant = function () {
  return this.m[0] * this.m[3] - this.m[1] * this.m[2];
};

/**
 * Break down the matrix into a translation, scale, rotation, then shear operation.
 *
 * x or y scale must not be zero.
 *
 * http://www.maths-informatique-jeux.com/blog/frederic/?post/2013/12/01/Decomposition-of-2D-transform-matrices
 */
CPTransform.prototype.decompose = function () {
  var determinant = this.getDeterminant(),
    r = Math.sqrt(this.m[0] * this.m[0] + this.m[1] * this.m[1]);
  return {
    translate: {
      x: this.m[4],
      y: this.m[5]
    },
    rotate: Math.sign(this.m[1]) * Math.acos(this.m[0] / r),
    scale: {
      x: r,
      y: determinant / r
    },
    shear: {
      x: Math.atan((this.m[0] * this.m[2] + this.m[1] * this.m[3]) / (r * r)),
      y: 0
    }
  };
};
CPTransform.prototype.toString = function () {
  var PLACES = 2;
  return "[" + this.m[0].toFixed(PLACES) + " " + this.m[2].toFixed(PLACES) + " " + this.m[4].toFixed(PLACES) + "]\n" + "[" + this.m[1].toFixed(PLACES) + " " + this.m[3].toFixed(PLACES) + " " + this.m[5].toFixed(PLACES) + "]\n" + "[0.00 0.00 1.00]";
};
Math.sign = Math.sign || function (x) {
  x = +x; // convert to a number
  if (x === 0 || isNaN(x)) {
    return x;
  }
  return x > 0 ? 1 : -1;
};
module.exports = exports.default;

},{}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPVector;
/*
	ChickenPaint

	ChickenPaint is a translation of ChibiPaint from Java to JavaScript
	by Nicholas Sherlock / Chicken Smoothie.

	ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

	ChickenPaint is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ChickenPaint is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

/**
 *
 * @param x
 * @param y
 *
 * @constructor
 */
function CPVector(x, y) {
  this.x = x;
  this.y = y;
}
CPVector.prototype.getLength = function () {
  return Math.sqrt(this.x * this.x + this.y * this.y);
};

/**
 *
 * @returns {CPVector} This vector for chaining
 */
CPVector.prototype.normalize = function () {
  var length = this.getLength();
  this.x /= length;
  this.y /= length;
  return this;
};

/**
 *
 * @param {CPVector} that
 */
CPVector.prototype.getDotProduct = function (that) {
  return this.x * that.x + this.y * that.y;
};

/**
 *
 * @param {numeric} scaleFactor
 * @returns {CPVector} This vector for chaining
 */
CPVector.prototype.scale = function (scaleFactor) {
  this.x *= scaleFactor;
  this.y *= scaleFactor;
  return this;
};
CPVector.prototype.getScaled = function (scaleFactor) {
  var result = new CPVector(this.x, this.y);
  result.scale(scaleFactor);
  return result;
};
CPVector.prototype.getRounded = function () {
  return new CPVector(Math.round(this.x), Math.round(this.y));
};
CPVector.prototype.getTruncated = function () {
  return new CPVector(~~this.x, ~~this.y);
};
CPVector.prototype.getPerpendicular = function () {
  return new CPVector(-this.y, this.x);
};

/**
 * Add that vector to this one
 *
 * @param {CPVector} that
 * @returns {CPVector} This vector for chaining
 */
CPVector.prototype.add = function (that) {
  this.x += that.x;
  this.y += that.y;
  return this;
};

/**
 * Subtract that vector from this one
 *
 * @param {CPVector} that
 * @returns {CPVector} This vector for chaining
 */
CPVector.prototype.subtract = function (that) {
  this.x -= that.x;
  this.y -= that.y;
  return this;
};

/**
 * Get the sum of this vector and that one.
 *
 * @param {CPVector} that
 * @returns {CPVector}
 */
CPVector.prototype.getSum = function (that) {
  return new CPVector(this.x + that.x, this.y + that.y);
};

/**
 * Create a new vector by p1 - p2
 *
 * @param p1
 * @param p2
 *
 * @returns {CPVector}
 */
CPVector.subtractPoints = function (p1, p2) {
  return new CPVector(p1.x - p2.x, p1.y - p2.y);
};
module.exports = exports.default;

},{}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CPWacomTablet;
/*
    ChickenPaint
    
    ChickenPaint is a translation of ChibiPaint from Java to JavaScript
    by Nicholas Sherlock / Chicken Smoothie.
    
    ChibiPaint is Copyright (c) 2006-2008 Marc Schefer

    ChickenPaint is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ChickenPaint is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ChickenPaint. If not, see <http://www.gnu.org/licenses/>.
*/

function CPWacomTablet() {
  var penAPI = null,
    pluginObject,
    that = this;

  /**
   * Is the pen currently interacting with the tablet surface?
   */
  this.isPen = function () {
    var pointerType;
    if (penAPI) {
      pointerType = penAPI.pointerType;
      return pointerType == 1 /* Pen */ || pointerType == 3 /* Eraser */;
    }

    return false;
  };
  this.getPressure = function () {
    if (penAPI) {
      return penAPI.pressure;
    }
    return 1.0;
  };
  this.pluginLoaded = function () {
    console.log("Wacom tablet support loaded!");
    penAPI = pluginObject.penAPI;
  };
  this.isTabletPresent = function () {
    return !!penAPI;
  };

  /**
   * Call after the document body is ready (needs DOM to be ready for loading the Wacom plugin).
   */
  this.detectTablet = function () {
    // Chrome has dropped NPAPI support, so the Wacom plugin cannot be installed
    if (/Chrome/i.test(navigator.userAgent) && !/OPR/.test(navigator.userAgent)) {
      // Prevent an ugly "this page has tried to load a plugin which is not supported" error message
      console.log("Not attempting to load Wacom tablet plugin, since this is Chrome");
      return;
    }
    console.log("Attempting to load Wacom tablet support...");
    pluginObject = document.createElement("object");
    if ("classid" in pluginObject) {
      // IE
      pluginObject.classid = "CLSID:092dfa86-5807-5a94-bf3b-5a53ba9e5308";
    } else {
      var param = document.createElement("param");
      param.name = "onload";
      param.value = "onWacomPluginLoaded";
      pluginObject.appendChild(param);
      pluginObject.type = "application/x-wacomtabletplugin";
    }
    pluginObject.style.position = "absolute";
    pluginObject.style.visibility = "hidden";
    pluginObject.onload = "onWacomPluginLoaded";
    document.body.appendChild(pluginObject);
    setTimeout(function () {
      if (!that.isTabletPresent()) {
        console.log("Looks like the Wacom plugin isn't installed, or failed to load.");
      }
    }, 5000);
  };
}
CPWacomTablet.getRef = function () {
  if (CPWacomTablet.instance == null) {
    CPWacomTablet.instance = new CPWacomTablet();
  }
  return CPWacomTablet.instance;
};
window.onWacomPluginLoaded = function () {
  CPWacomTablet.getRef().pluginLoaded();
};
module.exports = exports.default;

},{}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;
exports.throttle = throttle;
/*!
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery throttle / debounce: Sometimes, less is more!
//
// *Version: 1.1, Last updated: 3/7/2010*
// 
// Project Home - http://benalman.com/projects/jquery-throttle-debounce-plugin/
// GitHub       - http://github.com/cowboy/jquery-throttle-debounce/
// Source       - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.js
// (Minified)   - http://github.com/cowboy/jquery-throttle-debounce/raw/master/jquery.ba-throttle-debounce.min.js (0.7kb)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// Throttle - http://benalman.com/code/projects/jquery-throttle-debounce/examples/throttle/
// Debounce - http://benalman.com/code/projects/jquery-throttle-debounce/examples/debounce/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - none, 1.3.2, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-3.6, Safari 3-4, Chrome 4-5, Opera 9.6-10.1.
// Unit Tests      - http://benalman.com/code/projects/jquery-throttle-debounce/unit/
// 
// About: Release History
// 
// 1.1 - (3/7/2010) Fixed a bug in <jQuery.throttle> where trailing callbacks
//       executed later than they should. Reworked a fair amount of internal
//       logic as well.
// 1.0 - (3/6/2010) Initial release as a stand-alone project. Migrated over
//       from jquery-misc repo v0.4 to jquery-throttle repo v1.0, added the
//       no_trailing throttle parameter and debounce functionality.

// Method: throttle
//
// Throttle execution of a function. Especially useful for rate limiting
// execution of handlers on events like resize and scroll. If you want to
// rate-limit execution of a function to a single time, see the
// <jQuery.debounce> method.
//
// In this visualization, | is a throttled-function call and X is the actual
// callback execution:
//
// > Throttled with `no_trailing` specified as false or unspecified:
// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
// > X    X    X    X    X    X        X    X    X    X    X    X
// >
// > Throttled with `no_trailing` specified as true:
// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
// > X    X    X    X    X             X    X    X    X    X
//
// Usage:
//
// > var throttled = jQuery.throttle( delay, [ no_trailing, ] callback );
// >
// > jQuery('selector').bind( 'someevent', throttled );
// > jQuery('selector').unbind( 'someevent', throttled );
//
// This also works in jQuery 1.4+:
//
// > jQuery('selector').bind( 'someevent', jQuery.throttle( delay, [ no_trailing, ] callback ) );
// > jQuery('selector').unbind( 'someevent', callback );
//
// Arguments:
//
//  delay - (Number) A zero-or-greater delay in milliseconds. For event
//    callbacks, values around 100 or 250 (or even higher) are most useful.
//  no_trailing - (Boolean) Optional, defaults to false. If no_trailing is
//    true, callback will only execute every `delay` milliseconds while the
//    throttled-function is being called. If no_trailing is false or
//    unspecified, callback will be executed one final time after the last
//    throttled-function call. (After the throttled-function has not been
//    called for `delay` milliseconds, the internal counter is reset)
//  callback - (Function) A function to be executed after delay milliseconds.
//    The `this` context and all arguments are passed through, as-is, to
//    `callback` when the throttled-function is executed.
//
// Returns:
//
//  (Function) A new, throttled, function.

function throttle(delay, no_trailing, callback, debounce_mode) {
  // After wrapper has stopped being called, this timeout ensures that
  // `callback` is executed at the proper times in `throttle` and `end`
  // debounce modes.
  var timeout_id,
    // Keep track of the last time `callback` was executed.
    last_exec = 0;

  // `no_trailing` defaults to falsy.
  if (typeof no_trailing !== 'boolean') {
    debounce_mode = callback;
    callback = no_trailing;
    no_trailing = undefined;
  }

  // The `wrapper` function encapsulates all of the throttling / debouncing
  // functionality and when executed will limit the rate at which `callback`
  // is executed.
  function wrapper() {
    var that = this,
      elapsed = +new Date() - last_exec,
      args = arguments;

    // Execute `callback` and update the `last_exec` timestamp.
    function exec() {
      last_exec = +new Date();
      callback.apply(that, args);
    }

    // If `debounce_mode` is true (at_begin) this is used to clear the flag
    // to allow future `callback` executions.
    function clear() {
      timeout_id = undefined;
    }
    if (debounce_mode && !timeout_id) {
      // Since `wrapper` is being called for the first time and
      // `debounce_mode` is true (at_begin), execute `callback`.
      exec();
    }

    // Clear any existing timeout.
    timeout_id && clearTimeout(timeout_id);
    if (debounce_mode === undefined && elapsed > delay) {
      // In throttle mode, if `delay` time has been exceeded, execute
      // `callback`.
      exec();
    } else if (no_trailing !== true) {
      // In trailing throttle mode, since `delay` time has not been
      // exceeded, schedule `callback` to execute `delay` ms after most
      // recent execution.
      //
      // If `debounce_mode` is true (at_begin), schedule `clear` to execute
      // after `delay` ms.
      //
      // If `debounce_mode` is false (at end), schedule `callback` to
      // execute after `delay` ms.
      timeout_id = setTimeout(debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay);
    }
  }

  // Return the wrapper function.
  return wrapper;
}

// Method: jQuery.debounce
//
// Debounce execution of a function. Debouncing, unlike throttling,
// guarantees that a function is only executed a single time, either at the
// very beginning of a series of calls, or at the very end. If you want to
// simply rate-limit execution of a function, see the <jQuery.throttle>
// method.
//
// In this visualization, | is a debounced-function call and X is the actual
// callback execution:
//
// > Debounced with `at_begin` specified as false or unspecified:
// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
// >                          X                                 X
// >
// > Debounced with `at_begin` specified as true:
// > ||||||||||||||||||||||||| (pause) |||||||||||||||||||||||||
// > X                                 X
//
// Usage:
//
// > var debounced = jQuery.debounce( delay, [ at_begin, ] callback );
// >
// > jQuery('selector').bind( 'someevent', debounced );
// > jQuery('selector').unbind( 'someevent', debounced );
//
// This also works in jQuery 1.4+:
//
// > jQuery('selector').bind( 'someevent', jQuery.debounce( delay, [ at_begin, ] callback ) );
// > jQuery('selector').unbind( 'someevent', callback );
//
// Arguments:
//
//  delay - (Number) A zero-or-greater delay in milliseconds. For event
//    callbacks, values around 100 or 250 (or even higher) are most useful.
//  at_begin - (Boolean) Optional, defaults to false. If at_begin is false or
//    unspecified, callback will only be executed `delay` milliseconds after
//    the last debounced-function call. If at_begin is true, callback will be
//    executed only at the first debounced-function call. (After the
//    throttled-function has not been called for `delay` milliseconds, the
//    internal counter is reset)
//  callback - (Function) A function to be executed after delay milliseconds.
//    The `this` context and all arguments are passed through, as-is, to
//    `callback` when the debounced-function is executed.
//
// Returns:
//
//  (Function) A new, debounced, function.

function debounce(delay, at_begin, callback) {
  return callback === undefined ? throttle(delay, at_begin, false) : throttle(delay, callback, at_begin !== false);
}

},{}],68:[function(require,module,exports){
"use strict";

//     keymaster.js
//     (c) 2011-2013 Thomas Fuchs
//     keymaster.js may be freely distributed under the MIT license.

;
(function (global) {
  var k,
    _handlers = {},
    _mods = {
      16: false,
      18: false,
      17: false,
      91: false
    },
    _scope = 'all',
    // modifier keys
    _MODIFIERS = {
      '⇧': 16,
      shift: 16,
      '⌥': 18,
      alt: 18,
      option: 18,
      '⌃': 17,
      ctrl: 17,
      control: 17,
      '⌘': 91,
      command: 91
    },
    // special keys
    _MAP = {
      backspace: 8,
      tab: 9,
      clear: 12,
      enter: 13,
      'return': 13,
      esc: 27,
      escape: 27,
      space: 32,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      del: 46,
      'delete': 46,
      home: 36,
      end: 35,
      pageup: 33,
      pagedown: 34,
      ',': 188,
      '.': 190,
      '/': 191,
      '`': 192,
      '-': 189,
      '=': 187,
      ';': 186,
      '\'': 222,
      '[': 219,
      ']': 221,
      '\\': 220
    },
    code = function code(x) {
      var code = _MAP[x] || x.toUpperCase().charCodeAt(0);
      return typeof code === "function" ? code() : code;
    },
    _downKeys = [];
  for (k = 1; k < 20; k++) _MAP['f' + k] = 111 + k;

  // IE doesn't support Array#indexOf, so have a simple replacement
  function index(array, item) {
    var i = array.length;
    while (i--) if (array[i] === item) return i;
    return -1;
  }

  // for comparing mods before unassignment
  function compareArray(a1, a2) {
    if (a1.length != a2.length) return false;
    for (var i = 0; i < a1.length; i++) {
      if (a1[i] !== a2[i]) return false;
    }
    return true;
  }
  function getBrowserName() {
    if (navigator.userAgent.toLowerCase().indexOf('firefox') > 0) return "firefox";
  }
  var modifierMap = {
    16: 'shiftKey',
    18: 'altKey',
    17: 'ctrlKey',
    91: 'metaKey'
  };
  function updateModifierKey(event) {
    for (k in _mods) _mods[k] = event[modifierMap[k]];
  }
  ;

  // handle keydown event
  function dispatch(event) {
    var key, handler, k, i, modifiersMatch, scope;
    //   key = event.keyCode;
    key = getKeyCodeFromKey(event.key);
    if (index(_downKeys, key) == -1) {
      _downKeys.push(key);
    }

    // if a modifier key, set the key.<modifierkeyname> property to true and return
    if (key in _mods) {
      _mods[key] = true;
      // 'assignKey' from inside this closure is exported to window.key
      for (k in _MODIFIERS) if (_MODIFIERS[k] == key) assignKey[k] = true;
      return;
    }
    updateModifierKey(event);

    // see if we need to ignore the keypress (filter() can can be overridden)
    // by default ignore key presses if a select, textarea, or input is focused
    if (!assignKey.filter.call(this, event)) return;

    // abort if no potentially matching shortcuts found
    if (!(key in _handlers)) return;
    scope = getScope();

    // for each potential shortcut
    for (i = 0; i < _handlers[key].length; i++) {
      handler = _handlers[key][i];

      // see if it's in the current scope
      if (handler.scope == scope || handler.scope == 'all') {
        // check if modifiers match if any
        modifiersMatch = handler.mods.length > 0;
        for (k in _mods) if (!_mods[k] && index(handler.mods, +k) > -1 || _mods[k] && index(handler.mods, +k) == -1) modifiersMatch = false;
        // call the handler and stop the event if neccessary
        if (handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch) {
          if (handler.method(event, handler) === false) {
            if (event.preventDefault) event.preventDefault();else event.returnValue = false;
            if (event.stopPropagation) event.stopPropagation();
            if (event.cancelBubble) event.cancelBubble = true;
          }
        }
      }
    }
  }
  ;

  // unset modifier keys on keyup
  function clearModifier(event) {
    //   var key = event.keyCode, k,
    var key = getKeyCodeFromKey(event.key),
      k,
      i = index(_downKeys, key);

    // remove key from _downKeys
    if (i >= 0) {
      _downKeys.splice(i, 1);
    }
    if (key in _mods) {
      _mods[key] = false;
      for (k in _MODIFIERS) if (_MODIFIERS[k] == key) assignKey[k] = false;
    }
  }
  ;
  function resetModifiers() {
    for (k in _mods) _mods[k] = false;
    for (k in _MODIFIERS) assignKey[k] = false;
  }
  ;

  // parse and assign shortcut
  function assignKey(key, scope, method) {
    var keys, mods;
    keys = getKeys(key);
    if (method === undefined) {
      method = scope;
      scope = 'all';
    }

    // for each shortcut
    for (var i = 0; i < keys.length; i++) {
      // set modifier keys if any
      mods = [];
      key = keys[i].split('+');
      if (key.length > 1) {
        mods = getMods(key);
        key = [key[key.length - 1]];
      }
      // convert to keycode and...
      key = key[0];
      key = code(key);
      // ...store handler
      if (!(key in _handlers)) _handlers[key] = [];
      _handlers[key].push({
        shortcut: keys[i],
        scope: scope,
        method: method,
        key: keys[i],
        mods: mods
      });
    }
  }
  ;

  // unbind all handlers for given key in current scope
  function unbindKey(key, scope) {
    var multipleKeys,
      keys,
      mods = [],
      i,
      j,
      obj;
    multipleKeys = getKeys(key);
    for (j = 0; j < multipleKeys.length; j++) {
      keys = multipleKeys[j].split('+');
      if (keys.length > 1) {
        mods = getMods(keys);
      }
      key = keys[keys.length - 1];
      key = code(key);
      if (scope === undefined) {
        scope = getScope();
      }
      if (!_handlers[key]) {
        return;
      }
      for (i = 0; i < _handlers[key].length; i++) {
        obj = _handlers[key][i];
        // only clear handlers if correct scope and mods match
        if (obj.scope === scope && compareArray(obj.mods, mods)) {
          _handlers[key][i] = {};
        }
      }
    }
  }
  ;

  // Returns true if the key with code 'keyCode' is currently down
  // Converts strings into key codes.
  function isPressed(keyCode) {
    if (typeof keyCode == 'string') {
      keyCode = code(keyCode);
    }
    return index(_downKeys, keyCode) != -1;
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function filter(event) {
    var tagName = (event.target || event.srcElement).tagName;
    // ignore keypressed in any elements that support keyboard data input
    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');
  }

  // initialize key.<modifier> to false
  for (k in _MODIFIERS) assignKey[k] = false;

  // set current scope (default 'all')
  function setScope(scope) {
    _scope = scope || 'all';
  }
  ;
  function getScope() {
    return _scope || 'all';
  }
  ;

  // delete all handlers for a given scope
  function deleteScope(scope) {
    var key, handlers, i;
    for (key in _handlers) {
      handlers = _handlers[key];
      for (i = 0; i < handlers.length;) {
        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;
      }
    }
  }
  ;

  // abstract key logic for assign and unassign
  function getKeys(key) {
    var keys;
    key = key.replace(/\s/g, '');
    keys = key.split(',');
    if (keys[keys.length - 1] == '') {
      keys[keys.length - 2] += ',';
    }
    return keys;
  }

  // abstract mods logic for assign and unassign
  function getMods(key) {
    var mods = key.slice(0, key.length - 1);
    for (var mi = 0; mi < mods.length; mi++) mods[mi] = _MODIFIERS[mods[mi]];
    return mods;
  }

  // cross-browser events
  function addEvent(object, event, method) {
    if (object.addEventListener) object.addEventListener(event, method, false);
    //   else if(object.attachEvent)
    // 	object.attachEvent('on'+event, function(){ method(window.event) });
  }
  ;

  // set the handlers globally on document
  addEvent(document, 'keydown', function (event) {
    dispatch(event);
  }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48
  addEvent(document, 'keyup', clearModifier);

  // reset modifiers to false whenever the window is (re)focused.
  addEvent(window, 'focus', resetModifiers);

  // store previously defined key
  var previousKey = global.key;

  // restore previously defined key and return reference to our key object
  function noConflict() {
    var k = global.key;
    global.key = previousKey;
    return k;
  }

  // set window.key and window.key.set/get/deleteScope, and the default filter
  global.key = assignKey;
  global.key.setScope = setScope;
  global.key.getScope = getScope;
  global.key.deleteScope = deleteScope;
  global.key.filter = filter;
  global.key.isPressed = isPressed;
  global.key.getPressedKeyCodes = getPressedKeyCodes;
  global.key.noConflict = noConflict;
  global.key.unbind = unbindKey;
  if (typeof module !== 'undefined') module.exports = assignKey;
})(void 0 || {});
function getKeyCodeFromKey(key) {
  // 特殊キーのマッピングにアルファベットを追加
  // 特殊キーのマッピング
  var specialKeys = {
    'DELETE': 46,
    'BACKSPACE': 8,
    'TAB': 9,
    'ENTER': 13,
    'ESCAPE': 27,
    ' ': 32,
    'ARROWLEFT': 37,
    'ARROWUP': 38,
    'ARROWRIGHT': 39,
    'ARROWDOWN': 40,
    'SHIFT': 16,
    '[': 219,
    ']': 221,
    '1': 49,
    '2': 50,
    '3': 51,
    '4': 52,
    '5': 53,
    '6': 54,
    '7': 55,
    '8': 56,
    '9': 57,
    '0': 48,
    '-': 189,
    '=': 187,
    '+': 187,
    ';': 187,
    'META': 91,
    'LEFTMETA': 91,
    'RIGHTMETA': 91,
    'ALT': 18,
    'ALTGRAPH': 18,
    'OPTION': 18,
    'CONTROL': 17
  };
  for (var i = 65; i <= 90; i++) {
    var Alphabet_key = String.fromCharCode(i);
    specialKeys[Alphabet_key] = i;
  }
  key = key.toUpperCase();

  // 特殊キーの場合はマッピングされた値を返す
  if (key in specialKeys) {
    return specialKeys[key];
  }
}

},{}],69:[function(require,module,exports){
"use strict";

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel

// MIT license

(function () {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }
  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})();

},{}],70:[function(require,module,exports){
'use strict';
require('../../modules/es.array.fill');
var entryUnbind = require('../../internals/entry-unbind');

module.exports = entryUnbind('Array', 'fill');

},{"../../internals/entry-unbind":126,"../../modules/es.array.fill":241}],71:[function(require,module,exports){
'use strict';
require('../../modules/es.array.iterator');
require('../../modules/es.object.to-string');
var entryUnbind = require('../../internals/entry-unbind');

module.exports = entryUnbind('Array', 'values');

},{"../../internals/entry-unbind":126,"../../modules/es.array.iterator":242,"../../modules/es.object.to-string":249}],72:[function(require,module,exports){
'use strict';
require('../../modules/es.array.iterator');
require('../../modules/es.map');
require('../../modules/es.object.to-string');
require('../../modules/es.string.iterator');
var path = require('../../internals/path');

module.exports = path.Map;

},{"../../internals/path":199,"../../modules/es.array.iterator":242,"../../modules/es.map":246,"../../modules/es.object.to-string":249,"../../modules/es.string.iterator":264}],73:[function(require,module,exports){
'use strict';
require('../../modules/es.aggregate-error');
require('../../modules/es.array.iterator');
require('../../modules/es.object.to-string');
require('../../modules/es.promise');
require('../../modules/es.promise.all-settled');
require('../../modules/es.promise.any');
require('../../modules/es.promise.finally');
require('../../modules/es.string.iterator');
var path = require('../../internals/path');

module.exports = path.Promise;

},{"../../internals/path":199,"../../modules/es.aggregate-error":239,"../../modules/es.array.iterator":242,"../../modules/es.object.to-string":249,"../../modules/es.promise":256,"../../modules/es.promise.all-settled":250,"../../modules/es.promise.any":252,"../../modules/es.promise.finally":255,"../../modules/es.string.iterator":264}],74:[function(require,module,exports){
'use strict';
require('../../modules/es.array.iterator');
require('../../modules/es.object.to-string');
require('../../modules/es.set');
require('../../modules/es.string.iterator');
var path = require('../../internals/path');

module.exports = path.Set;

},{"../../internals/path":199,"../../modules/es.array.iterator":242,"../../modules/es.object.to-string":249,"../../modules/es.set":262,"../../modules/es.string.iterator":264}],75:[function(require,module,exports){
'use strict';
require('../../modules/es.string.ends-with');
var entryUnbind = require('../../internals/entry-unbind');

module.exports = entryUnbind('String', 'endsWith');

},{"../../internals/entry-unbind":126,"../../modules/es.string.ends-with":263}],76:[function(require,module,exports){
'use strict';
require('../../modules/es.array.concat');
require('../../modules/es.object.to-string');
require('../../modules/es.symbol');
require('../../modules/es.symbol.async-iterator');
require('../../modules/es.symbol.description');
require('../../modules/es.symbol.has-instance');
require('../../modules/es.symbol.is-concat-spreadable');
require('../../modules/es.symbol.iterator');
require('../../modules/es.symbol.match');
require('../../modules/es.symbol.match-all');
require('../../modules/es.symbol.replace');
require('../../modules/es.symbol.search');
require('../../modules/es.symbol.species');
require('../../modules/es.symbol.split');
require('../../modules/es.symbol.to-primitive');
require('../../modules/es.symbol.to-string-tag');
require('../../modules/es.symbol.unscopables');
require('../../modules/es.json.to-string-tag');
require('../../modules/es.math.to-string-tag');
require('../../modules/es.reflect.to-string-tag');
var path = require('../../internals/path');

module.exports = path.Symbol;

},{"../../internals/path":199,"../../modules/es.array.concat":240,"../../modules/es.json.to-string-tag":244,"../../modules/es.math.to-string-tag":247,"../../modules/es.object.to-string":249,"../../modules/es.reflect.to-string-tag":260,"../../modules/es.symbol":272,"../../modules/es.symbol.async-iterator":265,"../../modules/es.symbol.description":267,"../../modules/es.symbol.has-instance":269,"../../modules/es.symbol.is-concat-spreadable":270,"../../modules/es.symbol.iterator":271,"../../modules/es.symbol.match":275,"../../modules/es.symbol.match-all":274,"../../modules/es.symbol.replace":276,"../../modules/es.symbol.search":277,"../../modules/es.symbol.species":278,"../../modules/es.symbol.split":279,"../../modules/es.symbol.to-primitive":280,"../../modules/es.symbol.to-string-tag":281,"../../modules/es.symbol.unscopables":282}],77:[function(require,module,exports){
'use strict';
require('../../modules/es.typed-array.fill');

},{"../../modules/es.typed-array.fill":283}],78:[function(require,module,exports){
'use strict';
require('../../modules/es.typed-array.slice');

},{"../../modules/es.typed-array.slice":284}],79:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var tryToString = require('../internals/try-to-string');

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw new $TypeError(tryToString(argument) + ' is not a function');
};

},{"../internals/is-callable":161,"../internals/try-to-string":228}],80:[function(require,module,exports){
'use strict';
var isConstructor = require('../internals/is-constructor');
var tryToString = require('../internals/try-to-string');

var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw new $TypeError(tryToString(argument) + ' is not a constructor');
};

},{"../internals/is-constructor":162,"../internals/try-to-string":228}],81:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw new $TypeError("Can't set " + $String(argument) + ' as a prototype');
};

},{"../internals/is-callable":161}],82:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var defineProperty = require('../internals/object-define-property').f;

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] === undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/object-create":182,"../internals/object-define-property":184,"../internals/well-known-symbol":237}],83:[function(require,module,exports){
'use strict';
var isPrototypeOf = require('../internals/object-is-prototype-of');

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw new $TypeError('Incorrect invocation');
};

},{"../internals/object-is-prototype-of":191}],84:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw new $TypeError($String(argument) + ' is not an object');
};

},{"../internals/is-object":165}],85:[function(require,module,exports){
'use strict';
// eslint-disable-next-line es/no-typed-arrays -- safe
module.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

},{}],86:[function(require,module,exports){
'use strict';
// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
var fails = require('../internals/fails');

module.exports = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
  }
});

},{"../internals/fails":132}],87:[function(require,module,exports){
'use strict';
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-basic-detection');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var hasOwn = require('../internals/has-own-property');
var classof = require('../internals/classof');
var tryToString = require('../internals/try-to-string');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var defineBuiltIn = require('../internals/define-built-in');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var uid = require('../internals/uid');
var InternalStateModule = require('../internals/internal-state');

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var TypeError = global.TypeError;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME, Constructor, Prototype;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};

var isView = function isView(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return klass === 'DataView'
    || hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var getTypedArrayConstructor = function (it) {
  var proto = getPrototypeOf(it);
  if (!isObject(proto)) return;
  var state = getInternalState(proto);
  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
};

var isTypedArray = function (it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw new TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;
  throw new TypeError(tryToString(C) + ' is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced, options) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) { /* empty */ }
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) { /* empty */ }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      defineBuiltIn(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
  else NATIVE_ARRAY_BUFFER_VIEWS = false;
}

for (NAME in BigIntArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray = function TypedArray() {
    throw new TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {
    configurable: true,
    get: function () {
      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
    }
  });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  getTypedArrayConstructor: getTypedArrayConstructor,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

},{"../internals/array-buffer-basic-detection":85,"../internals/classof":98,"../internals/create-non-enumerable-property":105,"../internals/define-built-in":109,"../internals/define-built-in-accessor":108,"../internals/descriptors":112,"../internals/global":147,"../internals/has-own-property":148,"../internals/internal-state":158,"../internals/is-callable":161,"../internals/is-object":165,"../internals/object-get-prototype-of":189,"../internals/object-is-prototype-of":191,"../internals/object-set-prototype-of":195,"../internals/try-to-string":228,"../internals/uid":230,"../internals/well-known-symbol":237}],88:[function(require,module,exports){
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"../internals/length-of-array-like":175,"../internals/to-absolute-index":218,"../internals/to-object":223}],89:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el !== el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value !== value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/length-of-array-like":175,"../internals/to-absolute-index":218,"../internals/to-indexed-object":220}],90:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var uncurryThis = require('../internals/function-uncurry-this');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE === 1;
  var IS_FILTER = TYPE === 2;
  var IS_SOME = TYPE === 3;
  var IS_EVERY = TYPE === 4;
  var IS_FIND_INDEX = TYPE === 6;
  var IS_FILTER_REJECT = TYPE === 7;
  var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};

},{"../internals/array-species-create":95,"../internals/function-bind-context":135,"../internals/function-uncurry-this":141,"../internals/indexed-object":153,"../internals/length-of-array-like":175,"../internals/to-object":223}],91:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/engine-v8-version":125,"../internals/fails":132,"../internals/well-known-symbol":237}],92:[function(require,module,exports){
'use strict';
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var createProperty = require('../internals/create-property');

var $Array = Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  var n = 0;
  for (; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};

},{"../internals/create-property":107,"../internals/length-of-array-like":175,"../internals/to-absolute-index":218}],93:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = uncurryThis([].slice);

},{"../internals/function-uncurry-this":141}],94:[function(require,module,exports){
'use strict';
var isArray = require('../internals/is-array');
var isConstructor = require('../internals/is-constructor');
var isObject = require('../internals/is-object');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};

},{"../internals/is-array":160,"../internals/is-constructor":162,"../internals/is-object":165,"../internals/well-known-symbol":237}],95:[function(require,module,exports){
'use strict';
var arraySpeciesConstructor = require('../internals/array-species-constructor');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

},{"../internals/array-species-constructor":94}],96:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  try {
    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  } catch (error) { return false; } // workaround of old WebKit + `eval` bug
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":237}],97:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};

},{"../internals/function-uncurry-this":141}],98:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var isCallable = require('../internals/is-callable');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

},{"../internals/classof-raw":97,"../internals/is-callable":161,"../internals/to-string-tag-support":226,"../internals/well-known-symbol":237}],99:[function(require,module,exports){
'use strict';
var create = require('../internals/object-create');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var defineBuiltIns = require('../internals/define-built-ins');
var bind = require('../internals/function-bind-context');
var anInstance = require('../internals/an-instance');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var iterate = require('../internals/iterate');
var defineIterator = require('../internals/iterator-define');
var createIterResultObject = require('../internals/create-iter-result-object');
var setSpecies = require('../internals/set-species');
var DESCRIPTORS = require('../internals/descriptors');
var fastKey = require('../internals/internal-metadata').fastKey;
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key === key) return entry;
      }
    };

    defineBuiltIns(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first === entry) state.first = next;
          if (state.last === entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    defineBuiltIns(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineBuiltInAccessor(Prototype, 'size', {
      configurable: true,
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return createIterResultObject(undefined, true);
      }
      // return step by kind
      if (kind === 'keys') return createIterResultObject(entry.key, false);
      if (kind === 'values') return createIterResultObject(entry.value, false);
      return createIterResultObject([entry.key, entry.value], false);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};

},{"../internals/an-instance":83,"../internals/create-iter-result-object":104,"../internals/define-built-in-accessor":108,"../internals/define-built-ins":110,"../internals/descriptors":112,"../internals/function-bind-context":135,"../internals/internal-metadata":157,"../internals/internal-state":158,"../internals/is-null-or-undefined":164,"../internals/iterate":169,"../internals/iterator-define":172,"../internals/object-create":182,"../internals/set-species":207}],100:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var isForced = require('../internals/is-forced');
var defineBuiltIn = require('../internals/define-built-in');
var InternalMetadataModule = require('../internals/internal-metadata');
var iterate = require('../internals/iterate');
var anInstance = require('../internals/an-instance');
var isCallable = require('../internals/is-callable');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var isObject = require('../internals/is-object');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var setToStringTag = require('../internals/set-to-string-tag');
var inheritIfRequired = require('../internals/inherit-if-required');

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
    defineBuiltIn(NativePrototype, KEY,
      KEY === 'add' ? function add(value) {
        uncurriedNativeMethod(this, value === 0 ? 0 : value);
        return this;
      } : KEY === 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY === 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY === 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  var REPLACE = isForced(
    CONSTRUCTOR_NAME,
    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    }))
  );

  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) !== instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, NativePrototype);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, constructor: true, forced: Constructor !== NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};

},{"../internals/an-instance":83,"../internals/check-correctness-of-iteration":96,"../internals/define-built-in":109,"../internals/export":131,"../internals/fails":132,"../internals/function-uncurry-this":141,"../internals/global":147,"../internals/inherit-if-required":154,"../internals/internal-metadata":157,"../internals/is-callable":161,"../internals/is-forced":163,"../internals/is-null-or-undefined":164,"../internals/is-object":165,"../internals/iterate":169,"../internals/set-to-string-tag":208}],101:[function(require,module,exports){
'use strict';
var hasOwn = require('../internals/has-own-property');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

},{"../internals/has-own-property":148,"../internals/object-define-property":184,"../internals/object-get-own-property-descriptor":185,"../internals/own-keys":198}],102:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":237}],103:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":132}],104:[function(require,module,exports){
'use strict';
// `CreateIterResultObject` abstract operation
// https://tc39.es/ecma262/#sec-createiterresultobject
module.exports = function (value, done) {
  return { value: value, done: done };
};

},{}],105:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/create-property-descriptor":106,"../internals/descriptors":112,"../internals/object-define-property":184}],106:[function(require,module,exports){
'use strict';
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],107:[function(require,module,exports){
'use strict';
var toPropertyKey = require('../internals/to-property-key');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/create-property-descriptor":106,"../internals/object-define-property":184,"../internals/to-property-key":225}],108:[function(require,module,exports){
'use strict';
var makeBuiltIn = require('../internals/make-built-in');
var defineProperty = require('../internals/object-define-property');

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};

},{"../internals/make-built-in":176,"../internals/object-define-property":184}],109:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var definePropertyModule = require('../internals/object-define-property');
var makeBuiltIn = require('../internals/make-built-in');
var defineGlobalProperty = require('../internals/define-global-property');

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};

},{"../internals/define-global-property":111,"../internals/is-callable":161,"../internals/make-built-in":176,"../internals/object-define-property":184}],110:[function(require,module,exports){
'use strict';
var defineBuiltIn = require('../internals/define-built-in');

module.exports = function (target, src, options) {
  for (var key in src) defineBuiltIn(target, key, src[key], options);
  return target;
};

},{"../internals/define-built-in":109}],111:[function(require,module,exports){
'use strict';
var global = require('../internals/global');

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/global":147}],112:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;
});

},{"../internals/fails":132}],113:[function(require,module,exports){
'use strict';
var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;

module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};

},{}],114:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":147,"../internals/is-object":165}],115:[function(require,module,exports){
'use strict';
var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};

},{}],116:[function(require,module,exports){
'use strict';
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],117:[function(require,module,exports){
'use strict';
// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = require('../internals/document-create-element');

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;

},{"../internals/document-create-element":114}],118:[function(require,module,exports){
'use strict';
var IS_DENO = require('../internals/engine-is-deno');
var IS_NODE = require('../internals/engine-is-node');

module.exports = !IS_DENO && !IS_NODE
  && typeof window == 'object'
  && typeof document == 'object';

},{"../internals/engine-is-deno":119,"../internals/engine-is-node":122}],119:[function(require,module,exports){
'use strict';
/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';

},{}],120:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

module.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != 'undefined';

},{"../internals/engine-user-agent":124}],121:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

// eslint-disable-next-line redos/no-vulnerable -- safe
module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":124}],122:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var classof = require('../internals/classof-raw');

module.exports = classof(global.process) === 'process';

},{"../internals/classof-raw":97,"../internals/global":147}],123:[function(require,module,exports){
'use strict';
var userAgent = require('../internals/engine-user-agent');

module.exports = /web0s(?!.*chrome)/i.test(userAgent);

},{"../internals/engine-user-agent":124}],124:[function(require,module,exports){
'use strict';
module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';

},{}],125:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;

},{"../internals/engine-user-agent":124,"../internals/global":147}],126:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = function (CONSTRUCTOR, METHOD) {
  return uncurryThis(global[CONSTRUCTOR].prototype[METHOD]);
};

},{"../internals/function-uncurry-this":141,"../internals/global":147}],127:[function(require,module,exports){
'use strict';
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],128:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

var $Error = Error;
var replace = uncurryThis(''.replace);

var TEST = (function (arg) { return String(new $Error(arg).stack); })('zxcasd');
// eslint-disable-next-line redos/no-vulnerable -- safe
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};

},{"../internals/function-uncurry-this":141}],129:[function(require,module,exports){
'use strict';
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var clearErrorStack = require('../internals/error-stack-clear');
var ERROR_STACK_INSTALLABLE = require('../internals/error-stack-installable');

// non-standard V8
var captureStackTrace = Error.captureStackTrace;

module.exports = function (error, C, stack, dropEntries) {
  if (ERROR_STACK_INSTALLABLE) {
    if (captureStackTrace) captureStackTrace(error, C);
    else createNonEnumerableProperty(error, 'stack', clearErrorStack(stack, dropEntries));
  }
};

},{"../internals/create-non-enumerable-property":105,"../internals/error-stack-clear":128,"../internals/error-stack-installable":130}],130:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = !fails(function () {
  var error = new Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});

},{"../internals/create-property-descriptor":106,"../internals/fails":132}],131:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var defineBuiltIn = require('../internals/define-built-in');
var defineGlobalProperty = require('../internals/define-global-property');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};

},{"../internals/copy-constructor-properties":101,"../internals/create-non-enumerable-property":105,"../internals/define-built-in":109,"../internals/define-global-property":111,"../internals/global":147,"../internals/is-forced":163,"../internals/object-get-own-property-descriptor":185}],132:[function(require,module,exports){
'use strict';
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],133:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});

},{"../internals/fails":132}],134:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});

},{"../internals/function-bind-native":136}],135:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this-clause');
var aCallable = require('../internals/a-callable');
var NATIVE_BIND = require('../internals/function-bind-native');

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-callable":79,"../internals/function-bind-native":136,"../internals/function-uncurry-this-clause":140}],136:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

},{"../internals/fails":132}],137:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};

},{"../internals/function-bind-native":136}],138:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var hasOwn = require('../internals/has-own-property');

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

},{"../internals/descriptors":112,"../internals/has-own-property":148}],139:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var aCallable = require('../internals/a-callable');

module.exports = function (object, key, method) {
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
  } catch (error) { /* empty */ }
};

},{"../internals/a-callable":79,"../internals/function-uncurry-this":141}],140:[function(require,module,exports){
'use strict';
var classofRaw = require('../internals/classof-raw');
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};

},{"../internals/classof-raw":97,"../internals/function-uncurry-this":141}],141:[function(require,module,exports){
'use strict';
var NATIVE_BIND = require('../internals/function-bind-native');

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};

},{"../internals/function-bind-native":136}],142:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};

},{"../internals/global":147,"../internals/is-callable":161}],143:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof');
var getMethod = require('../internals/get-method');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};

},{"../internals/classof":98,"../internals/get-method":146,"../internals/is-null-or-undefined":164,"../internals/iterators":174,"../internals/well-known-symbol":237}],144:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var anObject = require('../internals/an-object');
var tryToString = require('../internals/try-to-string');
var getIteratorMethod = require('../internals/get-iterator-method');

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw new $TypeError(tryToString(argument) + ' is not iterable');
};

},{"../internals/a-callable":79,"../internals/an-object":84,"../internals/function-call":137,"../internals/get-iterator-method":143,"../internals/try-to-string":228}],145:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var isArray = require('../internals/is-array');
var isCallable = require('../internals/is-callable');
var classof = require('../internals/classof-raw');
var toString = require('../internals/to-string');

var push = uncurryThis([].push);

module.exports = function (replacer) {
  if (isCallable(replacer)) return replacer;
  if (!isArray(replacer)) return;
  var rawLength = replacer.length;
  var keys = [];
  for (var i = 0; i < rawLength; i++) {
    var element = replacer[i];
    if (typeof element == 'string') push(keys, element);
    else if (typeof element == 'number' || classof(element) === 'Number' || classof(element) === 'String') push(keys, toString(element));
  }
  var keysLength = keys.length;
  var root = true;
  return function (key, value) {
    if (root) {
      root = false;
      return value;
    }
    if (isArray(this)) return value;
    for (var j = 0; j < keysLength; j++) if (keys[j] === key) return value;
  };
};

},{"../internals/classof-raw":97,"../internals/function-uncurry-this":141,"../internals/is-array":160,"../internals/is-callable":161,"../internals/to-string":227}],146:[function(require,module,exports){
'use strict';
var aCallable = require('../internals/a-callable');
var isNullOrUndefined = require('../internals/is-null-or-undefined');

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};

},{"../internals/a-callable":79,"../internals/is-null-or-undefined":164}],147:[function(require,module,exports){
(function (global){(function (){
'use strict';
var check = function (it) {
  return it && it.Math === Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || this || Function('return this')();

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],148:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var toObject = require('../internals/to-object');

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

},{"../internals/function-uncurry-this":141,"../internals/to-object":223}],149:[function(require,module,exports){
'use strict';
module.exports = {};

},{}],150:[function(require,module,exports){
'use strict';
module.exports = function (a, b) {
  try {
    // eslint-disable-next-line no-console -- safe
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  } catch (error) { /* empty */ }
};

},{}],151:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":142}],152:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a !== 7;
});

},{"../internals/descriptors":112,"../internals/document-create-element":114,"../internals/fails":132}],153:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) === 'String' ? split(it, '') : $Object(it);
} : $Object;

},{"../internals/classof-raw":97,"../internals/fails":132,"../internals/function-uncurry-this":141}],154:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-callable":161,"../internals/is-object":165,"../internals/object-set-prototype-of":195}],155:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var isCallable = require('../internals/is-callable');
var store = require('../internals/shared-store');

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/function-uncurry-this":141,"../internals/is-callable":161,"../internals/shared-store":210}],156:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};

},{"../internals/create-non-enumerable-property":105,"../internals/is-object":165}],157:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var uncurryThis = require('../internals/function-uncurry-this');
var hiddenKeys = require('../internals/hidden-keys');
var isObject = require('../internals/is-object');
var hasOwn = require('../internals/has-own-property');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternalModule = require('../internals/object-get-own-property-names-external');
var isExtensible = require('../internals/object-is-extensible');
var uid = require('../internals/uid');
var FREEZING = require('../internals/freezing');

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;

},{"../internals/export":131,"../internals/freezing":133,"../internals/function-uncurry-this":141,"../internals/has-own-property":148,"../internals/hidden-keys":149,"../internals/is-object":165,"../internals/object-define-property":184,"../internals/object-get-own-property-names":187,"../internals/object-get-own-property-names-external":186,"../internals/object-is-extensible":190,"../internals/uid":230}],158:[function(require,module,exports){
'use strict';
var NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var hasOwn = require('../internals/has-own-property');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/create-non-enumerable-property":105,"../internals/global":147,"../internals/has-own-property":148,"../internals/hidden-keys":149,"../internals/is-object":165,"../internals/shared-key":209,"../internals/shared-store":210,"../internals/weak-map-basic-detection":234}],159:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/iterators":174,"../internals/well-known-symbol":237}],160:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) === 'Array';
};

},{"../internals/classof-raw":97}],161:[function(require,module,exports){
'use strict';
var $documentAll = require('../internals/document-all');

var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};

},{"../internals/document-all":113}],162:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var classof = require('../internals/classof');
var getBuiltIn = require('../internals/get-built-in');
var inspectSource = require('../internals/inspect-source');

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.test(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;

},{"../internals/classof":98,"../internals/fails":132,"../internals/function-uncurry-this":141,"../internals/get-built-in":142,"../internals/inspect-source":155,"../internals/is-callable":161}],163:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value === POLYFILL ? true
    : value === NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":132,"../internals/is-callable":161}],164:[function(require,module,exports){
'use strict';
// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};

},{}],165:[function(require,module,exports){
'use strict';
var isCallable = require('../internals/is-callable');
var $documentAll = require('../internals/document-all');

var documentAll = $documentAll.all;

module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

},{"../internals/document-all":113,"../internals/is-callable":161}],166:[function(require,module,exports){
'use strict';
module.exports = false;

},{}],167:[function(require,module,exports){
'use strict';
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) === 'RegExp');
};

},{"../internals/classof-raw":97,"../internals/is-object":165,"../internals/well-known-symbol":237}],168:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};

},{"../internals/get-built-in":142,"../internals/is-callable":161,"../internals/object-is-prototype-of":191,"../internals/use-symbol-as-uid":231}],169:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var tryToString = require('../internals/try-to-string');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var iteratorClose = require('../internals/iterator-close');

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw new $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};

},{"../internals/an-object":84,"../internals/function-bind-context":135,"../internals/function-call":137,"../internals/get-iterator":144,"../internals/get-iterator-method":143,"../internals/is-array-iterator-method":159,"../internals/iterator-close":170,"../internals/length-of-array-like":175,"../internals/object-is-prototype-of":191,"../internals/try-to-string":228}],170:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var anObject = require('../internals/an-object');
var getMethod = require('../internals/get-method');

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

},{"../internals/an-object":84,"../internals/function-call":137,"../internals/get-method":146}],171:[function(require,module,exports){
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/create-property-descriptor":106,"../internals/iterators":174,"../internals/iterators-core":173,"../internals/object-create":182,"../internals/set-to-string-tag":208}],172:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var IS_PURE = require('../internals/is-pure');
var FunctionName = require('../internals/function-name');
var isCallable = require('../internals/is-callable');
var createIteratorConstructor = require('../internals/iterator-create-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var defineBuiltIn = require('../internals/define-built-in');
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];

    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    }

    return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME === 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};

},{"../internals/create-non-enumerable-property":105,"../internals/define-built-in":109,"../internals/export":131,"../internals/function-call":137,"../internals/function-name":138,"../internals/is-callable":161,"../internals/is-pure":166,"../internals/iterator-create-constructor":171,"../internals/iterators":174,"../internals/iterators-core":173,"../internals/object-get-prototype-of":189,"../internals/object-set-prototype-of":195,"../internals/set-to-string-tag":208,"../internals/well-known-symbol":237}],173:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var defineBuiltIn = require('../internals/define-built-in');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/define-built-in":109,"../internals/fails":132,"../internals/is-callable":161,"../internals/is-object":165,"../internals/is-pure":166,"../internals/object-create":182,"../internals/object-get-prototype-of":189,"../internals/well-known-symbol":237}],174:[function(require,module,exports){
arguments[4][149][0].apply(exports,arguments)
},{"dup":149}],175:[function(require,module,exports){
'use strict';
var toLength = require('../internals/to-length');

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};

},{"../internals/to-length":222}],176:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var hasOwn = require('../internals/has-own-property');
var DESCRIPTORS = require('../internals/descriptors');
var CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');

},{"../internals/descriptors":112,"../internals/fails":132,"../internals/function-name":138,"../internals/function-uncurry-this":141,"../internals/has-own-property":148,"../internals/inspect-source":155,"../internals/internal-state":158,"../internals/is-callable":161}],177:[function(require,module,exports){
'use strict';
var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};

},{}],178:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var bind = require('../internals/function-bind-context');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var macrotask = require('../internals/task').set;
var Queue = require('../internals/queue');
var IS_IOS = require('../internals/engine-is-ios');
var IS_IOS_PEBBLE = require('../internals/engine-is-ios-pebble');
var IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');
var IS_NODE = require('../internals/engine-is-node');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var microtask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
var notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!microtask) {
  var queue = new Queue();

  var flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (fn = queue.get()) try {
      fn();
    } catch (error) {
      if (queue.head) notify();
      throw error;
    }
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // `webpack` dev server bug on IE global methods - use bind(fn, global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }

  microtask = function (fn) {
    if (!queue.head) notify();
    queue.add(fn);
  };
}

module.exports = microtask;

},{"../internals/engine-is-ios":121,"../internals/engine-is-ios-pebble":120,"../internals/engine-is-node":122,"../internals/engine-is-webos-webkit":123,"../internals/function-bind-context":135,"../internals/global":147,"../internals/object-get-own-property-descriptor":185,"../internals/queue":205,"../internals/task":217}],179:[function(require,module,exports){
'use strict';
var aCallable = require('../internals/a-callable');

var $TypeError = TypeError;

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw new $TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-callable":79}],180:[function(require,module,exports){
'use strict';
var toString = require('../internals/to-string');

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};

},{"../internals/to-string":227}],181:[function(require,module,exports){
'use strict';
var isRegExp = require('../internals/is-regexp');

var $TypeError = TypeError;

module.exports = function (it) {
  if (isRegExp(it)) {
    throw new $TypeError("The method doesn't accept regular expressions");
  } return it;
};

},{"../internals/is-regexp":167}],182:[function(require,module,exports){
'use strict';
/* global ActiveXObject -- old IE, WSH */
var anObject = require('../internals/an-object');
var definePropertiesModule = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

},{"../internals/an-object":84,"../internals/document-create-element":114,"../internals/enum-bug-keys":127,"../internals/hidden-keys":149,"../internals/html":151,"../internals/object-define-properties":183,"../internals/shared-key":209}],183:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var toIndexedObject = require('../internals/to-indexed-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};

},{"../internals/an-object":84,"../internals/descriptors":112,"../internals/object-define-property":184,"../internals/object-keys":193,"../internals/to-indexed-object":220,"../internals/v8-prototype-define-bug":232}],184:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');
var anObject = require('../internals/an-object');
var toPropertyKey = require('../internals/to-property-key');

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/an-object":84,"../internals/descriptors":112,"../internals/ie8-dom-define":152,"../internals/to-property-key":225,"../internals/v8-prototype-define-bug":232}],185:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var call = require('../internals/function-call');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPropertyKey = require('../internals/to-property-key');
var hasOwn = require('../internals/has-own-property');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

},{"../internals/create-property-descriptor":106,"../internals/descriptors":112,"../internals/function-call":137,"../internals/has-own-property":148,"../internals/ie8-dom-define":152,"../internals/object-property-is-enumerable":194,"../internals/to-indexed-object":220,"../internals/to-property-key":225}],186:[function(require,module,exports){
'use strict';
/* eslint-disable es/no-object-getownpropertynames -- safe */
var classof = require('../internals/classof-raw');
var toIndexedObject = require('../internals/to-indexed-object');
var $getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var arraySlice = require('../internals/array-slice-simple');

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) === 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/array-slice-simple":92,"../internals/classof-raw":97,"../internals/object-get-own-property-names":187,"../internals/to-indexed-object":220}],187:[function(require,module,exports){
'use strict';
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/enum-bug-keys":127,"../internals/object-keys-internal":192}],188:[function(require,module,exports){
'use strict';
// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

},{}],189:[function(require,module,exports){
'use strict';
var hasOwn = require('../internals/has-own-property');
var isCallable = require('../internals/is-callable');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};

},{"../internals/correct-prototype-getter":103,"../internals/has-own-property":148,"../internals/is-callable":161,"../internals/shared-key":209,"../internals/to-object":223}],190:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var ARRAY_BUFFER_NON_EXTENSIBLE = require('../internals/array-buffer-non-extensible');

// eslint-disable-next-line es/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
module.exports = (FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE) ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) === 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;

},{"../internals/array-buffer-non-extensible":86,"../internals/classof-raw":97,"../internals/fails":132,"../internals/is-object":165}],191:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

module.exports = uncurryThis({}.isPrototypeOf);

},{"../internals/function-uncurry-this":141}],192:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var hasOwn = require('../internals/has-own-property');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};

},{"../internals/array-includes":89,"../internals/function-uncurry-this":141,"../internals/has-own-property":148,"../internals/hidden-keys":149,"../internals/to-indexed-object":220}],193:[function(require,module,exports){
'use strict';
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/enum-bug-keys":127,"../internals/object-keys-internal":192}],194:[function(require,module,exports){
'use strict';
var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

},{}],195:[function(require,module,exports){
'use strict';
/* eslint-disable no-proto -- safe */
var uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/a-possible-prototype":81,"../internals/an-object":84,"../internals/function-uncurry-this-accessor":139}],196:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/classof":98,"../internals/to-string-tag-support":226}],197:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw new $TypeError("Can't convert object to primitive value");
};

},{"../internals/function-call":137,"../internals/is-callable":161,"../internals/is-object":165}],198:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var uncurryThis = require('../internals/function-uncurry-this');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

},{"../internals/an-object":84,"../internals/function-uncurry-this":141,"../internals/get-built-in":142,"../internals/object-get-own-property-names":187,"../internals/object-get-own-property-symbols":188}],199:[function(require,module,exports){
'use strict';
var global = require('../internals/global');

module.exports = global;

},{"../internals/global":147}],200:[function(require,module,exports){
'use strict';
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],201:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var isCallable = require('../internals/is-callable');
var isForced = require('../internals/is-forced');
var inspectSource = require('../internals/inspect-source');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_BROWSER = require('../internals/engine-is-browser');
var IS_DENO = require('../internals/engine-is-deno');
var IS_PURE = require('../internals/is-pure');
var V8_VERSION = require('../internals/engine-v8-version');

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
    // Detect correctness of subclassing with @@species support
    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
    var FakePromise = function (exec) {
      exec(function () { /* empty */ }, function () { /* empty */ });
    };
    var constructor = promise.constructor = {};
    constructor[SPECIES] = FakePromise;
    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
    if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  } return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};

},{"../internals/engine-is-browser":118,"../internals/engine-is-deno":119,"../internals/engine-v8-version":125,"../internals/global":147,"../internals/inspect-source":155,"../internals/is-callable":161,"../internals/is-forced":163,"../internals/is-pure":166,"../internals/promise-native-constructor":202,"../internals/well-known-symbol":237}],202:[function(require,module,exports){
'use strict';
var global = require('../internals/global');

module.exports = global.Promise;

},{"../internals/global":147}],203:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":84,"../internals/is-object":165,"../internals/new-promise-capability":179}],204:[function(require,module,exports){
'use strict';
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});

},{"../internals/check-correctness-of-iteration":96,"../internals/promise-constructor-detection":201,"../internals/promise-native-constructor":202}],205:[function(require,module,exports){
'use strict';
var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    var tail = this.tail;
    if (tail) tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      var next = this.head = entry.next;
      if (next === null) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;

},{}],206:[function(require,module,exports){
'use strict';
var isNullOrUndefined = require('../internals/is-null-or-undefined');

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
  return it;
};

},{"../internals/is-null-or-undefined":164}],207:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineBuiltInAccessor(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/define-built-in-accessor":108,"../internals/descriptors":112,"../internals/get-built-in":142,"../internals/well-known-symbol":237}],208:[function(require,module,exports){
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var hasOwn = require('../internals/has-own-property');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/has-own-property":148,"../internals/object-define-property":184,"../internals/well-known-symbol":237}],209:[function(require,module,exports){
'use strict';
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":211,"../internals/uid":230}],210:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var defineGlobalProperty = require('../internals/define-global-property');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;

},{"../internals/define-global-property":111,"../internals/global":147}],211:[function(require,module,exports){
'use strict';
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.33.2',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

},{"../internals/is-pure":166,"../internals/shared-store":210}],212:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');
var aConstructor = require('../internals/a-constructor');
var isNullOrUndefined = require('../internals/is-null-or-undefined');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
};

},{"../internals/a-constructor":80,"../internals/an-object":84,"../internals/is-null-or-undefined":164,"../internals/well-known-symbol":237}],213:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');
var toString = require('../internals/to-string');
var requireObjectCoercible = require('../internals/require-object-coercible');

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/function-uncurry-this":141,"../internals/require-object-coercible":206,"../internals/to-integer-or-infinity":221,"../internals/to-string":227}],214:[function(require,module,exports){
'use strict';
/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = require('../internals/engine-v8-version');
var fails = require('../internals/fails');
var global = require('../internals/global');

var $String = global.String;

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol('symbol detection');
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
  // of course, fail.
  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

},{"../internals/engine-v8-version":125,"../internals/fails":132,"../internals/global":147}],215:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var getBuiltIn = require('../internals/get-built-in');
var wellKnownSymbol = require('../internals/well-known-symbol');
var defineBuiltIn = require('../internals/define-built-in');

module.exports = function () {
  var Symbol = getBuiltIn('Symbol');
  var SymbolPrototype = Symbol && Symbol.prototype;
  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    // eslint-disable-next-line no-unused-vars -- required for .length
    defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      return call(valueOf, this);
    }, { arity: 1 });
  }
};

},{"../internals/define-built-in":109,"../internals/function-call":137,"../internals/get-built-in":142,"../internals/well-known-symbol":237}],216:[function(require,module,exports){
'use strict';
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');

/* eslint-disable es/no-symbol -- safe */
module.exports = NATIVE_SYMBOL && !!Symbol['for'] && !!Symbol.keyFor;

},{"../internals/symbol-constructor-detection":214}],217:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var apply = require('../internals/function-apply');
var bind = require('../internals/function-bind-context');
var isCallable = require('../internals/is-callable');
var hasOwn = require('../internals/has-own-property');
var fails = require('../internals/fails');
var html = require('../internals/html');
var arraySlice = require('../internals/array-slice');
var createElement = require('../internals/document-create-element');
var validateArgumentsLength = require('../internals/validate-arguments-length');
var IS_IOS = require('../internals/engine-is-ios');
var IS_NODE = require('../internals/engine-is-node');

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var $location, defer, channel, port;

fails(function () {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  $location = global.location;
});

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var eventListener = function (event) {
  run(event.data);
};

var globalPostMessageDefer = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), $location.protocol + '//' + $location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = eventListener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    $location && $location.protocol !== 'file:' &&
    !fails(globalPostMessageDefer)
  ) {
    defer = globalPostMessageDefer;
    global.addEventListener('message', eventListener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/array-slice":93,"../internals/document-create-element":114,"../internals/engine-is-ios":121,"../internals/engine-is-node":122,"../internals/fails":132,"../internals/function-apply":134,"../internals/function-bind-context":135,"../internals/global":147,"../internals/has-own-property":148,"../internals/html":151,"../internals/is-callable":161,"../internals/validate-arguments-length":233}],218:[function(require,module,exports){
'use strict';
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer-or-infinity":221}],219:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');

var $TypeError = TypeError;

// `ToBigInt` abstract operation
// https://tc39.es/ecma262/#sec-tobigint
module.exports = function (argument) {
  var prim = toPrimitive(argument, 'number');
  if (typeof prim == 'number') throw new $TypeError("Can't convert number to bigint");
  // eslint-disable-next-line es/no-bigint -- safe
  return BigInt(prim);
};

},{"../internals/to-primitive":224}],220:[function(require,module,exports){
'use strict';
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":153,"../internals/require-object-coercible":206}],221:[function(require,module,exports){
'use strict';
var trunc = require('../internals/math-trunc');

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

},{"../internals/math-trunc":177}],222:[function(require,module,exports){
'use strict';
var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer-or-infinity":221}],223:[function(require,module,exports){
'use strict';
var requireObjectCoercible = require('../internals/require-object-coercible');

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":206}],224:[function(require,module,exports){
'use strict';
var call = require('../internals/function-call');
var isObject = require('../internals/is-object');
var isSymbol = require('../internals/is-symbol');
var getMethod = require('../internals/get-method');
var ordinaryToPrimitive = require('../internals/ordinary-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw new $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

},{"../internals/function-call":137,"../internals/get-method":146,"../internals/is-object":165,"../internals/is-symbol":168,"../internals/ordinary-to-primitive":197,"../internals/well-known-symbol":237}],225:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');
var isSymbol = require('../internals/is-symbol');

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

},{"../internals/is-symbol":168,"../internals/to-primitive":224}],226:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":237}],227:[function(require,module,exports){
'use strict';
var classof = require('../internals/classof');

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};

},{"../internals/classof":98}],228:[function(require,module,exports){
'use strict';
var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};

},{}],229:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var speciesConstructor = require('../internals/species-constructor');

var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;

// a part of `TypedArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#typedarray-species-create
module.exports = function (originalArray) {
  return aTypedArrayConstructor(speciesConstructor(originalArray, getTypedArrayConstructor(originalArray)));
};

},{"../internals/array-buffer-view-core":87,"../internals/species-constructor":212}],230:[function(require,module,exports){
'use strict';
var uncurryThis = require('../internals/function-uncurry-this');

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

},{"../internals/function-uncurry-this":141}],231:[function(require,module,exports){
'use strict';
/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

},{"../internals/symbol-constructor-detection":214}],232:[function(require,module,exports){
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype !== 42;
});

},{"../internals/descriptors":112,"../internals/fails":132}],233:[function(require,module,exports){
'use strict';
var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw new $TypeError('Not enough arguments');
  return passed;
};

},{}],234:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var isCallable = require('../internals/is-callable');

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));

},{"../internals/global":147,"../internals/is-callable":161}],235:[function(require,module,exports){
'use strict';
var path = require('../internals/path');
var hasOwn = require('../internals/has-own-property');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/has-own-property":148,"../internals/object-define-property":184,"../internals/path":199,"../internals/well-known-symbol-wrapped":236}],236:[function(require,module,exports){
'use strict';
var wellKnownSymbol = require('../internals/well-known-symbol');

exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":237}],237:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var shared = require('../internals/shared');
var hasOwn = require('../internals/has-own-property');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":147,"../internals/has-own-property":148,"../internals/shared":211,"../internals/symbol-constructor-detection":214,"../internals/uid":230,"../internals/use-symbol-as-uid":231}],238:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var create = require('../internals/object-create');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var installErrorCause = require('../internals/install-error-cause');
var installErrorStack = require('../internals/error-stack-install');
var iterate = require('../internals/iterate');
var normalizeStringArgument = require('../internals/normalize-string-argument');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Error = Error;
var push = [].push;

var $AggregateError = function AggregateError(errors, message /* , options */) {
  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
  var that;
  if (setPrototypeOf) {
    that = setPrototypeOf(new $Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
  } else {
    that = isInstance ? this : create(AggregateErrorPrototype);
    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');
  }
  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));
  installErrorStack(that, $AggregateError, that.stack, 1);
  if (arguments.length > 2) installErrorCause(that, arguments[2]);
  var errorsArray = [];
  iterate(errors, push, { that: errorsArray });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};

if (setPrototypeOf) setPrototypeOf($AggregateError, $Error);
else copyConstructorProperties($AggregateError, $Error, { name: true });

var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
});

// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({ global: true, constructor: true, arity: 2 }, {
  AggregateError: $AggregateError
});

},{"../internals/copy-constructor-properties":101,"../internals/create-non-enumerable-property":105,"../internals/create-property-descriptor":106,"../internals/error-stack-install":129,"../internals/export":131,"../internals/install-error-cause":156,"../internals/iterate":169,"../internals/normalize-string-argument":180,"../internals/object-create":182,"../internals/object-get-prototype-of":189,"../internals/object-is-prototype-of":191,"../internals/object-set-prototype-of":195,"../internals/well-known-symbol":237}],239:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's replaced to module below
require('../modules/es.aggregate-error.constructor');

},{"../modules/es.aggregate-error.constructor":238}],240:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var lengthOfArrayLike = require('../internals/length-of-array-like');
var doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport('concat');

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        doesNotExceedSafeInteger(n + len);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        doesNotExceedSafeInteger(n + 1);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/array-method-has-species-support":91,"../internals/array-species-create":95,"../internals/create-property":107,"../internals/does-not-exceed-safe-integer":115,"../internals/engine-v8-version":125,"../internals/export":131,"../internals/fails":132,"../internals/is-array":160,"../internals/is-object":165,"../internals/length-of-array-like":175,"../internals/to-object":223,"../internals/well-known-symbol":237}],241:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var fill = require('../internals/array-fill');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

},{"../internals/add-to-unscopables":82,"../internals/array-fill":88,"../internals/export":131}],242:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineProperty = require('../internals/object-define-property').f;
var defineIterator = require('../internals/iterator-define');
var createIterResultObject = require('../internals/create-iter-result-object');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return createIterResultObject(undefined, true);
  }
  switch (state.kind) {
    case 'keys': return createIterResultObject(index, false);
    case 'values': return createIterResultObject(target[index], false);
  } return createIterResultObject([index, target[index]], false);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }

},{"../internals/add-to-unscopables":82,"../internals/create-iter-result-object":104,"../internals/descriptors":112,"../internals/internal-state":158,"../internals/is-pure":166,"../internals/iterator-define":172,"../internals/iterators":174,"../internals/object-define-property":184,"../internals/to-indexed-object":220}],243:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var apply = require('../internals/function-apply');
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');
var isCallable = require('../internals/is-callable');
var isSymbol = require('../internals/is-symbol');
var arraySlice = require('../internals/array-slice');
var getReplacerFunction = require('../internals/get-json-replacer-function');
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');

var $String = String;
var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);

var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')('stringify detection');
  // MS Edge converts symbol values to JSON as {}
  return $stringify([symbol]) !== '[null]'
    // WebKit converts symbol values to JSON as null
    || $stringify({ a: symbol }) !== '{}'
    // V8 throws on boxed symbols
    || $stringify(Object(symbol)) !== '{}';
});

// https://github.com/tc39/proposal-well-formed-stringify
var ILL_FORMED_UNICODE = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

var stringifyWithSymbolsFix = function (it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = getReplacerFunction(replacer);
  if (!isCallable($replacer) && (it === undefined || isSymbol(it))) return; // IE8 returns string on undefined
  args[1] = function (key, value) {
    // some old implementations (like WebKit) could pass numbers as keys
    if (isCallable($replacer)) value = call($replacer, this, $String(key), value);
    if (!isSymbol(value)) return value;
  };
  return apply($stringify, null, args);
};

var fixIllFormed = function (match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);
  if ((exec(low, match) && !exec(hi, next)) || (exec(hi, match) && !exec(low, prev))) {
    return '\\u' + numberToString(charCodeAt(match, 0), 16);
  } return match;
};

if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({ target: 'JSON', stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}

},{"../internals/array-slice":93,"../internals/export":131,"../internals/fails":132,"../internals/function-apply":134,"../internals/function-call":137,"../internals/function-uncurry-this":141,"../internals/get-built-in":142,"../internals/get-json-replacer-function":145,"../internals/is-callable":161,"../internals/is-symbol":168,"../internals/symbol-constructor-detection":214}],244:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

// JSON[@@toStringTag] property
// https://tc39.es/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":147,"../internals/set-to-string-tag":208}],245:[function(require,module,exports){
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":100,"../internals/collection-strong":99}],246:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's replaced to module below
require('../modules/es.map.constructor');

},{"../modules/es.map.constructor":245}],247:[function(require,module,exports){
'use strict';
var setToStringTag = require('../internals/set-to-string-tag');

// Math[@@toStringTag] property
// https://tc39.es/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":208}],248:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');
var fails = require('../internals/fails');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var toObject = require('../internals/to-object');

// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FORCED = !NATIVE_SYMBOL || fails(function () { getOwnPropertySymbolsModule.f(1); });

// `Object.getOwnPropertySymbols` method
// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
$({ target: 'Object', stat: true, forced: FORCED }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
  }
});

},{"../internals/export":131,"../internals/fails":132,"../internals/object-get-own-property-symbols":188,"../internals/symbol-constructor-detection":214,"../internals/to-object":223}],249:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var defineBuiltIn = require('../internals/define-built-in');
var toString = require('../internals/object-to-string');

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, { unsafe: true });
}

},{"../internals/define-built-in":109,"../internals/object-to-string":196,"../internals/to-string-tag-support":226}],250:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: error };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":79,"../internals/export":131,"../internals/function-call":137,"../internals/iterate":169,"../internals/new-promise-capability":179,"../internals/perform":200,"../internals/promise-statics-incorrect-iteration":204}],251:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":79,"../internals/export":131,"../internals/function-call":137,"../internals/iterate":169,"../internals/new-promise-capability":179,"../internals/perform":200,"../internals/promise-statics-incorrect-iteration":204}],252:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var getBuiltIn = require('../internals/get-built-in');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

var PROMISE_ANY_ERROR = 'No one promise resolved';

// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":79,"../internals/export":131,"../internals/function-call":137,"../internals/get-built-in":142,"../internals/iterate":169,"../internals/new-promise-capability":179,"../internals/perform":200,"../internals/promise-statics-incorrect-iteration":204}],253:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var defineBuiltIn = require('../internals/define-built-in');

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}

},{"../internals/define-built-in":109,"../internals/export":131,"../internals/get-built-in":142,"../internals/is-callable":161,"../internals/is-pure":166,"../internals/promise-constructor-detection":201,"../internals/promise-native-constructor":202}],254:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var IS_NODE = require('../internals/engine-is-node');
var global = require('../internals/global');
var call = require('../internals/function-call');
var defineBuiltIn = require('../internals/define-built-in');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var aCallable = require('../internals/a-callable');
var isCallable = require('../internals/is-callable');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var hostReportErrors = require('../internals/host-report-errors');
var perform = require('../internals/perform');
var Queue = require('../internals/queue');
var InternalStateModule = require('../internals/internal-state');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var PromiseConstructorDetection = require('../internals/promise-constructor-detection');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state === FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(new TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw new TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state === PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

},{"../internals/a-callable":79,"../internals/an-instance":83,"../internals/define-built-in":109,"../internals/engine-is-node":122,"../internals/export":131,"../internals/function-call":137,"../internals/global":147,"../internals/host-report-errors":150,"../internals/internal-state":158,"../internals/is-callable":161,"../internals/is-object":165,"../internals/is-pure":166,"../internals/microtask":178,"../internals/new-promise-capability":179,"../internals/object-set-prototype-of":195,"../internals/perform":200,"../internals/promise-constructor-detection":201,"../internals/promise-native-constructor":202,"../internals/queue":205,"../internals/set-species":207,"../internals/set-to-string-tag":208,"../internals/species-constructor":212,"../internals/task":217}],255:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var fails = require('../internals/fails');
var getBuiltIn = require('../internals/get-built-in');
var isCallable = require('../internals/is-callable');
var speciesConstructor = require('../internals/species-constructor');
var promiseResolve = require('../internals/promise-resolve');
var defineBuiltIn = require('../internals/define-built-in');

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromiseConstructor && fails(function () {
  // eslint-disable-next-line unicorn/no-thenable -- required for testing
  NativePromisePrototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['finally'];
  if (NativePromisePrototype['finally'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'finally', method, { unsafe: true });
  }
}

},{"../internals/define-built-in":109,"../internals/export":131,"../internals/fails":132,"../internals/get-built-in":142,"../internals/is-callable":161,"../internals/is-pure":166,"../internals/promise-native-constructor":202,"../internals/promise-resolve":203,"../internals/species-constructor":212}],256:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's split to modules listed below
require('../modules/es.promise.constructor');
require('../modules/es.promise.all');
require('../modules/es.promise.catch');
require('../modules/es.promise.race');
require('../modules/es.promise.reject');
require('../modules/es.promise.resolve');

},{"../modules/es.promise.all":251,"../modules/es.promise.catch":253,"../modules/es.promise.constructor":254,"../modules/es.promise.race":257,"../modules/es.promise.reject":258,"../modules/es.promise.resolve":259}],257:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');
var PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/a-callable":79,"../internals/export":131,"../internals/function-call":137,"../internals/iterate":169,"../internals/new-promise-capability":179,"../internals/perform":200,"../internals/promise-statics-incorrect-iteration":204}],258:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var call = require('../internals/function-call');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});

},{"../internals/export":131,"../internals/function-call":137,"../internals/new-promise-capability":179,"../internals/promise-constructor-detection":201}],259:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var IS_PURE = require('../internals/is-pure');
var NativePromiseConstructor = require('../internals/promise-native-constructor');
var FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;
var promiseResolve = require('../internals/promise-resolve');

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});

},{"../internals/export":131,"../internals/get-built-in":142,"../internals/is-pure":166,"../internals/promise-constructor-detection":201,"../internals/promise-native-constructor":202,"../internals/promise-resolve":203}],260:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

$({ global: true }, { Reflect: {} });

// Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
setToStringTag(global.Reflect, 'Reflect', true);

},{"../internals/export":131,"../internals/global":147,"../internals/set-to-string-tag":208}],261:[function(require,module,exports){
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":100,"../internals/collection-strong":99}],262:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's replaced to module below
require('../modules/es.set.constructor');

},{"../modules/es.set.constructor":261}],263:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var uncurryThis = require('../internals/function-uncurry-this-clause');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var toString = require('../internals/to-string');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');

// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var nativeEndsWith = uncurryThis(''.endsWith);
var slice = uncurryThis(''.slice);
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = that.length;
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = toString(searchString);
    return nativeEndsWith
      ? nativeEndsWith(that, search, end)
      : slice(that, end - search.length, end) === search;
  }
});

},{"../internals/correct-is-regexp-logic":102,"../internals/export":131,"../internals/function-uncurry-this-clause":140,"../internals/is-pure":166,"../internals/not-a-regexp":181,"../internals/object-get-own-property-descriptor":185,"../internals/require-object-coercible":206,"../internals/to-length":222,"../internals/to-string":227}],264:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var toString = require('../internals/to-string');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/iterator-define');
var createIterResultObject = require('../internals/create-iter-result-object');

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return createIterResultObject(undefined, true);
  point = charAt(string, index);
  state.index += point.length;
  return createIterResultObject(point, false);
});

},{"../internals/create-iter-result-object":104,"../internals/internal-state":158,"../internals/iterator-define":172,"../internals/string-multibyte":213,"../internals/to-string":227}],265:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.asyncIterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/well-known-symbol-define":235}],266:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');
var fails = require('../internals/fails');
var hasOwn = require('../internals/has-own-property');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var anObject = require('../internals/an-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPropertyKey = require('../internals/to-property-key');
var $toString = require('../internals/to-string');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var definePropertiesModule = require('../internals/object-define-properties');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var defineBuiltIn = require('../internals/define-built-in');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');
var defineSymbolToPrimitive = require('../internals/symbol-define-to-primitive');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';

var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);

var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var RangeError = global.RangeError;
var TypeError = global.TypeError;
var QObject = global.QObject;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);

var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var fallbackDefineProperty = function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
};

var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a !== 7;
}) ? fallbackDefineProperty : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]
    ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};

var $getOwnPropertySymbols = function (O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw new TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      var $this = this === undefined ? global : this;
      if ($this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn($this, HIDDEN) && hasOwn($this[HIDDEN], tag)) $this[HIDDEN][tag] = false;
      var descriptor = createPropertyDescriptor(1, value);
      try {
        setSymbolDescriptor($this, tag, descriptor);
      } catch (error) {
        if (!(error instanceof RangeError)) throw error;
        fallbackDefineProperty($this, tag, descriptor);
      }
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  SymbolPrototype = $Symbol[PROTOTYPE];

  defineBuiltIn(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });

  defineBuiltIn($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    defineBuiltInAccessor(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      defineBuiltIn(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;

},{"../internals/an-object":84,"../internals/array-iteration":90,"../internals/create-property-descriptor":106,"../internals/define-built-in":109,"../internals/define-built-in-accessor":108,"../internals/descriptors":112,"../internals/export":131,"../internals/fails":132,"../internals/function-call":137,"../internals/function-uncurry-this":141,"../internals/global":147,"../internals/has-own-property":148,"../internals/hidden-keys":149,"../internals/internal-state":158,"../internals/is-pure":166,"../internals/object-create":182,"../internals/object-define-properties":183,"../internals/object-define-property":184,"../internals/object-get-own-property-descriptor":185,"../internals/object-get-own-property-names":187,"../internals/object-get-own-property-names-external":186,"../internals/object-get-own-property-symbols":188,"../internals/object-is-prototype-of":191,"../internals/object-keys":193,"../internals/object-property-is-enumerable":194,"../internals/set-to-string-tag":208,"../internals/shared":211,"../internals/shared-key":209,"../internals/symbol-constructor-detection":214,"../internals/symbol-define-to-primitive":215,"../internals/to-indexed-object":220,"../internals/to-property-key":225,"../internals/to-string":227,"../internals/uid":230,"../internals/well-known-symbol":237,"../internals/well-known-symbol-define":235,"../internals/well-known-symbol-wrapped":236}],267:[function(require,module,exports){
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var uncurryThis = require('../internals/function-uncurry-this');
var hasOwn = require('../internals/has-own-property');
var isCallable = require('../internals/is-callable');
var isPrototypeOf = require('../internals/object-is-prototype-of');
var toString = require('../internals/to-string');
var defineBuiltInAccessor = require('../internals/define-built-in-accessor');
var copyConstructorProperties = require('../internals/copy-constructor-properties');

var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
    var result = isPrototypeOf(SymbolPrototype, this)
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };

  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;

  var NATIVE_SYMBOL = String(NativeSymbol('description detection')) === 'Symbol(description detection)';
  var thisSymbolValue = uncurryThis(SymbolPrototype.valueOf);
  var symbolDescriptiveString = uncurryThis(SymbolPrototype.toString);
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  var replace = uncurryThis(''.replace);
  var stringSlice = uncurryThis(''.slice);

  defineBuiltInAccessor(SymbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = thisSymbolValue(this);
      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
      var string = symbolDescriptiveString(symbol);
      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, constructor: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}

},{"../internals/copy-constructor-properties":101,"../internals/define-built-in-accessor":108,"../internals/descriptors":112,"../internals/export":131,"../internals/function-uncurry-this":141,"../internals/global":147,"../internals/has-own-property":148,"../internals/is-callable":161,"../internals/object-is-prototype-of":191,"../internals/to-string":227}],268:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var hasOwn = require('../internals/has-own-property');
var toString = require('../internals/to-string');
var shared = require('../internals/shared');
var NATIVE_SYMBOL_REGISTRY = require('../internals/symbol-registry-detection');

var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.for` method
// https://tc39.es/ecma262/#sec-symbol.for
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  'for': function (key) {
    var string = toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = getBuiltIn('Symbol')(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  }
});

},{"../internals/export":131,"../internals/get-built-in":142,"../internals/has-own-property":148,"../internals/shared":211,"../internals/symbol-registry-detection":216,"../internals/to-string":227}],269:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.hasInstance` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/well-known-symbol-define":235}],270:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/well-known-symbol-define":235}],271:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/well-known-symbol-define":235}],272:[function(require,module,exports){
'use strict';
// TODO: Remove this module from `core-js@4` since it's split to modules listed below
require('../modules/es.symbol.constructor');
require('../modules/es.symbol.for');
require('../modules/es.symbol.key-for');
require('../modules/es.json.stringify');
require('../modules/es.object.get-own-property-symbols');

},{"../modules/es.json.stringify":243,"../modules/es.object.get-own-property-symbols":248,"../modules/es.symbol.constructor":266,"../modules/es.symbol.for":268,"../modules/es.symbol.key-for":273}],273:[function(require,module,exports){
'use strict';
var $ = require('../internals/export');
var hasOwn = require('../internals/has-own-property');
var isSymbol = require('../internals/is-symbol');
var tryToString = require('../internals/try-to-string');
var shared = require('../internals/shared');
var NATIVE_SYMBOL_REGISTRY = require('../internals/symbol-registry-detection');

var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.keyFor` method
// https://tc39.es/ecma262/#sec-symbol.keyfor
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw new TypeError(tryToString(sym) + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});

},{"../internals/export":131,"../internals/has-own-property":148,"../internals/is-symbol":168,"../internals/shared":211,"../internals/symbol-registry-detection":216,"../internals/try-to-string":228}],274:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.matchAll` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.matchall
defineWellKnownSymbol('matchAll');

},{"../internals/well-known-symbol-define":235}],275:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.match` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/well-known-symbol-define":235}],276:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.replace` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/well-known-symbol-define":235}],277:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.search` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/well-known-symbol-define":235}],278:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.species` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/well-known-symbol-define":235}],279:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.split` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/well-known-symbol-define":235}],280:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');
var defineSymbolToPrimitive = require('../internals/symbol-define-to-primitive');

// `Symbol.toPrimitive` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

},{"../internals/symbol-define-to-primitive":215,"../internals/well-known-symbol-define":235}],281:[function(require,module,exports){
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');
var setToStringTag = require('../internals/set-to-string-tag');

// `Symbol.toStringTag` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag(getBuiltIn('Symbol'), 'Symbol');

},{"../internals/get-built-in":142,"../internals/set-to-string-tag":208,"../internals/well-known-symbol-define":235}],282:[function(require,module,exports){
'use strict';
var defineWellKnownSymbol = require('../internals/well-known-symbol-define');

// `Symbol.unscopables` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/well-known-symbol-define":235}],283:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $fill = require('../internals/array-fill');
var toBigInt = require('../internals/to-big-int');
var classof = require('../internals/classof');
var call = require('../internals/function-call');
var uncurryThis = require('../internals/function-uncurry-this');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var slice = uncurryThis(''.slice);

// V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18
var CONVERSION_BUG = fails(function () {
  var count = 0;
  // eslint-disable-next-line es/no-typed-arrays -- safe
  new Int8Array(2).fill({ valueOf: function () { return count++; } });
  return count !== 1;
});

// `%TypedArray%.prototype.fill` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  var length = arguments.length;
  aTypedArray(this);
  var actualValue = slice(classof(this), 0, 3) === 'Big' ? toBigInt(value) : +value;
  return call($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);
}, CONVERSION_BUG);

},{"../internals/array-buffer-view-core":87,"../internals/array-fill":88,"../internals/classof":98,"../internals/fails":132,"../internals/function-call":137,"../internals/function-uncurry-this":141,"../internals/to-big-int":219}],284:[function(require,module,exports){
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var typedArraySpeciesConstructor = require('../internals/typed-array-species-constructor');
var fails = require('../internals/fails');
var arraySlice = require('../internals/array-slice');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var FORCED = fails(function () {
  // eslint-disable-next-line es/no-typed-arrays -- required for testing
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = arraySlice(aTypedArray(this), start, end);
  var C = typedArraySpeciesConstructor(this);
  var index = 0;
  var length = list.length;
  var result = new C(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);

},{"../internals/array-buffer-view-core":87,"../internals/array-slice":93,"../internals/fails":132,"../internals/typed-array-species-constructor":229}],285:[function(require,module,exports){
'use strict';
var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var DOMTokenListPrototype = require('../internals/dom-token-list-prototype');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

},{"../internals/create-non-enumerable-property":105,"../internals/dom-iterables":116,"../internals/dom-token-list-prototype":117,"../internals/global":147,"../internals/well-known-symbol":237,"../modules/es.array.iterator":242}],286:[function(require,module,exports){
'use strict';
var parent = require('../../es/array/fill');

module.exports = parent;

},{"../../es/array/fill":70}],287:[function(require,module,exports){
'use strict';
var parent = require('../../es/array/iterator');

module.exports = parent;

},{"../../es/array/iterator":71}],288:[function(require,module,exports){
'use strict';
var parent = require('../../es/map');
require('../../modules/web.dom-collections.iterator');

module.exports = parent;

},{"../../es/map":72,"../../modules/web.dom-collections.iterator":285}],289:[function(require,module,exports){
'use strict';
var parent = require('../../es/promise');
require('../../modules/web.dom-collections.iterator');

module.exports = parent;

},{"../../es/promise":73,"../../modules/web.dom-collections.iterator":285}],290:[function(require,module,exports){
'use strict';
var parent = require('../../es/set');
require('../../modules/web.dom-collections.iterator');

module.exports = parent;

},{"../../es/set":74,"../../modules/web.dom-collections.iterator":285}],291:[function(require,module,exports){
'use strict';
var parent = require('../../es/string/ends-with');

module.exports = parent;

},{"../../es/string/ends-with":75}],292:[function(require,module,exports){
'use strict';
var parent = require('../../es/symbol');
require('../../modules/web.dom-collections.iterator');

module.exports = parent;

},{"../../es/symbol":76,"../../modules/web.dom-collections.iterator":285}],293:[function(require,module,exports){
'use strict';
var parent = require('../../es/typed-array/fill');

module.exports = parent;

},{"../../es/typed-array/fill":77}],294:[function(require,module,exports){
'use strict';
var parent = require('../../es/typed-array/slice');

module.exports = parent;

},{"../../es/typed-array/slice":78}],295:[function(require,module,exports){
(function (global){(function (){
(function(a,b){if("function"==typeof define&&define.amd)define([],b);else if("undefined"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,"undefined"!=typeof module&&(module.exports=g)});


}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],296:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-08-28T13:37Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var version = "3.7.1",

	rhtmlSuffix = /HTML$/i,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},


	// Retrieve the text value of an array of DOM nodes
	text: function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += jQuery.text( node );
			}
		}
		if ( nodeType === 1 || nodeType === 11 ) {
			return elem.textContent;
		}
		if ( nodeType === 9 ) {
			return elem.documentElement.textContent;
		}
		if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	isXMLDoc: function( elem ) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Assume HTML when documentElement doesn't yet exist, such as inside
		// document fragments.
		return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}


function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var pop = arr.pop;


var sort = arr.sort;


var splice = arr.splice;


var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




// Note: an element does not contain itself
jQuery.contains = function( a, b ) {
	var bup = b && b.parentNode;

	return a === bup || !!( bup && bup.nodeType === 1 && (

		// Support: IE 9 - 11+
		// IE doesn't have `contains` on SVG.
		a.contains ?
			a.contains( bup ) :
			a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
	) );
};




// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

function fcssescape( ch, asCodePoint ) {
	if ( asCodePoint ) {

		// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
		if ( ch === "\0" ) {
			return "\uFFFD";
		}

		// Control characters and (dependent upon position) numbers get escaped as code points
		return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Other potentially-special ASCII characters get backslash-escaped
	return "\\" + ch;
}

jQuery.escapeSelector = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};




var preferredDoc = document,
	pushNative = push;

( function() {

var i,
	Expr,
	outermostContext,
	sortInput,
	hasDuplicate,
	push = pushNative,

	// Local document vars
	document,
	documentElement,
	documentIsHTML,
	rbuggyQSA,
	matches,

	// Instance-specific data
	expando = jQuery.expando,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
		"loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
		whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		ID: new RegExp( "^#(" + identifier + ")" ),
		CLASS: new RegExp( "^\\.(" + identifier + ")" ),
		TAG: new RegExp( "^(" + identifier + "|[*])" ),
		ATTR: new RegExp( "^" + attributes ),
		PSEUDO: new RegExp( "^" + pseudos ),
		CHILD: new RegExp(
			"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		needsContext: new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		if ( nonHex ) {

			// Strip the backslash prefix from a non-hex escape sequence
			return nonHex;
		}

		// Replace a hexadecimal escape sequence with the encoded Unicode code point
		// Support: IE <=11+
		// For values outside the Basic Multilingual Plane (BMP), manually construct a
		// surrogate pair
		return high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes; see `setDocument`.
	// Support: IE 9 - 11+, Edge 12 - 18+
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE/Edge.
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", next: "legend" }
	);

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android <=4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = {
		apply: function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		},
		call: function( target ) {
			pushNative.apply( target, slice.call( arguments, 1 ) );
		}
	};
}

function find( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE 9 only
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								push.call( results, elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE 9 only
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							find.contains( context, elem ) &&
							elem.id === m ) {

							push.call( results, elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( !nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when
					// strict-comparing two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( newContext != context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = jQuery.escapeSelector( nid );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties
		// (see https://github.com/jquery/sizzle/issues/157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by jQuery selector module
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		return nodeName( elem, "input" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
			elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11+
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a jQuery selector context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [node] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
function setDocument( node ) {
	var subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	documentElement = document.documentElement;
	documentIsHTML = !jQuery.isXMLDoc( document );

	// Support: iOS 7 only, IE 9 - 11+
	// Older browsers didn't support unprefixed `matches`.
	matches = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors
	// (see trac-13936).
	// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
	// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
	if ( documentElement.msMatchesSelector &&

		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener( "unload", unloadHandler );
	}

	// Support: IE <10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		documentElement.appendChild( el ).id = jQuery.expando;
		return !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Support: IE 9 only
	// Check to see if it's possible to do matchesSelector
	// on a disconnected node.
	support.disconnectedMatch = assert( function( el ) {
		return matches.call( el, "*" );
	} );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge don't support the :scope pseudo-class.
	support.scope = assert( function() {
		return document.querySelectorAll( ":scope" );
	} );

	// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
	// Make sure the `:has()` argument is parsed unforgivingly.
	// We include `*` in the test to detect buggy implementations that are
	// _selectively_ forgiving (specifically when the list includes at least
	// one valid selector).
	// Note that we treat complete lack of support for `:has()` as if it were
	// spec-compliant support, which is fine because use of `:has()` in such
	// environments will fail in the qSA path and fall back to jQuery traversal
	// anyway.
	support.cssHas = assert( function() {
		try {
			document.querySelector( ":has(*,:jqfake)" );
			return false;
		} catch ( e ) {
			return true;
		}
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter.ID = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter.ID =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find.TAG = function( tag, context ) {
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			return context.getElementsByTagName( tag );

		// DocumentFragment nodes don't have gEBTN
		} else {
			return context.querySelectorAll( tag );
		}
	};

	// Class
	Expr.find.CLASS = function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	rbuggyQSA = [];

	// Build QSA regex
	// Regex strategy adopted from Diego Perini
	assert( function( el ) {

		var input;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' disabled='disabled'></a>" +
			"<select id='" + expando + "-\r\\' disabled='disabled'>" +
			"<option selected=''></option></select>";

		// Support: iOS <=7 - 8 only
		// Boolean attributes and "value" are not treated correctly in some XML documents
		if ( !el.querySelectorAll( "[selected]" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
		}

		// Support: iOS <=7 - 8 only
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Support: iOS 8 only
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// In-page `selector#id sibling-combinator selector` fails
		if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		if ( !el.querySelectorAll( ":checked" ).length ) {
			rbuggyQSA.push( ":checked" );
		}

		// Support: Windows 8 Native Apps
		// The type and name attributes are restricted during .innerHTML assignment
		input = document.createElement( "input" );
		input.setAttribute( "type", "hidden" );
		el.appendChild( input ).setAttribute( "name", "D" );

		// Support: IE 9 - 11+
		// IE's :disabled selector does not pick up the children of disabled fieldsets
		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		documentElement.appendChild( el ).disabled = true;
		if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
			rbuggyQSA.push( ":enabled", ":disabled" );
		}

		// Support: IE 11+, Edge 15 - 18+
		// IE 11/Edge don't find elements on a `[name='']` query in some cases.
		// Adding a temporary attribute to the document before the selection works
		// around the issue.
		// Interestingly, IE 10 & older don't seem to have the issue.
		input = document.createElement( "input" );
		input.setAttribute( "name", "" );
		el.appendChild( input );
		if ( !el.querySelectorAll( "[name='']" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
				whitespace + "*(?:''|\"\")" );
		}
	} );

	if ( !support.cssHas ) {

		// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Our regular `try-catch` mechanism fails to detect natively-unsupported
		// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
		// in browsers that parse the `:has()` argument as a forgiving selector list.
		// https://drafts.csswg.org/selectors/#relational now requires the argument
		// to be parsed unforgivingly, but browsers have not yet fully adjusted.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a === document || a.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b === document || b.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	};

	return document;
}

find.matches = function( expr, elements ) {
	return find( expr, null, null, elements );
};

find.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return find( expr, document, null, [ elem ] ).length > 0;
};

find.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return jQuery.contains( context, elem );
};


find.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (see trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	if ( val !== undefined ) {
		return val;
	}

	return elem.getAttribute( name );
};

find.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
jQuery.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	//
	// Support: Android <=4.0+
	// Testing for detecting duplicates is unpredictable so instead assume we can't
	// depend on duplicate detection in all browsers without a stable sort.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( results, 0 );
	sort.call( results, sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			splice.call( results, duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

jQuery.fn.uniqueSort = function() {
	return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
};

Expr = jQuery.expr = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		ATTR: function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
				.replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		CHILD: function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					find.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
				);
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

			// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				find.error( match[ 0 ] );
			}

			return match;
		},

		PSEUDO: function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		TAG: function( nodeNameSelector ) {
			var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return nodeName( elem, expectedNodeName );
				};
		},

		CLASS: function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace + ")" + className +
					"(" + whitespace + "|$)" ) ) &&
				classCache( className, function( elem ) {
					return pattern.test(
						typeof elem.className === "string" && elem.className ||
							typeof elem.getAttribute !== "undefined" &&
								elem.getAttribute( "class" ) ||
							""
					);
				} );
		},

		ATTR: function( name, operator, check ) {
			return function( elem ) {
				var result = find.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				if ( operator === "=" ) {
					return result === check;
				}
				if ( operator === "!=" ) {
					return result !== check;
				}
				if ( operator === "^=" ) {
					return check && result.indexOf( check ) === 0;
				}
				if ( operator === "*=" ) {
					return check && result.indexOf( check ) > -1;
				}
				if ( operator === "$=" ) {
					return check && result.slice( -check.length ) === check;
				}
				if ( operator === "~=" ) {
					return ( " " + result.replace( rwhitespace, " " ) + " " )
						.indexOf( check ) > -1;
				}
				if ( operator === "|=" ) {
					return result === check || result.slice( 0, check.length + 1 ) === check + "-";
				}

				return false;
			};
		},

		CHILD: function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || ( parent[ expando ] = {} );
							cache = outerCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {
								outerCache = elem[ expando ] || ( elem[ expando ] = {} );
								cache = outerCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );
											outerCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		PSEUDO: function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// https://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as jQuery does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		not: markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrimCSS, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element
					// (see https://github.com/jquery/sizzle/issues/299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		has: markFunction( function( selector ) {
			return function( elem ) {
				return find( selector, elem ).length > 0;
			};
		} ),

		contains: markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// https://www.w3.org/TR/selectors/#lang-pseudo
		lang: markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				find.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		target: function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		root: function( elem ) {
			return elem === documentElement;
		},

		focus: function( elem ) {
			return elem === safeActiveElement() &&
				document.hasFocus() &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		enabled: createDisabledPseudo( false ),
		disabled: createDisabledPseudo( true ),

		checked: function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return ( nodeName( elem, "input" ) && !!elem.checked ) ||
				( nodeName( elem, "option" ) && !!elem.selected );
		},

		selected: function( elem ) {

			// Support: IE <=11+
			// Accessing the selectedIndex property
			// forces the browser to treat the default option as
			// selected when in an optgroup.
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		empty: function( elem ) {

			// https://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		parent: function( elem ) {
			return !Expr.pseudos.empty( elem );
		},

		// Element/input types
		header: function( elem ) {
			return rheader.test( elem.nodeName );
		},

		input: function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		button: function( elem ) {
			return nodeName( elem, "input" ) && elem.type === "button" ||
				nodeName( elem, "button" );
		},

		text: function( elem ) {
			var attr;
			return nodeName( elem, "input" ) && elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear
				// with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		first: createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		last: createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		even: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		odd: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i;

			if ( argument < 0 ) {
				i = argument + length;
			} else if ( argument > length ) {
				i = length;
			} else {
				i = argument;
			}

			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrimCSS, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	if ( parseOnly ) {
		return soFar.length;
	}

	return soFar ?
		find.error( selector ) :

		// Cache the tokens
		tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						if ( skip && nodeName( elem, skip ) ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = outerCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							outerCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		find( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem, matcherOut,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed ||
				multipleContexts( selector || "*",
					context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems;

		if ( matcher ) {

			// If we have a postFinder, or filtered seed, or non-seed postFilter
			// or preexisting results,
			matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results;

			// Find primary matches
			matcher( matcherIn, matcherOut, context, xml );
		} else {
			matcherOut = matcherIn;
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element
			// (see https://github.com/jquery/sizzle/issues/299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrimCSS, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find.TAG( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: iOS <=7 - 9 only
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
			// elements by id. (see trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							push.call( results, elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					jQuery.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

function compile( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
}

/**
 * A low-level selection function that works with jQuery's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with jQuery selector compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				context
			) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) &&
						testContext( context.parentNode ) || context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Support: Android <=4.0 - 4.1+
// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Initialize against the default document
setDocument();

// Support: Android <=4.0 - 4.1+
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

jQuery.find = find;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// These have always been private, but they used to be documented as part of
// Sizzle so let's maintain them for now for backwards compatibility purposes.
find.compile = compile;
find.select = select;
find.setDocument = setDocument;
find.tokenize = tokenize;

find.escape = jQuery.escapeSelector;
find.getText = jQuery.text;
find.isXML = jQuery.isXMLDoc;
find.selectors = jQuery.expr;
find.support = jQuery.support;
find.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to jQuery#find
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.error );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the error, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getErrorHook ) {
									process.error = jQuery.Deferred.getErrorHook();

								// The deprecated alias of the above. While the name suggests
								// returning the stack, not an error instance, jQuery just passes
								// it directly to `console.warn` so both will work; an instance
								// just better cooperates with source maps.
								} else if ( jQuery.Deferred.getStackHook ) {
									process.error = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
// captured before the async barrier to get the original error cause
// which may otherwise be hidden.
jQuery.Deferred.exceptionHook = function( error, asyncError ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message,
			error.stack, asyncError );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", true );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, isSetup ) {

	// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
	if ( !isSetup ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				if ( !saved ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					this[ type ]();
					result = dataPriv.get( this, type );
					dataPriv.set( this, type, false );

					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering
				// the native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(
					saved[ 0 ],
					saved.slice( 1 ),
					this
				) );

				// Abort handling of the native event by all jQuery handlers while allowing
				// native handlers on the same element to run. On target, this is achieved
				// by stopping immediate propagation just on the jQuery event. However,
				// the native event is re-wrapped by a jQuery one on each level of the
				// propagation so the only way to stop it for jQuery is to stop it for
				// everyone via native `stopPropagation()`. This is not a problem for
				// focus/blur which don't bubble, but it does also stop click on checkboxes
				// and radios. We accept this limitation.
				event.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

	function focusMappedHandler( nativeEvent ) {
		if ( document.documentMode ) {

			// Support: IE 11+
			// Attach a single focusin/focusout handler on the document while someone wants
			// focus/blur. This is because the former are synchronous in IE while the latter
			// are async. In other browsers, all those handlers are invoked synchronously.

			// `handle` from private data would already wrap the event, but we need
			// to change the `type` here.
			var handle = dataPriv.get( this, "handle" ),
				event = jQuery.event.fix( nativeEvent );
			event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
			event.isSimulated = true;

			// First, handle focusin/focusout
			handle( nativeEvent );

			// ...then, handle focus/blur
			//
			// focus/blur don't bubble while focusin/focusout do; simulate the former by only
			// invoking the handler at the lower level.
			if ( event.target === event.currentTarget ) {

				// The setup part calls `leverageNative`, which, in turn, calls
				// `jQuery.event.add`, so event handle will already have been set
				// by this point.
				handle( event );
			}
		} else {

			// For non-IE browsers, attach a single capturing handler on the document
			// while someone wants focusin/focusout.
			jQuery.event.simulate( delegateType, nativeEvent.target,
				jQuery.event.fix( nativeEvent ) );
		}
	}

	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			var attaches;

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, true );

			if ( document.documentMode ) {

				// Support: IE 9 - 11+
				// We use the same native handler for focusin & focus (and focusout & blur)
				// so we need to coordinate setup & teardown parts between those events.
				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
				attaches = dataPriv.get( this, delegateType );
				if ( !attaches ) {
					this.addEventListener( delegateType, focusMappedHandler );
				}
				dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
			} else {

				// Return false to allow normal processing in the caller
				return false;
			}
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		teardown: function() {
			var attaches;

			if ( document.documentMode ) {
				attaches = dataPriv.get( this, delegateType ) - 1;
				if ( !attaches ) {
					this.removeEventListener( delegateType, focusMappedHandler );
					dataPriv.remove( this, delegateType );
				} else {
					dataPriv.set( this, delegateType, attaches );
				}
			} else {

				// Return false to indicate standard teardown should be applied
				return false;
			}
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Support: IE 9 - 11+
	// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
	// attach a single handler for both events in IE.
	jQuery.event.special[ delegateType ] = {
		setup: function() {

			// Handle: regular nodes (via `this.ownerDocument`), window
			// (via `this.document`) & document (via `this`).
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType );

			// Support: IE 9 - 11+
			// We use the same native handler for focusin & focus (and focusout & blur)
			// so we need to coordinate setup & teardown parts between those events.
			// Use `delegateType` as the key as `type` is already used by `leverageNative`.
			if ( !attaches ) {
				if ( document.documentMode ) {
					this.addEventListener( delegateType, focusMappedHandler );
				} else {
					doc.addEventListener( type, focusMappedHandler, true );
				}
			}
			dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
		},
		teardown: function() {
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType ) - 1;

			if ( !attaches ) {
				if ( document.documentMode ) {
					this.removeEventListener( delegateType, focusMappedHandler );
				} else {
					doc.removeEventListener( type, focusMappedHandler, true );
				}
				dataPriv.remove( dataHolder, delegateType );
			} else {
				dataPriv.set( dataHolder, delegateType, attaches );
			}
		}
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Re-enable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew jQuery#find here for performance reasons:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "box-sizing:content-box;border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is `display: block`
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0,
		marginDelta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		// Count margin delta separately to only add it after scroll gutter adjustment.
		// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
		if ( box === "margin" ) {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta + marginDelta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		animationIterationCount: true,
		aspectRatio: true,
		borderImageSlice: true,
		columnCount: true,
		flexGrow: true,
		flexShrink: true,
		fontWeight: true,
		gridArea: true,
		gridColumn: true,
		gridColumnEnd: true,
		gridColumnStart: true,
		gridRow: true,
		gridRowEnd: true,
		gridRowStart: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		scale: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeMiterlimit: true,
		strokeOpacity: true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this
			.on( "mouseenter", fnOver )
			.on( "mouseleave", fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],297:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants
'use strict';

var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":298,"./lib/inflate":299,"./lib/utils/common":300,"./lib/zlib/constants":303}],298:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":300,"./utils/strings":301,"./zlib/deflate":305,"./zlib/messages":310,"./zlib/zstream":312}],299:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== c.Z_OK) {
        throw new Error(msg[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":300,"./utils/strings":301,"./zlib/constants":303,"./zlib/gzheader":306,"./zlib/inflate":308,"./zlib/messages":310,"./zlib/zstream":312}],300:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');

function _has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],301:[function(require,module,exports){
// String encode/decode helpers
'use strict';


var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":300}],302:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],303:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],304:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],305:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":300,"./adler32":302,"./crc32":304,"./messages":310,"./trees":311}],306:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],307:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],308:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              utils.arraySet(
                state.head.extra,
                input,
                next,
                // extra field is limited to 65536 bytes
                // - no need for additional size check
                copy,
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          utils.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inflate_fast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":300,"./adler32":302,"./crc32":304,"./inffast":307,"./inftrees":309}],309:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":300}],310:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],311:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":300}],312:[function(require,module,exports){
'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],313:[function(require,module,exports){
/*!
 * PEP v0.4.3 | https://github.com/jquery/PEP
 * Copyright jQuery Foundation and other contributors | http://jquery.org/license
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.PointerEventsPolyfill = factory());
}(this, function () { 'use strict';

  /**
   * This is the constructor for new PointerEvents.
   *
   * New Pointer Events must be given a type, and an optional dictionary of
   * initialization properties.
   *
   * Due to certain platform requirements, events returned from the constructor
   * identify as MouseEvents.
   *
   * @constructor
   * @param {String} inType The type of the event to create.
   * @param {Object} [inDict] An optional dictionary of initial event properties.
   * @return {Event} A new PointerEvent of type `inType`, initialized with properties from `inDict`.
   */
  var MOUSE_PROPS = [
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',
    'pageX',
    'pageY'
  ];

  var MOUSE_DEFAULTS = [
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,
    0,
    0
  ];

  function PointerEvent(inType, inDict) {
    inDict = inDict || Object.create(null);

    var e = document.createEvent('Event');
    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);

    // define inherited MouseEvent properties
    // skip bubbles and cancelable since they're set above in initEvent()
    for (var i = 2, p; i < MOUSE_PROPS.length; i++) {
      p = MOUSE_PROPS[i];
      e[p] = inDict[p] || MOUSE_DEFAULTS[i];
    }
    e.buttons = inDict.buttons || 0;

    // Spec requires that pointers without pressure specified use 0.5 for down
    // state and 0 for up state.
    var pressure = 0;

    if (inDict.pressure && e.buttons) {
      pressure = inDict.pressure;
    } else {
      pressure = e.buttons ? 0.5 : 0;
    }

    // add x/y properties aliased to clientX/Y
    e.x = e.clientX;
    e.y = e.clientY;

    // define the properties of the PointerEvent interface
    e.pointerId = inDict.pointerId || 0;
    e.width = inDict.width || 0;
    e.height = inDict.height || 0;
    e.pressure = pressure;
    e.tiltX = inDict.tiltX || 0;
    e.tiltY = inDict.tiltY || 0;
    e.twist = inDict.twist || 0;
    e.tangentialPressure = inDict.tangentialPressure || 0;
    e.pointerType = inDict.pointerType || '';
    e.hwTimestamp = inDict.hwTimestamp || 0;
    e.isPrimary = inDict.isPrimary || false;
    return e;
  }

  /**
   * This module implements a map of pointer states
   */
  var USE_MAP = window.Map && window.Map.prototype.forEach;
  var PointerMap = USE_MAP ? Map : SparseArrayMap;

  function SparseArrayMap() {
    this.array = [];
    this.size = 0;
  }

  SparseArrayMap.prototype = {
    set: function(k, v) {
      if (v === undefined) {
        return this.delete(k);
      }
      if (!this.has(k)) {
        this.size++;
      }
      this.array[k] = v;
    },
    has: function(k) {
      return this.array[k] !== undefined;
    },
    delete: function(k) {
      if (this.has(k)) {
        delete this.array[k];
        this.size--;
      }
    },
    get: function(k) {
      return this.array[k];
    },
    clear: function() {
      this.array.length = 0;
      this.size = 0;
    },

    // return value, key, map
    forEach: function(callback, thisArg) {
      return this.array.forEach(function(v, k) {
        callback.call(thisArg, v, k, this);
      }, this);
    }
  };

  var CLONE_PROPS = [

    // MouseEvent
    'bubbles',
    'cancelable',
    'view',
    'detail',
    'screenX',
    'screenY',
    'clientX',
    'clientY',
    'ctrlKey',
    'altKey',
    'shiftKey',
    'metaKey',
    'button',
    'relatedTarget',

    // DOM Level 3
    'buttons',

    // PointerEvent
    'pointerId',
    'width',
    'height',
    'pressure',
    'tiltX',
    'tiltY',
    'pointerType',
    'hwTimestamp',
    'isPrimary',

    // event instance
    'type',
    'target',
    'currentTarget',
    'which',
    'pageX',
    'pageY',
    'timeStamp'
  ];

  var CLONE_DEFAULTS = [

    // MouseEvent
    false,
    false,
    null,
    null,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    0,
    null,

    // DOM Level 3
    0,

    // PointerEvent
    0,
    0,
    0,
    0,
    0,
    0,
    '',
    0,
    false,

    // event instance
    '',
    null,
    null,
    0,
    0,
    0,
    0
  ];

  var BOUNDARY_EVENTS = {
    'pointerover': 1,
    'pointerout': 1,
    'pointerenter': 1,
    'pointerleave': 1
  };

  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');

  /**
   * This module is for normalizing events. Mouse and Touch events will be
   * collected here, and fire PointerEvents that have the same semantics, no
   * matter the source.
   * Events fired:
   *   - pointerdown: a pointing is added
   *   - pointerup: a pointer is removed
   *   - pointermove: a pointer is moved
   *   - pointerover: a pointer crosses into an element
   *   - pointerout: a pointer leaves an element
   *   - pointercancel: a pointer will no longer generate events
   */
  var dispatcher = {
    pointermap: new PointerMap(),
    eventMap: Object.create(null),
    captureInfo: Object.create(null),

    // Scope objects for native events.
    // This exists for ease of testing.
    eventSources: Object.create(null),
    eventSourceList: [],
    /**
     * Add a new event source that will generate pointer events.
     *
     * `inSource` must contain an array of event names named `events`, and
     * functions with the names specified in the `events` array.
     * @param {string} name A name for the event source
     * @param {Object} source A new source of platform events.
     */
    registerSource: function(name, source) {
      var s = source;
      var newEvents = s.events;
      if (newEvents) {
        newEvents.forEach(function(e) {
          if (s[e]) {
            this.eventMap[e] = s[e].bind(s);
          }
        }, this);
        this.eventSources[name] = s;
        this.eventSourceList.push(s);
      }
    },
    register: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {

        // call eventsource register
        es.register.call(es, element);
      }
    },
    unregister: function(element) {
      var l = this.eventSourceList.length;
      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {

        // call eventsource register
        es.unregister.call(es, element);
      }
    },
    contains: /*scope.external.contains || */function(container, contained) {
      try {
        return container.contains(contained);
      } catch (ex) {

        // most likely: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        return false;
      }
    },

    // EVENTS
    down: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerdown', inEvent);
    },
    move: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointermove', inEvent);
    },
    up: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerup', inEvent);
    },
    enter: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerenter', inEvent);
    },
    leave: function(inEvent) {
      inEvent.bubbles = false;
      this.fireEvent('pointerleave', inEvent);
    },
    over: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerover', inEvent);
    },
    out: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointerout', inEvent);
    },
    cancel: function(inEvent) {
      inEvent.bubbles = true;
      this.fireEvent('pointercancel', inEvent);
    },
    leaveOut: function(event) {
      this.out(event);
      this.propagate(event, this.leave, false);
    },
    enterOver: function(event) {
      this.over(event);
      this.propagate(event, this.enter, true);
    },

    // LISTENER LOGIC
    eventHandler: function(inEvent) {

      // This is used to prevent multiple dispatch of pointerevents from
      // platform events. This can happen when two elements in different scopes
      // are set up to create pointer events, which is relevant to Shadow DOM.
      if (inEvent._handledByPE) {
        return;
      }
      var type = inEvent.type;
      var fn = this.eventMap && this.eventMap[type];
      if (fn) {
        fn(inEvent);
      }
      inEvent._handledByPE = true;
    },

    // set up event listeners
    listen: function(target, events) {
      events.forEach(function(e) {
        this.addEvent(target, e);
      }, this);
    },

    // remove event listeners
    unlisten: function(target, events) {
      events.forEach(function(e) {
        this.removeEvent(target, e);
      }, this);
    },
    addEvent: /*scope.external.addEvent || */function(target, eventName) {
      target.addEventListener(eventName, this.boundHandler);
    },
    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {
      target.removeEventListener(eventName, this.boundHandler);
    },

    // EVENT CREATION AND TRACKING
    /**
     * Creates a new Event of type `inType`, based on the information in
     * `inEvent`.
     *
     * @param {string} inType A string representing the type of event to create
     * @param {Event} inEvent A platform event with a target
     * @return {Event} A PointerEvent of type `inType`
     */
    makeEvent: function(inType, inEvent) {

      // relatedTarget must be null if pointer is captured
      if (this.captureInfo[inEvent.pointerId]) {
        inEvent.relatedTarget = null;
      }
      var e = new PointerEvent(inType, inEvent);
      if (inEvent.preventDefault) {
        e.preventDefault = inEvent.preventDefault;
      }
      e._target = e._target || inEvent.target;
      return e;
    },

    // make and dispatch an event in one call
    fireEvent: function(inType, inEvent) {
      var e = this.makeEvent(inType, inEvent);
      return this.dispatchEvent(e);
    },
    /**
     * Returns a snapshot of inEvent, with writable properties.
     *
     * @param {Event} inEvent An event that contains properties to copy.
     * @return {Object} An object containing shallow copies of `inEvent`'s
     *    properties.
     */
    cloneEvent: function(inEvent) {
      var eventCopy = Object.create(null);
      var p;
      for (var i = 0; i < CLONE_PROPS.length; i++) {
        p = CLONE_PROPS[i];
        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];

        // Work around SVGInstanceElement shadow tree
        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.
        // This is the behavior implemented by Firefox.
        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {
          if (eventCopy[p] instanceof SVGElementInstance) {
            eventCopy[p] = eventCopy[p].correspondingUseElement;
          }
        }
      }

      // keep the semantics of preventDefault
      if (inEvent.preventDefault) {
        eventCopy.preventDefault = function() {
          inEvent.preventDefault();
        };
      }
      return eventCopy;
    },
    getTarget: function(inEvent) {
      var capture = this.captureInfo[inEvent.pointerId];
      if (!capture) {
        return inEvent._target;
      }
      if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {
        return capture;
      }
    },
    propagate: function(event, fn, propagateDown) {
      var target = event.target;
      var targets = [];

      // Order of conditions due to document.contains() missing in IE.
      while (target !== document && !target.contains(event.relatedTarget)) {
        targets.push(target);
        target = target.parentNode;

        // Touch: Do not propagate if node is detached.
        if (!target) {
          return;
        }
      }
      if (propagateDown) {
        targets.reverse();
      }
      targets.forEach(function(target) {
        event.target = target;
        fn.call(this, event);
      }, this);
    },
    setCapture: function(inPointerId, inTarget, skipDispatch) {
      if (this.captureInfo[inPointerId]) {
        this.releaseCapture(inPointerId, skipDispatch);
      }

      this.captureInfo[inPointerId] = inTarget;
      this.implicitRelease = this.releaseCapture.bind(this, inPointerId, skipDispatch);
      document.addEventListener('pointerup', this.implicitRelease);
      document.addEventListener('pointercancel', this.implicitRelease);

      var e = new PointerEvent('gotpointercapture');
      e.pointerId = inPointerId;
      e._target = inTarget;

      if (!skipDispatch) {
        this.asyncDispatchEvent(e);
      }
    },
    releaseCapture: function(inPointerId, skipDispatch) {
      var t = this.captureInfo[inPointerId];
      if (!t) {
        return;
      }

      this.captureInfo[inPointerId] = undefined;
      document.removeEventListener('pointerup', this.implicitRelease);
      document.removeEventListener('pointercancel', this.implicitRelease);

      var e = new PointerEvent('lostpointercapture');
      e.pointerId = inPointerId;
      e._target = t;

      if (!skipDispatch) {
        this.asyncDispatchEvent(e);
      }
    },
    /**
     * Dispatches the event to its target.
     *
     * @param {Event} inEvent The event to be dispatched.
     * @return {Boolean} True if an event handler returns true, false otherwise.
     */
    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {
      var t = this.getTarget(inEvent);
      if (t) {
        return t.dispatchEvent(inEvent);
      }
    },
    asyncDispatchEvent: function(inEvent) {
      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));
    }
  };
  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);

  var targeting = {
    shadow: function(inEl) {
      if (inEl) {
        return inEl.shadowRoot || inEl.webkitShadowRoot;
      }
    },
    canTarget: function(shadow) {
      return shadow && Boolean(shadow.elementFromPoint);
    },
    targetingShadow: function(inEl) {
      var s = this.shadow(inEl);
      if (this.canTarget(s)) {
        return s;
      }
    },
    olderShadow: function(shadow) {
      var os = shadow.olderShadowRoot;
      if (!os) {
        var se = shadow.querySelector('shadow');
        if (se) {
          os = se.olderShadowRoot;
        }
      }
      return os;
    },
    allShadows: function(element) {
      var shadows = [];
      var s = this.shadow(element);
      while (s) {
        shadows.push(s);
        s = this.olderShadow(s);
      }
      return shadows;
    },
    searchRoot: function(inRoot, x, y) {
      if (inRoot) {
        var t = inRoot.elementFromPoint(x, y);
        var st, sr;

        // is element a shadow host?
        sr = this.targetingShadow(t);
        while (sr) {

          // find the the element inside the shadow root
          st = sr.elementFromPoint(x, y);
          if (!st) {

            // check for older shadows
            sr = this.olderShadow(sr);
          } else {

            // shadowed element may contain a shadow root
            var ssr = this.targetingShadow(st);
            return this.searchRoot(ssr, x, y) || st;
          }
        }

        // light dom element is the target
        return t;
      }
    },
    owner: function(element) {
      var s = element;

      // walk up until you hit the shadow root or document
      while (s.parentNode) {
        s = s.parentNode;
      }

      // the owner element is expected to be a Document or ShadowRoot
      if (s.nodeType !== Node.DOCUMENT_NODE && s.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
        s = document;
      }
      return s;
    },
    findTarget: function(inEvent) {
      var x = inEvent.clientX;
      var y = inEvent.clientY;

      // if the listener is in the shadow root, it is much faster to start there
      var s = this.owner(inEvent.target);

      // if x, y is not in this root, fall back to document search
      if (!s.elementFromPoint(x, y)) {
        s = document;
      }
      return this.searchRoot(s, x, y);
    }
  };

  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
  var map = Array.prototype.map.call.bind(Array.prototype.map);
  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);
  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);
  var MO = window.MutationObserver || window.WebKitMutationObserver;
  var SELECTOR = '[touch-action]';
  var OBSERVER_INIT = {
    subtree: true,
    childList: true,
    attributes: true,
    attributeOldValue: true,
    attributeFilter: ['touch-action']
  };

  function Installer(add, remove, changed, binder) {
    this.addCallback = add.bind(binder);
    this.removeCallback = remove.bind(binder);
    this.changedCallback = changed.bind(binder);
    if (MO) {
      this.observer = new MO(this.mutationWatcher.bind(this));
    }
  }

  Installer.prototype = {
    watchSubtree: function(target) {

      // Only watch scopes that can target find, as these are top-level.
      // Otherwise we can see duplicate additions and removals that add noise.
      //
      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see
      // a removal without an insertion when a node is redistributed among
      // shadows. Since it all ends up correct in the document, watching only
      // the document will yield the correct mutations to watch.
      if (this.observer && targeting.canTarget(target)) {
        this.observer.observe(target, OBSERVER_INIT);
      }
    },
    enableOnSubtree: function(target) {
      this.watchSubtree(target);
      if (target === document && document.readyState !== 'complete') {
        this.installOnLoad();
      } else {
        this.installNewSubtree(target);
      }
    },
    installNewSubtree: function(target) {
      forEach(this.findElements(target), this.addElement, this);
    },
    findElements: function(target) {
      if (target.querySelectorAll) {
        return target.querySelectorAll(SELECTOR);
      }
      return [];
    },
    removeElement: function(el) {
      this.removeCallback(el);
    },
    addElement: function(el) {
      this.addCallback(el);
    },
    elementChanged: function(el, oldValue) {
      this.changedCallback(el, oldValue);
    },
    concatLists: function(accum, list) {
      return accum.concat(toArray(list));
    },

    // register all touch-action = none nodes on document load
    installOnLoad: function() {
      document.addEventListener('readystatechange', function() {
        if (document.readyState === 'complete') {
          this.installNewSubtree(document);
        }
      }.bind(this));
    },
    isElement: function(n) {
      return n.nodeType === Node.ELEMENT_NODE;
    },
    flattenMutationTree: function(inNodes) {

      // find children with touch-action
      var tree = map(inNodes, this.findElements, this);

      // make sure the added nodes are accounted for
      tree.push(filter(inNodes, this.isElement));

      // flatten the list
      return tree.reduce(this.concatLists, []);
    },
    mutationWatcher: function(mutations) {
      mutations.forEach(this.mutationHandler, this);
    },
    mutationHandler: function(m) {
      if (m.type === 'childList') {
        var added = this.flattenMutationTree(m.addedNodes);
        added.forEach(this.addElement, this);
        var removed = this.flattenMutationTree(m.removedNodes);
        removed.forEach(this.removeElement, this);
      } else if (m.type === 'attributes') {
        this.elementChanged(m.target, m.oldValue);
      }
    }
  };

  function shadowSelector(v) {
    return 'body /shadow-deep/ ' + selector(v);
  }
  function selector(v) {
    return '[touch-action="' + v + '"]';
  }
  function rule(v) {
    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; }';
  }
  var attrib2css = [
    'none',
    'auto',
    'pan-x',
    'pan-y',
    {
      rule: 'pan-x pan-y',
      selectors: [
        'pan-x pan-y',
        'pan-y pan-x'
      ]
    }
  ];
  var styles = '';

  // only install stylesheet if the browser has touch action support
  var hasNativePE = window.PointerEvent || window.MSPointerEvent;

  // only add shadow selectors if shadowdom is supported
  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;

  function applyAttributeStyles() {
    if (hasNativePE) {
      attrib2css.forEach(function(r) {
        if (String(r) === r) {
          styles += selector(r) + rule(r) + '\n';
          if (hasShadowRoot) {
            styles += shadowSelector(r) + rule(r) + '\n';
          }
        } else {
          styles += r.selectors.map(selector) + rule(r.rule) + '\n';
          if (hasShadowRoot) {
            styles += r.selectors.map(shadowSelector) + rule(r.rule) + '\n';
          }
        }
      });

      var el = document.createElement('style');
      el.textContent = styles;
      document.head.appendChild(el);
    }
  }

  var pointermap = dispatcher.pointermap;

  // radius around touchend that swallows mouse events
  var DEDUP_DIST = 25;

  // left, middle, right, back, forward
  var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];

  var HAS_BUTTONS = false;
  try {
    HAS_BUTTONS = new MouseEvent('test', { buttons: 1 }).buttons === 1;
  } catch (e) {}

  // handler block for native mouse events
  var mouseEvents = {
    POINTER_ID: 1,
    POINTER_TYPE: 'mouse',
    events: [
      'mousedown',
      'mousemove',
      'mouseup',
      'mouseover',
      'mouseout'
    ],
    register: function(target) {
      dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      dispatcher.unlisten(target, this.events);
    },
    lastTouches: [],

    // collide with the global mouse listener
    isEventSimulatedFromTouch: function(inEvent) {
      var lts = this.lastTouches;
      var x = inEvent.clientX;
      var y = inEvent.clientY;
      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {

        // simulated mouse events will be swallowed near a primary touchend
        var dx = Math.abs(x - t.x);
        var dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
          return true;
        }
      }
    },
    prepareEvent: function(inEvent) {
      var e = dispatcher.cloneEvent(inEvent);

      // forward mouse preventDefault
      var pd = e.preventDefault;
      e.preventDefault = function() {
        inEvent.preventDefault();
        pd();
      };
      e.pointerId = this.POINTER_ID;
      e.isPrimary = true;
      e.pointerType = this.POINTER_TYPE;
      return e;
    },
    prepareButtonsForMove: function(e, inEvent) {
      var p = pointermap.get(this.POINTER_ID);

      // Update buttons state after possible out-of-document mouseup.
      if (inEvent.which === 0 || !p) {
        e.buttons = 0;
      } else {
        e.buttons = p.buttons;
      }
      inEvent.buttons = e.buttons;
    },
    mousedown: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = pointermap.get(this.POINTER_ID);
        var e = this.prepareEvent(inEvent);
        if (!HAS_BUTTONS) {
          e.buttons = BUTTON_TO_BUTTONS[e.button];
          if (p) { e.buttons |= p.buttons; }
          inEvent.buttons = e.buttons;
        }
        pointermap.set(this.POINTER_ID, inEvent);
        if (!p || p.buttons === 0) {
          dispatcher.down(e);
        } else {
          dispatcher.move(e);
        }
      }
    },
    mousemove: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
        e.button = -1;
        pointermap.set(this.POINTER_ID, inEvent);
        dispatcher.move(e);
      }
    },
    mouseup: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var p = pointermap.get(this.POINTER_ID);
        var e = this.prepareEvent(inEvent);
        if (!HAS_BUTTONS) {
          var up = BUTTON_TO_BUTTONS[e.button];

          // Produces wrong state of buttons in Browsers without `buttons` support
          // when a mouse button that was pressed outside the document is released
          // inside and other buttons are still pressed down.
          e.buttons = p ? p.buttons & ~up : 0;
          inEvent.buttons = e.buttons;
        }
        pointermap.set(this.POINTER_ID, inEvent);

        // Support: Firefox <=44 only
        // FF Ubuntu includes the lifted button in the `buttons` property on
        // mouseup.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1223366
        e.buttons &= ~BUTTON_TO_BUTTONS[e.button];
        if (e.buttons === 0) {
          dispatcher.up(e);
        } else {
          dispatcher.move(e);
        }
      }
    },
    mouseover: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
        e.button = -1;
        pointermap.set(this.POINTER_ID, inEvent);
        dispatcher.enterOver(e);
      }
    },
    mouseout: function(inEvent) {
      if (!this.isEventSimulatedFromTouch(inEvent)) {
        var e = this.prepareEvent(inEvent);
        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
        e.button = -1;
        dispatcher.leaveOut(e);
      }
    },
    cancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.cancel(e);
      this.deactivateMouse();
    },
    deactivateMouse: function() {
      pointermap.delete(this.POINTER_ID);
    }
  };

  var captureInfo = dispatcher.captureInfo;
  var findTarget = targeting.findTarget.bind(targeting);
  var allShadows = targeting.allShadows.bind(targeting);
  var pointermap$1 = dispatcher.pointermap;

  // This should be long enough to ignore compat mouse events made by touch
  var DEDUP_TIMEOUT = 2500;
  var CLICK_COUNT_TIMEOUT = 200;
  var ATTRIB = 'touch-action';
  var INSTALLER;

  // handler block for native touch events
  var touchEvents = {
    events: [
      'touchstart',
      'touchmove',
      'touchend',
      'touchcancel'
    ],
    register: function(target) {
      INSTALLER.enableOnSubtree(target);
    },
    unregister: function() {

      // TODO(dfreedman): is it worth it to disconnect the MO?
    },
    elementAdded: function(el) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      if (st) {
        el._scrollType = st;
        dispatcher.listen(el, this.events);

        // set touch-action on shadows as well
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
          dispatcher.listen(s, this.events);
        }, this);
      }
    },
    elementRemoved: function(el) {
      el._scrollType = undefined;
      dispatcher.unlisten(el, this.events);

      // remove touch-action from shadow
      allShadows(el).forEach(function(s) {
        s._scrollType = undefined;
        dispatcher.unlisten(s, this.events);
      }, this);
    },
    elementChanged: function(el, oldValue) {
      var a = el.getAttribute(ATTRIB);
      var st = this.touchActionToScrollType(a);
      var oldSt = this.touchActionToScrollType(oldValue);

      // simply update scrollType if listeners are already established
      if (st && oldSt) {
        el._scrollType = st;
        allShadows(el).forEach(function(s) {
          s._scrollType = st;
        }, this);
      } else if (oldSt) {
        this.elementRemoved(el);
      } else if (st) {
        this.elementAdded(el);
      }
    },
    scrollTypes: {
      EMITTER: 'none',
      XSCROLLER: 'pan-x',
      YSCROLLER: 'pan-y',
      SCROLLER: /^(?:pan-x pan-y)|(?:pan-y pan-x)|auto$/
    },
    touchActionToScrollType: function(touchAction) {
      var t = touchAction;
      var st = this.scrollTypes;
      if (t === 'none') {
        return 'none';
      } else if (t === st.XSCROLLER) {
        return 'X';
      } else if (t === st.YSCROLLER) {
        return 'Y';
      } else if (st.SCROLLER.exec(t)) {
        return 'XY';
      }
    },
    POINTER_TYPE: 'touch',
    firstTouch: null,
    isPrimaryTouch: function(inTouch) {
      return this.firstTouch === inTouch.identifier;
    },
    setPrimaryTouch: function(inTouch) {

      // set primary touch if there no pointers, or the only pointer is the mouse
      if (pointermap$1.size === 0 || (pointermap$1.size === 1 && pointermap$1.has(1))) {
        this.firstTouch = inTouch.identifier;
        this.firstXY = { X: inTouch.clientX, Y: inTouch.clientY };
        this.scrolling = false;
        this.cancelResetClickCount();
      }
    },
    removePrimaryPointer: function(inPointer) {
      if (inPointer.isPrimary) {
        this.firstTouch = null;
        this.firstXY = null;
        this.resetClickCount();
      }
    },
    clickCount: 0,
    resetId: null,
    resetClickCount: function() {
      var fn = function() {
        this.clickCount = 0;
        this.resetId = null;
      }.bind(this);
      this.resetId = setTimeout(fn, CLICK_COUNT_TIMEOUT);
    },
    cancelResetClickCount: function() {
      if (this.resetId) {
        clearTimeout(this.resetId);
      }
    },
    typeToButtons: function(type) {
      var ret = 0;
      if (type === 'touchstart' || type === 'touchmove') {
        ret = 1;
      }
      return ret;
    },
    touchToPointer: function(inTouch) {
      var cte = this.currentTouchEvent;
      var e = dispatcher.cloneEvent(inTouch);

      // We reserve pointerId 1 for Mouse.
      // Touch identifiers can start at 0.
      // Add 2 to the touch identifier for compatibility.
      var id = e.pointerId = inTouch.identifier + 2;
      e.target = captureInfo[id] || findTarget(e);
      e.bubbles = true;
      e.cancelable = true;
      e.detail = this.clickCount;
      e.button = 0;
      e.buttons = this.typeToButtons(cte.type);
      e.width = (inTouch.radiusX || inTouch.webkitRadiusX || 0) * 2;
      e.height = (inTouch.radiusY || inTouch.webkitRadiusY || 0) * 2;
      e.pressure = inTouch.force || inTouch.webkitForce || 0.5;
      e.isPrimary = this.isPrimaryTouch(inTouch);
      e.pointerType = this.POINTER_TYPE;

      // forward modifier keys
      e.altKey = cte.altKey;
      e.ctrlKey = cte.ctrlKey;
      e.metaKey = cte.metaKey;
      e.shiftKey = cte.shiftKey;

      // forward touch preventDefaults
      var self = this;
      e.preventDefault = function() {
        self.scrolling = false;
        self.firstXY = null;
        cte.preventDefault();
      };
      return e;
    },
    processTouches: function(inEvent, inFunction) {
      var tl = inEvent.changedTouches;
      this.currentTouchEvent = inEvent;
      for (var i = 0, t; i < tl.length; i++) {
        t = tl[i];
        inFunction.call(this, this.touchToPointer(t));
      }
    },

    // For single axis scrollers, determines whether the element should emit
    // pointer events or behave as a scroller
    shouldScroll: function(inEvent) {
      if (this.firstXY) {
        var ret;
        var scrollAxis = inEvent.currentTarget._scrollType;
        if (scrollAxis === 'none') {

          // this element is a touch-action: none, should never scroll
          ret = false;
        } else if (scrollAxis === 'XY') {

          // this element should always scroll
          ret = true;
        } else {
          var t = inEvent.changedTouches[0];

          // check the intended scroll axis, and other axis
          var a = scrollAxis;
          var oa = scrollAxis === 'Y' ? 'X' : 'Y';
          var da = Math.abs(t['client' + a] - this.firstXY[a]);
          var doa = Math.abs(t['client' + oa] - this.firstXY[oa]);

          // if delta in the scroll axis > delta other axis, scroll instead of
          // making events
          ret = da >= doa;
        }
        this.firstXY = null;
        return ret;
      }
    },
    findTouch: function(inTL, inId) {
      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {
        if (t.identifier === inId) {
          return true;
        }
      }
    },

    // In some instances, a touchstart can happen without a touchend. This
    // leaves the pointermap in a broken state.
    // Therefore, on every touchstart, we remove the touches that did not fire a
    // touchend event.
    // To keep state globally consistent, we fire a
    // pointercancel for this "abandoned" touch
    vacuumTouches: function(inEvent) {
      var tl = inEvent.touches;

      // pointermap.size should be < tl.length here, as the touchstart has not
      // been processed yet.
      if (pointermap$1.size >= tl.length) {
        var d = [];
        pointermap$1.forEach(function(value, key) {

          // Never remove pointerId == 1, which is mouse.
          // Touch identifiers are 2 smaller than their pointerId, which is the
          // index in pointermap.
          if (key !== 1 && !this.findTouch(tl, key - 2)) {
            var p = value.out;
            d.push(p);
          }
        }, this);
        d.forEach(this.cancelOut, this);
      }
    },
    touchstart: function(inEvent) {
      this.vacuumTouches(inEvent);
      this.setPrimaryTouch(inEvent.changedTouches[0]);
      this.dedupSynthMouse(inEvent);
      if (!this.scrolling) {
        this.clickCount++;
        this.processTouches(inEvent, this.overDown);
      }
    },
    overDown: function(inPointer) {
      pointermap$1.set(inPointer.pointerId, {
        target: inPointer.target,
        out: inPointer,
        outTarget: inPointer.target
      });
      dispatcher.enterOver(inPointer);
      dispatcher.down(inPointer);
    },
    touchmove: function(inEvent) {
      if (!this.scrolling) {
        if (this.shouldScroll(inEvent)) {
          this.scrolling = true;
          this.touchcancel(inEvent);
        } else {
          inEvent.preventDefault();
          this.processTouches(inEvent, this.moveOverOut);
        }
      }
    },
    moveOverOut: function(inPointer) {
      var event = inPointer;
      var pointer = pointermap$1.get(event.pointerId);

      // a finger drifted off the screen, ignore it
      if (!pointer) {
        return;
      }
      var outEvent = pointer.out;
      var outTarget = pointer.outTarget;
      dispatcher.move(event);
      if (outEvent && outTarget !== event.target) {
        outEvent.relatedTarget = event.target;
        event.relatedTarget = outTarget;

        // recover from retargeting by shadow
        outEvent.target = outTarget;
        if (event.target) {
          dispatcher.leaveOut(outEvent);
          dispatcher.enterOver(event);
        } else {

          // clean up case when finger leaves the screen
          event.target = outTarget;
          event.relatedTarget = null;
          this.cancelOut(event);
        }
      }
      pointer.out = event;
      pointer.outTarget = event.target;
    },
    touchend: function(inEvent) {
      this.dedupSynthMouse(inEvent);
      this.processTouches(inEvent, this.upOut);
    },
    upOut: function(inPointer) {
      if (!this.scrolling) {
        dispatcher.up(inPointer);
        dispatcher.leaveOut(inPointer);
      }
      this.cleanUpPointer(inPointer);
    },
    touchcancel: function(inEvent) {
      this.processTouches(inEvent, this.cancelOut);
    },
    cancelOut: function(inPointer) {
      dispatcher.cancel(inPointer);
      dispatcher.leaveOut(inPointer);
      this.cleanUpPointer(inPointer);
    },
    cleanUpPointer: function(inPointer) {
      pointermap$1.delete(inPointer.pointerId);
      this.removePrimaryPointer(inPointer);
    },

    // prevent synth mouse events from creating pointer events
    dedupSynthMouse: function(inEvent) {
      var lts = mouseEvents.lastTouches;
      var t = inEvent.changedTouches[0];

      // only the primary finger will synth mouse events
      if (this.isPrimaryTouch(t)) {

        // remember x/y of last touch
        var lt = { x: t.clientX, y: t.clientY };
        lts.push(lt);
        var fn = (function(lts, lt) {
          var i = lts.indexOf(lt);
          if (i > -1) {
            lts.splice(i, 1);
          }
        }).bind(null, lts, lt);
        setTimeout(fn, DEDUP_TIMEOUT);
      }
    }
  };

  INSTALLER = new Installer(touchEvents.elementAdded, touchEvents.elementRemoved,
    touchEvents.elementChanged, touchEvents);

  var pointermap$2 = dispatcher.pointermap;
  var HAS_BITMAP_TYPE = window.MSPointerEvent &&
    typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';
  var msEvents = {
    events: [
      'MSPointerDown',
      'MSPointerMove',
      'MSPointerUp',
      'MSPointerOut',
      'MSPointerOver',
      'MSPointerCancel',
      'MSGotPointerCapture',
      'MSLostPointerCapture'
    ],
    register: function(target) {
      dispatcher.listen(target, this.events);
    },
    unregister: function(target) {
      dispatcher.unlisten(target, this.events);
    },
    POINTER_TYPES: [
      '',
      'unavailable',
      'touch',
      'pen',
      'mouse'
    ],
    prepareEvent: function(inEvent) {
      var e = inEvent;
      if (HAS_BITMAP_TYPE) {
        e = dispatcher.cloneEvent(inEvent);
        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];
      }
      return e;
    },
    cleanup: function(id) {
      pointermap$2.delete(id);
    },
    MSPointerDown: function(inEvent) {
      pointermap$2.set(inEvent.pointerId, inEvent);
      var e = this.prepareEvent(inEvent);
      dispatcher.down(e);
    },
    MSPointerMove: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.move(e);
    },
    MSPointerUp: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.up(e);
      this.cleanup(inEvent.pointerId);
    },
    MSPointerOut: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.leaveOut(e);
    },
    MSPointerOver: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.enterOver(e);
    },
    MSPointerCancel: function(inEvent) {
      var e = this.prepareEvent(inEvent);
      dispatcher.cancel(e);
      this.cleanup(inEvent.pointerId);
    },
    MSLostPointerCapture: function(inEvent) {
      var e = dispatcher.makeEvent('lostpointercapture', inEvent);
      dispatcher.dispatchEvent(e);
    },
    MSGotPointerCapture: function(inEvent) {
      var e = dispatcher.makeEvent('gotpointercapture', inEvent);
      dispatcher.dispatchEvent(e);
    }
  };

  function applyPolyfill() {

    // only activate if this platform does not have pointer events
    if (!window.PointerEvent) {
      window.PointerEvent = PointerEvent;

      if (window.navigator.msPointerEnabled) {
        var tp = window.navigator.msMaxTouchPoints;
        Object.defineProperty(window.navigator, 'maxTouchPoints', {
          value: tp,
          enumerable: true
        });
        dispatcher.registerSource('ms', msEvents);
      } else {
        Object.defineProperty(window.navigator, 'maxTouchPoints', {
          value: 0,
          enumerable: true
        });
        dispatcher.registerSource('mouse', mouseEvents);
        if (window.ontouchstart !== undefined) {
          dispatcher.registerSource('touch', touchEvents);
        }
      }

      dispatcher.register(document);
    }
  }

  var n = window.navigator;
  var s;
  var r;
  var h;
  function assertActive(id) {
    if (!dispatcher.pointermap.has(id)) {
      var error = new Error('InvalidPointerId');
      error.name = 'InvalidPointerId';
      throw error;
    }
  }
  function assertConnected(elem) {
    var parent = elem.parentNode;
    while (parent && parent !== elem.ownerDocument) {
      parent = parent.parentNode;
    }
    if (!parent) {
      var error = new Error('InvalidStateError');
      error.name = 'InvalidStateError';
      throw error;
    }
  }
  function inActiveButtonState(id) {
    var p = dispatcher.pointermap.get(id);
    return p.buttons !== 0;
  }
  if (n.msPointerEnabled) {
    s = function(pointerId) {
      assertActive(pointerId);
      assertConnected(this);
      if (inActiveButtonState(pointerId)) {
        dispatcher.setCapture(pointerId, this, true);
        this.msSetPointerCapture(pointerId);
      }
    };
    r = function(pointerId) {
      assertActive(pointerId);
      dispatcher.releaseCapture(pointerId, true);
      this.msReleasePointerCapture(pointerId);
    };
  } else {
    s = function setPointerCapture(pointerId) {
      assertActive(pointerId);
      assertConnected(this);
      if (inActiveButtonState(pointerId)) {
        dispatcher.setCapture(pointerId, this);
      }
    };
    r = function releasePointerCapture(pointerId) {
      assertActive(pointerId);
      dispatcher.releaseCapture(pointerId);
    };
  }
  h = function hasPointerCapture(pointerId) {
    return !!dispatcher.captureInfo[pointerId];
  };

  function applyPolyfill$1() {
    if (window.Element && !Element.prototype.setPointerCapture) {
      Object.defineProperties(Element.prototype, {
        'setPointerCapture': {
          value: s
        },
        'releasePointerCapture': {
          value: r
        },
        'hasPointerCapture': {
          value: h
        }
      });
    }
  }

  applyAttributeStyles();
  applyPolyfill();
  applyPolyfill$1();

  var pointerevents = {
    dispatcher: dispatcher,
    Installer: Installer,
    PointerEvent: PointerEvent,
    PointerMap: PointerMap,
    targetFinding: targeting
  };

  return pointerevents;

}));
},{}],314:[function(require,module,exports){
/*!
 * EventEmitter v5.2.9 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - https://oli.me.uk/
 * @preserve
 */

;(function (exports) {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    function isValidListener (listener) {
        if (typeof listener === 'function' || listener instanceof RegExp) {
            return true
        } else if (listener && typeof listener === 'object') {
            return isValidListener(listener.listener)
        } else {
            return false
        }
    }

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
        }

        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);

                for (i = 0; i < listeners.length; i++) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return EventEmitter;
        });
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}(typeof window !== 'undefined' ? window : this || {}));

},{}]},{},[1])(1)
});
//# sourceMappingURL=chickenpaint.temp.js.map
